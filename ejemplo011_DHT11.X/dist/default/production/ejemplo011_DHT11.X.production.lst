

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Sat Jun 15 12:14:14 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	16F628A
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	strings,global,class=STRING,delta=2
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	inittext,global,class=CODE,delta=2
    11                           	psect	clrtext,global,class=CODE,delta=2
    12                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	maintext,global,class=CODE,split=1,delta=2
    15                           	psect	text1,local,class=CODE,merge=1,delta=2,group=1
    16                           	psect	text2,local,class=CODE,merge=1,delta=2,group=1
    17                           	psect	text3,local,class=CODE,merge=1,delta=2
    18                           	psect	text4,local,class=CODE,merge=1,delta=2
    19                           	psect	text5,local,class=CODE,merge=1,delta=2
    20                           	psect	text6,local,class=CODE,merge=1,delta=2
    21                           	psect	text7,local,class=CODE,merge=1,delta=2
    22                           	psect	text8,local,class=CODE,merge=1,delta=2
    23                           	psect	text9,local,class=CODE,merge=1,delta=2
    24                           	psect	text10,local,class=CODE,merge=1,delta=2
    25                           	psect	text11,local,class=CODE,merge=1,delta=2
    26                           	psect	text12,local,class=CODE,merge=1,delta=2
    27                           	psect	intentry,global,class=CODE,delta=2
    28                           	dabs	1,0x7E,2
    29  0000                     
    30                           ; Version 2.05
    31                           ; Generated 20/12/2018 GMT
    32                           ; 
    33                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    34                           ; All rights reserved.
    35                           ; 
    36                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    37                           ; 
    38                           ; Redistribution and use in source and binary forms, with or without modification, are
    39                           ; permitted provided that the following conditions are met:
    40                           ; 
    41                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    42                           ;        conditions and the following disclaimer.
    43                           ; 
    44                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    45                           ;        of conditions and the following disclaimer in the documentation and/or other
    46                           ;        materials provided with the distribution.
    47                           ; 
    48                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    49                           ;        software without specific prior written permission.
    50                           ; 
    51                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    52                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    53                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    54                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    55                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    56                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    57                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    58                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    59                           ; 
    60                           ; 
    61                           ; Code-generator required, PIC16F628A Definitions
    62                           ; 
    63                           ; SFR Addresses
    64  0000                     	;# 
    65  0001                     	;# 
    66  0002                     	;# 
    67  0003                     	;# 
    68  0004                     	;# 
    69  0005                     	;# 
    70  0006                     	;# 
    71  000A                     	;# 
    72  000B                     	;# 
    73  000C                     	;# 
    74  000E                     	;# 
    75  000E                     	;# 
    76  000F                     	;# 
    77  0010                     	;# 
    78  0011                     	;# 
    79  0012                     	;# 
    80  0015                     	;# 
    81  0015                     	;# 
    82  0016                     	;# 
    83  0017                     	;# 
    84  0018                     	;# 
    85  0019                     	;# 
    86  001A                     	;# 
    87  001F                     	;# 
    88  0081                     	;# 
    89  0085                     	;# 
    90  0086                     	;# 
    91  008C                     	;# 
    92  008E                     	;# 
    93  0092                     	;# 
    94  0098                     	;# 
    95  0099                     	;# 
    96  009A                     	;# 
    97  009B                     	;# 
    98  009C                     	;# 
    99  009D                     	;# 
   100  009F                     	;# 
   101  0000                     	;# 
   102  0001                     	;# 
   103  0002                     	;# 
   104  0003                     	;# 
   105  0004                     	;# 
   106  0005                     	;# 
   107  0006                     	;# 
   108  000A                     	;# 
   109  000B                     	;# 
   110  000C                     	;# 
   111  000E                     	;# 
   112  000E                     	;# 
   113  000F                     	;# 
   114  0010                     	;# 
   115  0011                     	;# 
   116  0012                     	;# 
   117  0015                     	;# 
   118  0015                     	;# 
   119  0016                     	;# 
   120  0017                     	;# 
   121  0018                     	;# 
   122  0019                     	;# 
   123  001A                     	;# 
   124  001F                     	;# 
   125  0081                     	;# 
   126  0085                     	;# 
   127  0086                     	;# 
   128  008C                     	;# 
   129  008E                     	;# 
   130  0092                     	;# 
   131  0098                     	;# 
   132  0099                     	;# 
   133  009A                     	;# 
   134  009B                     	;# 
   135  009C                     	;# 
   136  009D                     	;# 
   137  009F                     	;# 
   138  0000                     	;# 
   139  0001                     	;# 
   140  0002                     	;# 
   141  0003                     	;# 
   142  0004                     	;# 
   143  0005                     	;# 
   144  0006                     	;# 
   145  000A                     	;# 
   146  000B                     	;# 
   147  000C                     	;# 
   148  000E                     	;# 
   149  000E                     	;# 
   150  000F                     	;# 
   151  0010                     	;# 
   152  0011                     	;# 
   153  0012                     	;# 
   154  0015                     	;# 
   155  0015                     	;# 
   156  0016                     	;# 
   157  0017                     	;# 
   158  0018                     	;# 
   159  0019                     	;# 
   160  001A                     	;# 
   161  001F                     	;# 
   162  0081                     	;# 
   163  0085                     	;# 
   164  0086                     	;# 
   165  008C                     	;# 
   166  008E                     	;# 
   167  0092                     	;# 
   168  0098                     	;# 
   169  0099                     	;# 
   170  009A                     	;# 
   171  009B                     	;# 
   172  009C                     	;# 
   173  009D                     	;# 
   174  009F                     	;# 
   175                           
   176                           	psect	idataBANK0
   177  04AF                     __pidataBANK0:	
   178                           
   179                           ;initializer for main@F715
   180  04AF  3406               	retlw	6
   181  04B0  3400               	retlw	0
   182  04B1  341A               	retlw	26
   183  04B2  342C               	retlw	44
   184  04B3  343E               	retlw	62
   185                           
   186                           ;initializer for _message2
   187  04B4  3452               	retlw	82
   188  04B5  3448               	retlw	72
   189  04B6  3420               	retlw	32
   190  04B7  343D               	retlw	61
   191  04B8  3420               	retlw	32
   192  04B9  3420               	retlw	32
   193  04BA  3420               	retlw	32
   194  04BB  3430               	retlw	48
   195  04BC  3430               	retlw	48
   196  04BD  342E               	retlw	46
   197  04BE  3430               	retlw	48
   198  04BF  3420               	retlw	32
   199  04C0  3425               	retlw	37
   200  04C1  3400               	retlw	0
   201                           
   202                           ;initializer for _message1
   203  04C2  3454               	retlw	84
   204  04C3  3465               	retlw	101
   205  04C4  346D               	retlw	109
   206  04C5  3470               	retlw	112
   207  04C6  3420               	retlw	32
   208  04C7  343D               	retlw	61
   209  04C8  3420               	retlw	32
   210  04C9  3430               	retlw	48
   211  04CA  3430               	retlw	48
   212  04CB  342E               	retlw	46
   213  04CC  3430               	retlw	48
   214  04CD  3420               	retlw	32
   215  04CE  3463               	retlw	99
   216  04CF  3400               	retlw	0
   217  0005                     _PORTAbits	set	5
   218  0011                     _TMR2	set	17
   219  0012                     _T2CON	set	18
   220  000B                     _INTCONbits	set	11
   221  001F                     _CMCON	set	31
   222  0005                     _PORTA	set	5
   223  0012                     _T2CONbits	set	18
   224  000C                     _PIR1bits	set	12
   225  0006                     _PORTB	set	6
   226  0085                     _TRISAbits	set	133
   227  008C                     _PIE1bits	set	140
   228  0085                     _TRISA	set	133
   229  0086                     _TRISB	set	134
   230                           
   231                           	psect	strings
   232  0392                     __pstrings:	
   233  0392                     stringtab:	
   234  0392                     __stringtab:	
   235  0392                     stringcode:	
   236                           ;	String table - string pointers are 1 byte each
   237                           
   238  0392                     stringdir:	
   239  0392  3003               	movlw	high stringdir
   240  0393  008A               	movwf	10
   241  0394  0804               	movf	4,w
   242  0395  0A84               	incf	4,f
   243  0396  0782               	addwf	2,f
   244  0397                     __stringbase:	
   245  0397  3400               	retlw	0
   246  0398                     __end_of__stringtab:	
   247  0398                     STR_4:	
   248  0398  3443               	retlw	67	;'C'
   249  0399  3468               	retlw	104	;'h'
   250  039A  3465               	retlw	101	;'e'
   251  039B  3463               	retlw	99	;'c'
   252  039C  346B               	retlw	107	;'k'
   253  039D  3473               	retlw	115	;'s'
   254  039E  3475               	retlw	117	;'u'
   255  039F  346D               	retlw	109	;'m'
   256  03A0  3420               	retlw	32	;' '
   257  03A1  3465               	retlw	101	;'e'
   258  03A2  3472               	retlw	114	;'r'
   259  03A3  3472               	retlw	114	;'r'
   260  03A4  346F               	retlw	111	;'o'
   261  03A5  3472               	retlw	114	;'r'
   262  03A6  3421               	retlw	33	;'!'
   263  03A7  3400               	retlw	0
   264  03A8                     STR_3:	
   265  03A8  3450               	retlw	80	;'P'
   266  03A9  346C               	retlw	108	;'l'
   267  03AA  3465               	retlw	101	;'e'
   268  03AB  3461               	retlw	97	;'a'
   269  03AC  3473               	retlw	115	;'s'
   270  03AD  3465               	retlw	101	;'e'
   271  03AE  3420               	retlw	32	;' '
   272  03AF  3463               	retlw	99	;'c'
   273  03B0  3468               	retlw	104	;'h'
   274  03B1  3465               	retlw	101	;'e'
   275  03B2  3463               	retlw	99	;'c'
   276  03B3  346B               	retlw	107	;'k'
   277  03B4  342E               	retlw	46	;'.'
   278  03B5  3400               	retlw	0
   279  03B6                     STR_2:	
   280  03B6  344E               	retlw	78	;'N'
   281  03B7  346F               	retlw	111	;'o'
   282  03B8  3420               	retlw	32	;' '
   283  03B9  3472               	retlw	114	;'r'
   284  03BA  3465               	retlw	101	;'e'
   285  03BB  3473               	retlw	115	;'s'
   286  03BC  3470               	retlw	112	;'p'
   287  03BD  346F               	retlw	111	;'o'
   288  03BE  346E               	retlw	110	;'n'
   289  03BF  3473               	retlw	115	;'s'
   290  03C0  3465               	retlw	101	;'e'
   291  03C1  342E               	retlw	46	;'.'
   292  03C2  3400               	retlw	0
   293  03C3                     STR_5:	
   294  03C3  3450               	retlw	80	;'P'
   295  03C4  346C               	retlw	108	;'l'
   296  03C5  3465               	retlw	101	;'e'
   297  03C6  3461               	retlw	97	;'a'
   298  03C7  3473               	retlw	115	;'s'
   299  03C8  3465               	retlw	101	;'e'
   300  03C9  3420               	retlw	32	;' '
   301  03CA  3477               	retlw	119	;'w'
   302  03CB  3461               	retlw	97	;'a'
   303  03CC  3469               	retlw	105	;'i'
   304  03CD  3474               	retlw	116	;'t'
   305  03CE  342E               	retlw	46	;'.'
   306  03CF  3400               	retlw	0
   307  03D0                     STR_1:	
   308  03D0  3442               	retlw	66	;'B'
   309  03D1  3469               	retlw	105	;'i'
   310  03D2  3465               	retlw	101	;'e'
   311  03D3  346E               	retlw	110	;'n'
   312  03D4  3476               	retlw	118	;'v'
   313  03D5  3465               	retlw	101	;'e'
   314  03D6  346E               	retlw	110	;'n'
   315  03D7  3469               	retlw	105	;'i'
   316  03D8  3464               	retlw	100	;'d'
   317  03D9  346F               	retlw	111	;'o'
   318  03DA  3400               	retlw	0
   319                           
   320                           	psect	cinit
   321  000B                     start_initialization:	
   322                           ; #config settings
   323                           
   324  000B                     __initialization:	
   325                           
   326                           ; Initialize objects allocated to BANK0
   327  000B  1383               	bcf	3,7	;select IRP bank0
   328  000C  3041               	movlw	low (__pdataBANK0+33)
   329  000D  00FD               	movwf	btemp+-1
   330  000E  3004               	movlw	high __pidataBANK0
   331  000F  00FE               	movwf	btemp
   332  0010  30AF               	movlw	low __pidataBANK0
   333  0011  00FF               	movwf	btemp+1
   334  0012  3020               	movlw	low __pdataBANK0
   335  0013  0084               	movwf	4
   336  0014  2537               	fcall	init_ram0
   337                           
   338                           ; Clear objects allocated to BANK0
   339  0015  3058               	movlw	low __pbssBANK0
   340  0016  0084               	movwf	4
   341  0017  3069               	movlw	low (__pbssBANK0+17)
   342  0018  2542               	fcall	clear_ram0
   343                           
   344                           ; Clear objects allocated to COMMON
   345  0019  01FA               	clrf	__pbssCOMMON& (0+127)
   346  001A  01FB               	clrf	(__pbssCOMMON+1)& (0+127)
   347  001B                     end_of_initialization:	
   348                           ;End of C runtime variable initialization code
   349                           
   350  001B                     __end_of__initialization:	
   351  001B  0183               	clrf	3
   352  001C  281D               	ljmp	_main	;jump to C main() function
   353                           
   354                           	psect	bssCOMMON
   355  007A                     __pbssCOMMON:	
   356  007A                     _TOUT:	
   357  007A                     	ds	2
   358                           
   359                           	psect	bssBANK0
   360  0058                     __pbssBANK0:	
   361  0058                     _lcd:	
   362  0058                     	ds	5
   363  005D                     _RH_Byte2:	
   364  005D                     	ds	2
   365  005F                     _RH_Byte1:	
   366  005F                     	ds	2
   367  0061                     _T_Byte2:	
   368  0061                     	ds	2
   369  0063                     _T_Byte1:	
   370  0063                     	ds	2
   371  0065                     _i:	
   372  0065                     	ds	2
   373  0067                     _CheckSum:	
   374  0067                     	ds	2
   375                           
   376                           	psect	dataBANK0
   377  0020                     __pdataBANK0:	
   378  0020                     main@F715:	
   379  0020                     	ds	5
   380  0025                     _message2:	
   381  0025                     	ds	14
   382  0033                     _message1:	
   383  0033                     	ds	14
   384                           
   385                           	psect	inittext
   386  0533                     init_fetch0:	
   387                           ;	Called with low address in FSR and high address in W
   388                           
   389  0533  087E               	movf	126,w
   390  0534  008A               	movwf	10
   391  0535  087F               	movf	127,w
   392  0536  0082               	movwf	2
   393  0537                     init_ram0:	
   394                           ;Called with:
   395                           ;	high address of idata address in btemp 
   396                           ;	low address of idata address in btemp+1 
   397                           ;	low address of data in FSR
   398                           ;	high address + 1 of data in btemp-1
   399                           
   400  0537  2533               	fcall	init_fetch0
   401  0538  0080               	movwf	0
   402  0539  0A84               	incf	4,f
   403  053A  0804               	movf	4,w
   404  053B  067D               	xorwf	125,w
   405  053C  1903               	btfsc	3,2
   406  053D  3400               	retlw	0
   407  053E  0AFF               	incf	127,f
   408  053F  1903               	btfsc	3,2
   409  0540  0AFE               	incf	126,f
   410  0541  2D37               	goto	init_ram0
   411                           
   412                           	psect	clrtext
   413  0542                     clear_ram0:	
   414                           ;	Called with FSR containing the base address, and
   415                           ;	W with the last address+1
   416                           
   417  0542  0064               	clrwdt	;clear the watchdog before getting into this loop
   418  0543                     clrloop0:	
   419  0543  0180               	clrf	0	;clear RAM location pointed to by FSR
   420  0544  0A84               	incf	4,f	;increment pointer
   421  0545  0604               	xorwf	4,w	;XOR with final address
   422  0546  1903               	btfsc	3,2	;have we reached the end yet?
   423  0547  3400               	retlw	0	;all done for this memory range, return
   424  0548  0604               	xorwf	4,w	;XOR again to restore value
   425  0549  2D43               	goto	clrloop0	;do the next byte
   426                           
   427                           	psect	cstackCOMMON
   428  0070                     __pcstackCOMMON:	
   429  0070                     ?_LCD_Write:	
   430  0070                     ?_LCD_putrs:	
   431                           ; 1 bytes @ 0x0
   432                           
   433  0070                     ?_StartSignal:	
   434                           ; 1 bytes @ 0x0
   435                           
   436  0070                     ?_LCD_puts:	
   437                           ; 1 bytes @ 0x0
   438                           
   439  0070                     ?_tcInt:	
   440                           ; 1 bytes @ 0x0
   441                           
   442  0070                     ??_tcInt:	
   443                           ; 1 bytes @ 0x0
   444                           
   445  0070                     ?_main:	
   446                           ; 1 bytes @ 0x0
   447                           
   448  0070                     ?_LCD_Out:	
   449                           ; 1 bytes @ 0x0
   450                           
   451  0070                     ?_LCD_putc:	
   452                           ; 1 bytes @ 0x0
   453                           
   454                           
   455                           ; 1 bytes @ 0x0
   456  0070                     	ds	2
   457  0072                     ??_StartSignal:	
   458  0072                     ??_LCD_Out:	
   459                           ; 1 bytes @ 0x2
   460                           
   461  0072                     ?_CheckResponse:	
   462                           ; 1 bytes @ 0x2
   463                           
   464  0072                     ?_ReadByte:	
   465                           ; 2 bytes @ 0x2
   466                           
   467  0072                     ?___lwdiv:	
   468                           ; 2 bytes @ 0x2
   469                           
   470  0072                     ?___lwmod:	
   471                           ; 2 bytes @ 0x2
   472                           
   473  0072                     ___lwdiv@divisor:	
   474                           ; 2 bytes @ 0x2
   475                           
   476  0072                     ___lwmod@divisor:	
   477                           ; 2 bytes @ 0x2
   478                           
   479                           
   480                           ; 2 bytes @ 0x2
   481  0072                     	ds	2
   482  0074                     ??_CheckResponse:	
   483  0074                     ??_ReadByte:	
   484                           ; 1 bytes @ 0x4
   485                           
   486  0074                     ___lwdiv@dividend:	
   487                           ; 1 bytes @ 0x4
   488                           
   489  0074                     ___lwmod@dividend:	
   490                           ; 2 bytes @ 0x4
   491                           
   492                           
   493                           ; 2 bytes @ 0x4
   494  0074                     	ds	1
   495  0075                     LCD_Out@c:	
   496                           
   497                           ; 1 bytes @ 0x5
   498  0075                     	ds	1
   499  0076                     ??_LCD_Write:	
   500  0076                     ??_LCD_putc:	
   501                           ; 1 bytes @ 0x6
   502                           
   503  0076                     ??___lwdiv:	
   504                           ; 1 bytes @ 0x6
   505                           
   506  0076                     ??___lwmod:	
   507                           ; 1 bytes @ 0x6
   508                           
   509                           
   510                           ; 1 bytes @ 0x6
   511  0076                     	ds	1
   512  0077                     ___lwmod@counter:	
   513  0077                     ReadByte@num:	
   514                           ; 1 bytes @ 0x7
   515                           
   516  0077                     ___lwdiv@quotient:	
   517                           ; 2 bytes @ 0x7
   518                           
   519                           
   520                           ; 2 bytes @ 0x7
   521  0077                     	ds	2
   522  0079                     LCD_Write@c:	
   523  0079                     LCD_putc@c:	
   524                           ; 1 bytes @ 0x9
   525                           
   526  0079                     ___lwdiv@counter:	
   527                           ; 1 bytes @ 0x9
   528                           
   529                           
   530                           ; 1 bytes @ 0x9
   531  0079                     	ds	1
   532  007A                     ??_LCD_putrs:	
   533                           
   534                           	psect	cstackBANK0
   535  0041                     __pcstackBANK0:	
   536                           ; 1 bytes @ 0xA
   537                           
   538  0041                     ?_LCD_Init:	
   539  0041                     ??_LCD_puts:	
   540                           ; 1 bytes @ 0x0
   541                           
   542  0041                     LCD_putrs@i:	
   543                           ; 1 bytes @ 0x0
   544                           
   545  0041                     LCD_Init@display:	
   546                           ; 2 bytes @ 0x0
   547                           
   548                           
   549                           ; 5 bytes @ 0x0
   550  0041                     	ds	1
   551  0042                     LCD_puts@i:	
   552                           
   553                           ; 2 bytes @ 0x1
   554  0042                     	ds	1
   555  0043                     LCD_putrs@a:	
   556                           
   557                           ; 1 bytes @ 0x2
   558  0043                     	ds	1
   559  0044                     LCD_puts@a:	
   560                           
   561                           ; 1 bytes @ 0x3
   562  0044                     	ds	2
   563  0046                     ??_LCD_Init:	
   564                           
   565                           ; 1 bytes @ 0x5
   566  0046                     	ds	2
   567  0048                     LCD_Init@cmd:	
   568                           
   569                           ; 1 bytes @ 0x7
   570  0048                     	ds	1
   571  0049                     ??_main:	
   572                           
   573                           ; 1 bytes @ 0x8
   574  0049                     	ds	8
   575  0051                     main@lcd:	
   576                           
   577                           ; 5 bytes @ 0x10
   578  0051                     	ds	5
   579  0056                     main@check:	
   580                           
   581                           ; 2 bytes @ 0x15
   582  0056                     	ds	2
   583                           
   584                           	psect	maintext
   585  001D                     __pmaintext:	
   586 ;;
   587 ;;Main: autosize = 0, tempsize = 8, incstack = 0, save=0
   588 ;;
   589 ;; *************** function _main *****************
   590 ;; Defined at:
   591 ;;		line 43 in file "main.c"
   592 ;; Parameters:    Size  Location     Type
   593 ;;		None
   594 ;; Auto vars:     Size  Location     Type
   595 ;;  lcd             5   16[BANK0 ] struct .
   596 ;;  check           2   21[BANK0 ] unsigned short 
   597 ;; Return value:  Size  Location     Type
   598 ;;                  1    wreg      void 
   599 ;; Registers used:
   600 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   601 ;; Tracked objects:
   602 ;;		On entry : B00/0
   603 ;;		On exit  : 0/0
   604 ;;		Unchanged: 0/0
   605 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   606 ;;      Params:         0       0       0       0
   607 ;;      Locals:         0       7       0       0
   608 ;;      Temps:          0       8       0       0
   609 ;;      Totals:         0      15       0       0
   610 ;;Total ram usage:       15 bytes
   611 ;; Hardware stack levels required when called:    4
   612 ;; This function calls:
   613 ;;		_CheckResponse
   614 ;;		_LCD_Init
   615 ;;		_LCD_Write
   616 ;;		_LCD_putrs
   617 ;;		_LCD_puts
   618 ;;		_ReadByte
   619 ;;		_StartSignal
   620 ;;		___lwdiv
   621 ;;		___lwmod
   622 ;; This function is called by:
   623 ;;		Startup code after reset
   624 ;; This function uses a non-reentrant model
   625 ;;
   626                           
   627                           
   628                           ;psect for function _main
   629  001D                     _main:	
   630                           
   631                           ;main.c: 44:     unsigned short check;;main.c: 45:     TRISB = 0b00000000;
   632                           
   633                           ;incstack = 0
   634                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   635  001D  1683               	bsf	3,5	;RP0=1, select bank1
   636  001E  1303               	bcf	3,6	;RP1=0, select bank1
   637  001F  0186               	clrf	6	;volatile
   638                           
   639                           ;main.c: 46:     PORTB = 0b00000000;
   640  0020  1283               	bcf	3,5	;RP0=0, select bank0
   641  0021  1303               	bcf	3,6	;RP1=0, select bank0
   642  0022  0186               	clrf	6	;volatile
   643                           
   644                           ;main.c: 47:     TRISA = 0b00000001;
   645  0023  3001               	movlw	1
   646  0024  1683               	bsf	3,5	;RP0=1, select bank1
   647  0025  1303               	bcf	3,6	;RP1=0, select bank1
   648  0026  0085               	movwf	5	;volatile
   649                           
   650                           ;main.c: 48:     PORTA = 0b00000000;
   651  0027  1283               	bcf	3,5	;RP0=0, select bank0
   652  0028  1303               	bcf	3,6	;RP1=0, select bank0
   653  0029  0185               	clrf	5	;volatile
   654                           
   655                           ;main.c: 49:     LCD lcd = {&PORTB, 2, 3, 4, 5, 6, 7};
   656  002A  3051               	movlw	main@lcd& (0+255)
   657  002B  0084               	movwf	4
   658  002C  0820               	movf	main@F715,w
   659  002D  1383               	bcf	3,7	;select IRP bank0
   660  002E  0080               	movwf	0
   661  002F  0A84               	incf	4,f
   662  0030  0821               	movf	main@F715+1,w
   663  0031  0080               	movwf	0
   664  0032  0A84               	incf	4,f
   665  0033  0822               	movf	main@F715+2,w
   666  0034  0080               	movwf	0
   667  0035  0A84               	incf	4,f
   668  0036  0823               	movf	main@F715+3,w
   669  0037  0080               	movwf	0
   670  0038  0A84               	incf	4,f
   671  0039  0824               	movf	main@F715+4,w
   672  003A  0080               	movwf	0
   673                           
   674                           ;main.c: 50:     CMCON = 0x07;
   675  003B  3007               	movlw	7
   676  003C  009F               	movwf	31	;volatile
   677                           
   678                           ;main.c: 53:     INTCONbits.GIE = 1;
   679  003D  178B               	bsf	11,7	;volatile
   680                           
   681                           ;main.c: 54:     INTCONbits.PEIE = 1;
   682  003E  170B               	bsf	11,6	;volatile
   683                           
   684                           ;main.c: 55:     PIE1bits.TMR2IE = 1;
   685  003F  1683               	bsf	3,5	;RP0=1, select bank1
   686  0040  1303               	bcf	3,6	;RP1=0, select bank1
   687  0041  148C               	bsf	12,1	;volatile
   688                           
   689                           ;main.c: 56:     T2CON = 0;
   690  0042  1283               	bcf	3,5	;RP0=0, select bank0
   691  0043  1303               	bcf	3,6	;RP1=0, select bank0
   692  0044  0192               	clrf	18	;volatile
   693                           
   694                           ;main.c: 57:     PIR1bits.TMR2IF = 0;
   695  0045  108C               	bcf	12,1	;volatile
   696                           
   697                           ;main.c: 58:     TMR2 = 0;
   698  0046  0191               	clrf	17	;volatile
   699                           
   700                           ;main.c: 60:     LCD_Init(lcd);
   701  0047  3041               	movlw	LCD_Init@display& (0+255)
   702  0048  0084               	movwf	4
   703  0049  0851               	movf	main@lcd,w
   704  004A  0080               	movwf	0
   705  004B  0A84               	incf	4,f
   706  004C  0852               	movf	main@lcd+1,w
   707  004D  0080               	movwf	0
   708  004E  0A84               	incf	4,f
   709  004F  0853               	movf	main@lcd+2,w
   710  0050  0080               	movwf	0
   711  0051  0A84               	incf	4,f
   712  0052  0854               	movf	main@lcd+3,w
   713  0053  0080               	movwf	0
   714  0054  0A84               	incf	4,f
   715  0055  0855               	movf	main@lcd+4,w
   716  0056  0080               	movwf	0
   717  0057  22BC               	fcall	_LCD_Init
   718  0058  3008               	movlw	8
   719  0059  233B               	fcall	_LCD_Write
   720  005A  3000               	movlw	0
   721  005B  233B               	fcall	_LCD_Write
   722                           
   723                           ;main.c: 62:     LCD_putrs("Bienvenido");
   724  005C  3039               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   725  005D  2508               	fcall	_LCD_putrs
   726                           
   727                           ;main.c: 63:     _delay((unsigned long)((250)*(4000000/4000.0)));
   728  005E  3002               	movlw	2
   729  005F  1283               	bcf	3,5	;RP0=0, select bank0
   730  0060  1303               	bcf	3,6	;RP1=0, select bank0
   731  0061  00CB               	movwf	??_main+2
   732  0062  3045               	movlw	69
   733  0063  00CA               	movwf	??_main+1
   734  0064  30A9               	movlw	169
   735  0065  00C9               	movwf	??_main
   736  0066                     u1177:	
   737  0066  0BC9               	decfsz	??_main,f
   738  0067  2866               	goto	u1177
   739  0068  0BCA               	decfsz	??_main+1,f
   740  0069  2866               	goto	u1177
   741  006A  0BCB               	decfsz	??_main+2,f
   742  006B  2866               	goto	u1177
   743  006C  0000               	nop
   744  006D  3000               	movlw	0
   745  006E  233B               	fcall	_LCD_Write
   746  006F  3001               	movlw	1
   747  0070  233B               	fcall	_LCD_Write
   748  0071  28F3               	goto	l1665
   749  0072                     l1673:	
   750  0072  3008               	movlw	8
   751  0073  233B               	fcall	_LCD_Write
   752  0074  3000               	movlw	0
   753  0075  233B               	fcall	_LCD_Write
   754                           
   755                           ;main.c: 72:             LCD_putrs("No response.");
   756  0076  301F               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
   757  0077  2508               	fcall	_LCD_putrs
   758  0078  300C               	movlw	12
   759  0079  233B               	fcall	_LCD_Write
   760  007A  3000               	movlw	0
   761  007B  233B               	fcall	_LCD_Write
   762                           
   763                           ;main.c: 74:             LCD_putrs("Please check.");
   764  007C  3011               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
   765  007D  2508               	fcall	_LCD_putrs
   766                           
   767                           ;main.c: 75:         } else {
   768  007E  28F3               	goto	l1665
   769  007F                     l1693:	
   770                           
   771                           ;main.c: 83:                 message1[7] = T_Byte1 / 10 + 48;
   772  007F  300A               	movlw	10
   773  0080  00F2               	movwf	___lwdiv@divisor
   774  0081  3000               	movlw	0
   775  0082  00F3               	movwf	___lwdiv@divisor+1
   776  0083  0864               	movf	_T_Byte1+1,w
   777  0084  00F5               	movwf	___lwdiv@dividend+1
   778  0085  0863               	movf	_T_Byte1,w
   779  0086  00F4               	movwf	___lwdiv@dividend
   780  0087  23DB               	fcall	___lwdiv
   781  0088  0872               	movf	?___lwdiv,w
   782  0089  3E30               	addlw	48
   783  008A  1283               	bcf	3,5	;RP0=0, select bank0
   784  008B  1303               	bcf	3,6	;RP1=0, select bank0
   785  008C  00C9               	movwf	??_main
   786  008D  0849               	movf	??_main,w
   787  008E  00BA               	movwf	_message1+7
   788                           
   789                           ;main.c: 84:                 message1[8] = T_Byte1 % 10 + 48;
   790  008F  300A               	movlw	10
   791  0090  00F2               	movwf	___lwmod@divisor
   792  0091  3000               	movlw	0
   793  0092  00F3               	movwf	___lwmod@divisor+1
   794  0093  0864               	movf	_T_Byte1+1,w
   795  0094  00F5               	movwf	___lwmod@dividend+1
   796  0095  0863               	movf	_T_Byte1,w
   797  0096  00F4               	movwf	___lwmod@dividend
   798  0097  244F               	fcall	___lwmod
   799  0098  0872               	movf	?___lwmod,w
   800  0099  3E30               	addlw	48
   801  009A  1283               	bcf	3,5	;RP0=0, select bank0
   802  009B  1303               	bcf	3,6	;RP1=0, select bank0
   803  009C  00C9               	movwf	??_main
   804  009D  0849               	movf	??_main,w
   805  009E  00BB               	movwf	_message1+8
   806                           
   807                           ;main.c: 85:                 message1[10] = T_Byte2 / 10 + 48;
   808  009F  300A               	movlw	10
   809  00A0  00F2               	movwf	___lwdiv@divisor
   810  00A1  3000               	movlw	0
   811  00A2  00F3               	movwf	___lwdiv@divisor+1
   812  00A3  0862               	movf	_T_Byte2+1,w
   813  00A4  00F5               	movwf	___lwdiv@dividend+1
   814  00A5  0861               	movf	_T_Byte2,w
   815  00A6  00F4               	movwf	___lwdiv@dividend
   816  00A7  23DB               	fcall	___lwdiv
   817  00A8  0872               	movf	?___lwdiv,w
   818  00A9  3E30               	addlw	48
   819  00AA  1283               	bcf	3,5	;RP0=0, select bank0
   820  00AB  1303               	bcf	3,6	;RP1=0, select bank0
   821  00AC  00C9               	movwf	??_main
   822  00AD  0849               	movf	??_main,w
   823  00AE  00BD               	movwf	_message1+10
   824                           
   825                           ;main.c: 86:                 message1[11] = 223;
   826  00AF  30DF               	movlw	223
   827  00B0  00C9               	movwf	??_main
   828  00B1  0849               	movf	??_main,w
   829  00B2  00BE               	movwf	_message1+11
   830                           
   831                           ;main.c: 87:                 message2[7] = RH_Byte1 / 10 + 48;
   832  00B3  300A               	movlw	10
   833  00B4  00F2               	movwf	___lwdiv@divisor
   834  00B5  3000               	movlw	0
   835  00B6  00F3               	movwf	___lwdiv@divisor+1
   836  00B7  0860               	movf	_RH_Byte1+1,w
   837  00B8  00F5               	movwf	___lwdiv@dividend+1
   838  00B9  085F               	movf	_RH_Byte1,w
   839  00BA  00F4               	movwf	___lwdiv@dividend
   840  00BB  23DB               	fcall	___lwdiv
   841  00BC  0872               	movf	?___lwdiv,w
   842  00BD  3E30               	addlw	48
   843  00BE  1283               	bcf	3,5	;RP0=0, select bank0
   844  00BF  1303               	bcf	3,6	;RP1=0, select bank0
   845  00C0  00C9               	movwf	??_main
   846  00C1  0849               	movf	??_main,w
   847  00C2  00AC               	movwf	_message2+7
   848                           
   849                           ;main.c: 88:                 message2[8] = RH_Byte1 % 10 + 48;
   850  00C3  300A               	movlw	10
   851  00C4  00F2               	movwf	___lwmod@divisor
   852  00C5  3000               	movlw	0
   853  00C6  00F3               	movwf	___lwmod@divisor+1
   854  00C7  0860               	movf	_RH_Byte1+1,w
   855  00C8  00F5               	movwf	___lwmod@dividend+1
   856  00C9  085F               	movf	_RH_Byte1,w
   857  00CA  00F4               	movwf	___lwmod@dividend
   858  00CB  244F               	fcall	___lwmod
   859  00CC  0872               	movf	?___lwmod,w
   860  00CD  3E30               	addlw	48
   861  00CE  1283               	bcf	3,5	;RP0=0, select bank0
   862  00CF  1303               	bcf	3,6	;RP1=0, select bank0
   863  00D0  00C9               	movwf	??_main
   864  00D1  0849               	movf	??_main,w
   865  00D2  00AD               	movwf	_message2+8
   866                           
   867                           ;main.c: 89:                 message2[10] = RH_Byte2 / 10 + 48;
   868  00D3  300A               	movlw	10
   869  00D4  00F2               	movwf	___lwdiv@divisor
   870  00D5  3000               	movlw	0
   871  00D6  00F3               	movwf	___lwdiv@divisor+1
   872  00D7  085E               	movf	_RH_Byte2+1,w
   873  00D8  00F5               	movwf	___lwdiv@dividend+1
   874  00D9  085D               	movf	_RH_Byte2,w
   875  00DA  00F4               	movwf	___lwdiv@dividend
   876  00DB  23DB               	fcall	___lwdiv
   877  00DC  0872               	movf	?___lwdiv,w
   878  00DD  3E30               	addlw	48
   879  00DE  1283               	bcf	3,5	;RP0=0, select bank0
   880  00DF  1303               	bcf	3,6	;RP1=0, select bank0
   881  00E0  00C9               	movwf	??_main
   882  00E1  0849               	movf	??_main,w
   883  00E2  00AF               	movwf	_message2+10
   884  00E3  3000               	movlw	0
   885  00E4  233B               	fcall	_LCD_Write
   886  00E5  3001               	movlw	1
   887  00E6  233B               	fcall	_LCD_Write
   888  00E7  3008               	movlw	8
   889  00E8  233B               	fcall	_LCD_Write
   890  00E9  3000               	movlw	0
   891  00EA  233B               	fcall	_LCD_Write
   892                           
   893                           ;main.c: 92:                 LCD_puts(message1);
   894  00EB  3033               	movlw	(low (_message1| 0))& (0+255)
   895  00EC  24D0               	fcall	_LCD_puts
   896  00ED  300C               	movlw	12
   897  00EE  233B               	fcall	_LCD_Write
   898  00EF  3000               	movlw	0
   899  00F0  233B               	fcall	_LCD_Write
   900                           
   901                           ;main.c: 94:                 LCD_puts(message2);
   902  00F1  3025               	movlw	(low (_message2| 0))& (0+255)
   903  00F2  24D0               	fcall	_LCD_puts
   904  00F3                     l1665:	
   905                           ;main.c: 95:             } else {
   906                           
   907                           
   908                           ;main.c: 67:         _delay((unsigned long)((1000)*(4000000/4000.0)));
   909  00F3  3006               	movlw	6
   910  00F4  1283               	bcf	3,5	;RP0=0, select bank0
   911  00F5  1303               	bcf	3,6	;RP1=0, select bank0
   912  00F6  00CB               	movwf	??_main+2
   913  00F7  3013               	movlw	19
   914  00F8  00CA               	movwf	??_main+1
   915  00F9  30AD               	movlw	173
   916  00FA  00C9               	movwf	??_main
   917  00FB                     u1187:	
   918  00FB  0BC9               	decfsz	??_main,f
   919  00FC  28FB               	goto	u1187
   920  00FD  0BCA               	decfsz	??_main+1,f
   921  00FE  28FB               	goto	u1187
   922  00FF  0BCB               	decfsz	??_main+2,f
   923  0100  28FB               	goto	u1187
   924  0101  0000               	nop
   925                           
   926                           ;main.c: 68:         StartSignal();
   927  0102  24EE               	fcall	_StartSignal
   928                           
   929                           ;main.c: 69:         check = CheckResponse();
   930  0103  2481               	fcall	_CheckResponse
   931  0104  0873               	movf	?_CheckResponse+1,w
   932  0105  1283               	bcf	3,5	;RP0=0, select bank0
   933  0106  1303               	bcf	3,6	;RP1=0, select bank0
   934  0107  00D7               	movwf	main@check+1
   935  0108  0872               	movf	?_CheckResponse,w
   936  0109  00D6               	movwf	main@check
   937                           
   938                           ;main.c: 70:         if (!check) {
   939  010A  0856               	movf	main@check,w
   940  010B  0457               	iorwf	main@check+1,w
   941  010C  1903               	btfsc	3,2
   942  010D  2872               	goto	l1673
   943                           
   944                           ;main.c: 76:             RH_Byte1 = ReadByte();
   945  010E  2417               	fcall	_ReadByte
   946  010F  0873               	movf	?_ReadByte+1,w
   947  0110  1283               	bcf	3,5	;RP0=0, select bank0
   948  0111  1303               	bcf	3,6	;RP1=0, select bank0
   949  0112  00E0               	movwf	_RH_Byte1+1
   950  0113  0872               	movf	?_ReadByte,w
   951  0114  00DF               	movwf	_RH_Byte1
   952                           
   953                           ;main.c: 77:             RH_Byte2 = ReadByte();
   954  0115  2417               	fcall	_ReadByte
   955  0116  0873               	movf	?_ReadByte+1,w
   956  0117  1283               	bcf	3,5	;RP0=0, select bank0
   957  0118  1303               	bcf	3,6	;RP1=0, select bank0
   958  0119  00DE               	movwf	_RH_Byte2+1
   959  011A  0872               	movf	?_ReadByte,w
   960  011B  00DD               	movwf	_RH_Byte2
   961                           
   962                           ;main.c: 78:             T_Byte1 = ReadByte();
   963  011C  2417               	fcall	_ReadByte
   964  011D  0873               	movf	?_ReadByte+1,w
   965  011E  1283               	bcf	3,5	;RP0=0, select bank0
   966  011F  1303               	bcf	3,6	;RP1=0, select bank0
   967  0120  00E4               	movwf	_T_Byte1+1
   968  0121  0872               	movf	?_ReadByte,w
   969  0122  00E3               	movwf	_T_Byte1
   970                           
   971                           ;main.c: 79:             T_Byte2 = ReadByte();
   972  0123  2417               	fcall	_ReadByte
   973  0124  0873               	movf	?_ReadByte+1,w
   974  0125  1283               	bcf	3,5	;RP0=0, select bank0
   975  0126  1303               	bcf	3,6	;RP1=0, select bank0
   976  0127  00E2               	movwf	_T_Byte2+1
   977  0128  0872               	movf	?_ReadByte,w
   978  0129  00E1               	movwf	_T_Byte2
   979                           
   980                           ;main.c: 80:             CheckSum = ReadByte();
   981  012A  2417               	fcall	_ReadByte
   982  012B  0873               	movf	?_ReadByte+1,w
   983  012C  1283               	bcf	3,5	;RP0=0, select bank0
   984  012D  1303               	bcf	3,6	;RP1=0, select bank0
   985  012E  00E8               	movwf	_CheckSum+1
   986  012F  0872               	movf	?_ReadByte,w
   987  0130  00E7               	movwf	_CheckSum
   988                           
   989                           ;main.c: 82:             if (CheckSum == ((RH_Byte1 + RH_Byte2 + T_Byte1 + T_Byte2) & 0x
      +                          FF)) {
   990  0131  085D               	movf	_RH_Byte2,w
   991  0132  075F               	addwf	_RH_Byte1,w
   992  0133  00C9               	movwf	??_main
   993  0134  085E               	movf	_RH_Byte2+1,w
   994  0135  1803               	skipnc
   995  0136  0A5E               	incf	_RH_Byte2+1,w
   996  0137  0760               	addwf	_RH_Byte1+1,w
   997  0138  00CA               	movwf	??_main+1
   998  0139  0863               	movf	_T_Byte1,w
   999  013A  0749               	addwf	??_main,w
  1000  013B  00CB               	movwf	??_main+2
  1001  013C  0864               	movf	_T_Byte1+1,w
  1002  013D  1803               	skipnc
  1003  013E  0A64               	incf	_T_Byte1+1,w
  1004  013F  074A               	addwf	??_main+1,w
  1005  0140  00CC               	movwf	??_main+3
  1006  0141  0861               	movf	_T_Byte2,w
  1007  0142  074B               	addwf	??_main+2,w
  1008  0143  00CD               	movwf	??_main+4
  1009  0144  0862               	movf	_T_Byte2+1,w
  1010  0145  1803               	skipnc
  1011  0146  0A62               	incf	_T_Byte2+1,w
  1012  0147  074C               	addwf	??_main+3,w
  1013  0148  00CE               	movwf	??_main+5
  1014  0149  30FF               	movlw	255
  1015  014A  054D               	andwf	??_main+4,w
  1016  014B  00CF               	movwf	??_main+6
  1017  014C  3000               	movlw	0
  1018  014D  054E               	andwf	??_main+5,w
  1019  014E  00D0               	movwf	??_main+7
  1020  014F  0868               	movf	_CheckSum+1,w
  1021  0150  0650               	xorwf	??_main+7,w
  1022  0151  1D03               	skipz
  1023  0152  2955               	goto	u1165
  1024  0153  0867               	movf	_CheckSum,w
  1025  0154  064F               	xorwf	??_main+6,w
  1026  0155                     u1165:	
  1027  0155  1903               	btfsc	3,2
  1028  0156  287F               	goto	l1693
  1029  0157  3008               	movlw	8
  1030  0158  233B               	fcall	_LCD_Write
  1031  0159  3000               	movlw	0
  1032  015A  233B               	fcall	_LCD_Write
  1033                           
  1034                           ;main.c: 97:                 LCD_putrs("Checksum error!");
  1035  015B  3001               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
  1036  015C  2508               	fcall	_LCD_putrs
  1037  015D  300C               	movlw	12
  1038  015E  233B               	fcall	_LCD_Write
  1039  015F  3000               	movlw	0
  1040  0160  233B               	fcall	_LCD_Write
  1041                           
  1042                           ;main.c: 99:                 LCD_putrs("Please wait.");
  1043  0161  302C               	movlw	(low ((STR_5-__stringbase)| (0+32768)))& (0+255)
  1044  0162  2508               	fcall	_LCD_putrs
  1045  0163  28F3               	goto	l1665
  1046  0164                     __end_of_main:	
  1047                           
  1048                           	psect	text1
  1049  044F                     __ptext1:	
  1050 ;; *************** function ___lwmod *****************
  1051 ;; Defined at:
  1052 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\lwmod.c"
  1053 ;; Parameters:    Size  Location     Type
  1054 ;;  divisor         2    2[COMMON] unsigned int 
  1055 ;;  dividend        2    4[COMMON] unsigned int 
  1056 ;; Auto vars:     Size  Location     Type
  1057 ;;  counter         1    7[COMMON] unsigned char 
  1058 ;; Return value:  Size  Location     Type
  1059 ;;                  2    2[COMMON] unsigned int 
  1060 ;; Registers used:
  1061 ;;		wreg, status,2, status,0
  1062 ;; Tracked objects:
  1063 ;;		On entry : 0/0
  1064 ;;		On exit  : 0/0
  1065 ;;		Unchanged: 0/0
  1066 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1067 ;;      Params:         4       0       0       0
  1068 ;;      Locals:         1       0       0       0
  1069 ;;      Temps:          1       0       0       0
  1070 ;;      Totals:         6       0       0       0
  1071 ;;Total ram usage:        6 bytes
  1072 ;; Hardware stack levels used:    1
  1073 ;; Hardware stack levels required when called:    1
  1074 ;; This function calls:
  1075 ;;		Nothing
  1076 ;; This function is called by:
  1077 ;;		_main
  1078 ;; This function uses a non-reentrant model
  1079 ;;
  1080                           
  1081                           
  1082                           ;psect for function ___lwmod
  1083  044F                     ___lwmod:	
  1084                           
  1085                           ;incstack = 0
  1086                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  1087  044F  0872               	movf	___lwmod@divisor,w
  1088  0450  0473               	iorwf	___lwmod@divisor+1,w
  1089  0451  1903               	btfsc	3,2
  1090  0452  2C7C               	goto	l1451
  1091  0453  01F7               	clrf	___lwmod@counter
  1092  0454  0AF7               	incf	___lwmod@counter,f
  1093  0455                     l1441:	
  1094  0455  1BF3               	btfsc	___lwmod@divisor+1,7
  1095  0456  2C63               	goto	l1443
  1096  0457  3001               	movlw	1
  1097  0458                     u1035:	
  1098  0458  1003               	clrc
  1099  0459  0DF2               	rlf	___lwmod@divisor,f
  1100  045A  0DF3               	rlf	___lwmod@divisor+1,f
  1101  045B  3EFF               	addlw	-1
  1102  045C  1D03               	skipz
  1103  045D  2C58               	goto	u1035
  1104  045E  3001               	movlw	1
  1105  045F  00F6               	movwf	??___lwmod
  1106  0460  0876               	movf	??___lwmod,w
  1107  0461  07F7               	addwf	___lwmod@counter,f
  1108  0462  2C55               	goto	l1441
  1109  0463                     l1443:	
  1110  0463  0873               	movf	___lwmod@divisor+1,w
  1111  0464  0275               	subwf	___lwmod@dividend+1,w
  1112  0465  1D03               	skipz
  1113  0466  2C69               	goto	u1055
  1114  0467  0872               	movf	___lwmod@divisor,w
  1115  0468  0274               	subwf	___lwmod@dividend,w
  1116  0469                     u1055:	
  1117  0469  1C03               	skipc
  1118  046A  2C71               	goto	l1447
  1119  046B  0872               	movf	___lwmod@divisor,w
  1120  046C  02F4               	subwf	___lwmod@dividend,f
  1121  046D  0873               	movf	___lwmod@divisor+1,w
  1122  046E  1C03               	skipc
  1123  046F  03F5               	decf	___lwmod@dividend+1,f
  1124  0470  02F5               	subwf	___lwmod@dividend+1,f
  1125  0471                     l1447:	
  1126  0471  3001               	movlw	1
  1127  0472                     u1065:	
  1128  0472  1003               	clrc
  1129  0473  0CF3               	rrf	___lwmod@divisor+1,f
  1130  0474  0CF2               	rrf	___lwmod@divisor,f
  1131  0475  3EFF               	addlw	-1
  1132  0476  1D03               	skipz
  1133  0477  2C72               	goto	u1065
  1134  0478  3001               	movlw	1
  1135  0479  02F7               	subwf	___lwmod@counter,f
  1136  047A  1D03               	btfss	3,2
  1137  047B  2C63               	goto	l1443
  1138  047C                     l1451:	
  1139  047C  0875               	movf	___lwmod@dividend+1,w
  1140  047D  00F3               	movwf	?___lwmod+1
  1141  047E  0874               	movf	___lwmod@dividend,w
  1142  047F  00F2               	movwf	?___lwmod
  1143  0480  0008               	return
  1144  0481                     __end_of___lwmod:	
  1145                           
  1146                           	psect	text2
  1147  03DB                     __ptext2:	
  1148 ;; *************** function ___lwdiv *****************
  1149 ;; Defined at:
  1150 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\lwdiv.c"
  1151 ;; Parameters:    Size  Location     Type
  1152 ;;  divisor         2    2[COMMON] unsigned int 
  1153 ;;  dividend        2    4[COMMON] unsigned int 
  1154 ;; Auto vars:     Size  Location     Type
  1155 ;;  quotient        2    7[COMMON] unsigned int 
  1156 ;;  counter         1    9[COMMON] unsigned char 
  1157 ;; Return value:  Size  Location     Type
  1158 ;;                  2    2[COMMON] unsigned int 
  1159 ;; Registers used:
  1160 ;;		wreg, status,2, status,0
  1161 ;; Tracked objects:
  1162 ;;		On entry : 0/0
  1163 ;;		On exit  : 0/0
  1164 ;;		Unchanged: 0/0
  1165 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1166 ;;      Params:         4       0       0       0
  1167 ;;      Locals:         3       0       0       0
  1168 ;;      Temps:          1       0       0       0
  1169 ;;      Totals:         8       0       0       0
  1170 ;;Total ram usage:        8 bytes
  1171 ;; Hardware stack levels used:    1
  1172 ;; Hardware stack levels required when called:    1
  1173 ;; This function calls:
  1174 ;;		Nothing
  1175 ;; This function is called by:
  1176 ;;		_main
  1177 ;; This function uses a non-reentrant model
  1178 ;;
  1179                           
  1180                           
  1181                           ;psect for function ___lwdiv
  1182  03DB                     ___lwdiv:	
  1183                           
  1184                           ;incstack = 0
  1185                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  1186  03DB  01F7               	clrf	___lwdiv@quotient
  1187  03DC  01F8               	clrf	___lwdiv@quotient+1
  1188  03DD  0872               	movf	___lwdiv@divisor,w
  1189  03DE  0473               	iorwf	___lwdiv@divisor+1,w
  1190  03DF  1903               	btfsc	3,2
  1191  03E0  2C12               	goto	l1429
  1192  03E1  01F9               	clrf	___lwdiv@counter
  1193  03E2  0AF9               	incf	___lwdiv@counter,f
  1194  03E3                     l1417:	
  1195  03E3  1BF3               	btfsc	___lwdiv@divisor+1,7
  1196  03E4  2BF1               	goto	l1419
  1197  03E5  3001               	movlw	1
  1198  03E6                     u965:	
  1199  03E6  1003               	clrc
  1200  03E7  0DF2               	rlf	___lwdiv@divisor,f
  1201  03E8  0DF3               	rlf	___lwdiv@divisor+1,f
  1202  03E9  3EFF               	addlw	-1
  1203  03EA  1D03               	skipz
  1204  03EB  2BE6               	goto	u965
  1205  03EC  3001               	movlw	1
  1206  03ED  00F6               	movwf	??___lwdiv
  1207  03EE  0876               	movf	??___lwdiv,w
  1208  03EF  07F9               	addwf	___lwdiv@counter,f
  1209  03F0  2BE3               	goto	l1417
  1210  03F1                     l1419:	
  1211  03F1  3001               	movlw	1
  1212  03F2                     u985:	
  1213  03F2  1003               	clrc
  1214  03F3  0DF7               	rlf	___lwdiv@quotient,f
  1215  03F4  0DF8               	rlf	___lwdiv@quotient+1,f
  1216  03F5  3EFF               	addlw	-1
  1217  03F6  1D03               	skipz
  1218  03F7  2BF2               	goto	u985
  1219  03F8  0873               	movf	___lwdiv@divisor+1,w
  1220  03F9  0275               	subwf	___lwdiv@dividend+1,w
  1221  03FA  1D03               	skipz
  1222  03FB  2BFE               	goto	u995
  1223  03FC  0872               	movf	___lwdiv@divisor,w
  1224  03FD  0274               	subwf	___lwdiv@dividend,w
  1225  03FE                     u995:	
  1226  03FE  1C03               	skipc
  1227  03FF  2C07               	goto	l1425
  1228  0400  0872               	movf	___lwdiv@divisor,w
  1229  0401  02F4               	subwf	___lwdiv@dividend,f
  1230  0402  0873               	movf	___lwdiv@divisor+1,w
  1231  0403  1C03               	skipc
  1232  0404  03F5               	decf	___lwdiv@dividend+1,f
  1233  0405  02F5               	subwf	___lwdiv@dividend+1,f
  1234  0406  1477               	bsf	___lwdiv@quotient,0
  1235  0407                     l1425:	
  1236  0407  3001               	movlw	1
  1237  0408                     u1005:	
  1238  0408  1003               	clrc
  1239  0409  0CF3               	rrf	___lwdiv@divisor+1,f
  1240  040A  0CF2               	rrf	___lwdiv@divisor,f
  1241  040B  3EFF               	addlw	-1
  1242  040C  1D03               	skipz
  1243  040D  2C08               	goto	u1005
  1244  040E  3001               	movlw	1
  1245  040F  02F9               	subwf	___lwdiv@counter,f
  1246  0410  1D03               	btfss	3,2
  1247  0411  2BF1               	goto	l1419
  1248  0412                     l1429:	
  1249  0412  0878               	movf	___lwdiv@quotient+1,w
  1250  0413  00F3               	movwf	?___lwdiv+1
  1251  0414  0877               	movf	___lwdiv@quotient,w
  1252  0415  00F2               	movwf	?___lwdiv
  1253  0416  0008               	return
  1254  0417                     __end_of___lwdiv:	
  1255                           
  1256                           	psect	text3
  1257  04EE                     __ptext3:	
  1258 ;; *************** function _StartSignal *****************
  1259 ;; Defined at:
  1260 ;;		line 106 in file "main.c"
  1261 ;; Parameters:    Size  Location     Type
  1262 ;;		None
  1263 ;; Auto vars:     Size  Location     Type
  1264 ;;		None
  1265 ;; Return value:  Size  Location     Type
  1266 ;;                  1    wreg      void 
  1267 ;; Registers used:
  1268 ;;		wreg
  1269 ;; Tracked objects:
  1270 ;;		On entry : 0/0
  1271 ;;		On exit  : 0/0
  1272 ;;		Unchanged: 0/0
  1273 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1274 ;;      Params:         0       0       0       0
  1275 ;;      Locals:         0       0       0       0
  1276 ;;      Temps:          2       0       0       0
  1277 ;;      Totals:         2       0       0       0
  1278 ;;Total ram usage:        2 bytes
  1279 ;; Hardware stack levels used:    1
  1280 ;; Hardware stack levels required when called:    1
  1281 ;; This function calls:
  1282 ;;		Nothing
  1283 ;; This function is called by:
  1284 ;;		_main
  1285 ;; This function uses a non-reentrant model
  1286 ;;
  1287                           
  1288                           
  1289                           ;psect for function _StartSignal
  1290  04EE                     _StartSignal:	
  1291                           
  1292                           ;main.c: 107:     TRISAbits.TRISA2 = 0;
  1293                           
  1294                           ;incstack = 0
  1295                           ; Regs used in _StartSignal: [wreg]
  1296  04EE  1683               	bsf	3,5	;RP0=1, select bank1
  1297  04EF  1303               	bcf	3,6	;RP1=0, select bank1
  1298  04F0  1105               	bcf	5,2	;volatile
  1299                           
  1300                           ;main.c: 108:     PORTAbits.RA2 = 0;
  1301  04F1  1283               	bcf	3,5	;RP0=0, select bank0
  1302  04F2  1303               	bcf	3,6	;RP1=0, select bank0
  1303  04F3  1105               	bcf	5,2	;volatile
  1304                           
  1305                           ;main.c: 109:     _delay((unsigned long)((18)*(4000000/4000.0)));
  1306  04F4  3018               	movlw	24
  1307  04F5  00F3               	movwf	??_StartSignal+1
  1308  04F6  305F               	movlw	95
  1309  04F7  00F2               	movwf	??_StartSignal
  1310  04F8                     u1197:	
  1311  04F8  0BF2               	decfsz	??_StartSignal,f
  1312  04F9  2CF8               	goto	u1197
  1313  04FA  0BF3               	decfsz	??_StartSignal+1,f
  1314  04FB  2CF8               	goto	u1197
  1315                           
  1316                           ;main.c: 110:     PORTAbits.RA2 = 1;
  1317  04FC  1283               	bcf	3,5	;RP0=0, select bank0
  1318  04FD  1303               	bcf	3,6	;RP1=0, select bank0
  1319  04FE  1505               	bsf	5,2	;volatile
  1320                           
  1321                           ;main.c: 111:     _delay((unsigned long)((20)*(4000000/4000000.0)));
  1322  04FF  3006               	movlw	6
  1323  0500  00F2               	movwf	??_StartSignal
  1324  0501                     u1207:	
  1325  0501  0BF2               	decfsz	??_StartSignal,f
  1326  0502  2D01               	goto	u1207
  1327  0503  0000               	nop
  1328                           
  1329                           ;main.c: 112:     TRISAbits.TRISA2 = 1;
  1330  0504  1683               	bsf	3,5	;RP0=1, select bank1
  1331  0505  1303               	bcf	3,6	;RP1=0, select bank1
  1332  0506  1505               	bsf	5,2	;volatile
  1333  0507  0008               	return
  1334  0508                     __end_of_StartSignal:	
  1335                           
  1336                           	psect	text4
  1337  0417                     __ptext4:	
  1338 ;; *************** function _ReadByte *****************
  1339 ;; Defined at:
  1340 ;;		line 115 in file "main.c"
  1341 ;; Parameters:    Size  Location     Type
  1342 ;;		None
  1343 ;; Auto vars:     Size  Location     Type
  1344 ;;  num             2    7[COMMON] unsigned short 
  1345 ;;  t               2    0        unsigned short 
  1346 ;; Return value:  Size  Location     Type
  1347 ;;                  2    2[COMMON] unsigned short 
  1348 ;; Registers used:
  1349 ;;		wreg, status,2, status,0
  1350 ;; Tracked objects:
  1351 ;;		On entry : 0/0
  1352 ;;		On exit  : 0/0
  1353 ;;		Unchanged: 0/0
  1354 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1355 ;;      Params:         2       0       0       0
  1356 ;;      Locals:         2       0       0       0
  1357 ;;      Temps:          3       0       0       0
  1358 ;;      Totals:         7       0       0       0
  1359 ;;Total ram usage:        7 bytes
  1360 ;; Hardware stack levels used:    1
  1361 ;; Hardware stack levels required when called:    1
  1362 ;; This function calls:
  1363 ;;		Nothing
  1364 ;; This function is called by:
  1365 ;;		_main
  1366 ;; This function uses a non-reentrant model
  1367 ;;
  1368                           
  1369                           
  1370                           ;psect for function _ReadByte
  1371  0417                     _ReadByte:	
  1372                           
  1373                           ;main.c: 116:     unsigned short num = 0, t;
  1374                           
  1375                           ;incstack = 0
  1376                           ; Regs used in _ReadByte: [wreg+status,2+status,0]
  1377  0417  01F7               	clrf	ReadByte@num
  1378  0418  01F8               	clrf	ReadByte@num+1
  1379                           
  1380                           ;main.c: 117:     TRISAbits.TRISA2 = 1;
  1381  0419  1683               	bsf	3,5	;RP0=1, select bank1
  1382  041A  1303               	bcf	3,6	;RP1=0, select bank1
  1383  041B  1505               	bsf	5,2	;volatile
  1384                           
  1385                           ;main.c: 118:     for (i = 0; i < 8; i++) {
  1386  041C  1283               	bcf	3,5	;RP0=0, select bank0
  1387  041D  1303               	bcf	3,6	;RP1=0, select bank0
  1388  041E  01E5               	clrf	_i
  1389  041F  01E6               	clrf	_i+1
  1390  0420                     l210:	
  1391  0420  1D05               	btfss	5,2	;volatile
  1392  0421  2C20               	goto	l210
  1393                           
  1394                           ;main.c: 120:         TMR2 = 0;
  1395  0422  0191               	clrf	17	;volatile
  1396                           
  1397                           ;main.c: 121:         T2CONbits.TMR2ON = 1;
  1398  0423  1512               	bsf	18,2	;volatile
  1399  0424                     l213:	
  1400                           ;main.c: 122:         while (PORTAbits.RA2);
  1401                           
  1402  0424  1905               	btfsc	5,2	;volatile
  1403  0425  2C24               	goto	l213
  1404                           
  1405                           ;main.c: 123:         T2CONbits.TMR2ON = 0;
  1406  0426  1112               	bcf	18,2	;volatile
  1407                           
  1408                           ;main.c: 124:         if (TMR2 > 40) num |= 1 << (7 - i);
  1409  0427  3029               	movlw	41
  1410  0428  0211               	subwf	17,w	;volatile
  1411  0429  1C03               	skipc
  1412  042A  2C3D               	goto	l1391
  1413  042B  0865               	movf	_i,w
  1414  042C  3C07               	sublw	7
  1415  042D  00F4               	movwf	??_ReadByte
  1416  042E  0AF4               	incf	??_ReadByte,f
  1417  042F  3001               	movlw	1
  1418  0430  00F5               	movwf	??_ReadByte+1
  1419  0431  3000               	movlw	0
  1420  0432  00F6               	movwf	??_ReadByte+2
  1421  0433  2C37               	goto	u924
  1422  0434                     u925:	
  1423  0434  1003               	clrc
  1424  0435  0DF5               	rlf	??_ReadByte+1,f
  1425  0436  0DF6               	rlf	??_ReadByte+2,f
  1426  0437                     u924:	
  1427  0437  0BF4               	decfsz	??_ReadByte,f
  1428  0438  2C34               	goto	u925
  1429  0439  0875               	movf	??_ReadByte+1,w
  1430  043A  04F7               	iorwf	ReadByte@num,f
  1431  043B  0876               	movf	??_ReadByte+2,w
  1432  043C  04F8               	iorwf	ReadByte@num+1,f
  1433  043D                     l1391:	
  1434                           
  1435                           ;main.c: 125:     }
  1436  043D  3001               	movlw	1
  1437  043E  07E5               	addwf	_i,f
  1438  043F  1803               	skipnc
  1439  0440  0AE6               	incf	_i+1,f
  1440  0441  3000               	movlw	0
  1441  0442  07E6               	addwf	_i+1,f
  1442  0443  3000               	movlw	0
  1443  0444  0266               	subwf	_i+1,w
  1444  0445  3008               	movlw	8
  1445  0446  1903               	skipnz
  1446  0447  0265               	subwf	_i,w
  1447  0448  1C03               	skipc
  1448  0449  2C20               	goto	l210
  1449                           
  1450                           ;main.c: 126:     return num;
  1451  044A  0878               	movf	ReadByte@num+1,w
  1452  044B  00F3               	movwf	?_ReadByte+1
  1453  044C  0877               	movf	ReadByte@num,w
  1454  044D  00F2               	movwf	?_ReadByte
  1455  044E  0008               	return
  1456  044F                     __end_of_ReadByte:	
  1457                           
  1458                           	psect	text5
  1459  04D0                     __ptext5:	
  1460 ;; *************** function _LCD_puts *****************
  1461 ;; Defined at:
  1462 ;;		line 136 in file "lcd.c"
  1463 ;; Parameters:    Size  Location     Type
  1464 ;;  a               1    wreg     PTR unsigned char 
  1465 ;;		 -> message2(14), message1(14), 
  1466 ;; Auto vars:     Size  Location     Type
  1467 ;;  a               1    3[BANK0 ] PTR unsigned char 
  1468 ;;		 -> message2(14), message1(14), 
  1469 ;;  i               2    1[BANK0 ] int 
  1470 ;; Return value:  Size  Location     Type
  1471 ;;                  1    wreg      void 
  1472 ;; Registers used:
  1473 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1474 ;; Tracked objects:
  1475 ;;		On entry : 0/0
  1476 ;;		On exit  : 0/0
  1477 ;;		Unchanged: 0/0
  1478 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1479 ;;      Params:         0       0       0       0
  1480 ;;      Locals:         0       3       0       0
  1481 ;;      Temps:          0       1       0       0
  1482 ;;      Totals:         0       4       0       0
  1483 ;;Total ram usage:        4 bytes
  1484 ;; Hardware stack levels used:    1
  1485 ;; Hardware stack levels required when called:    3
  1486 ;; This function calls:
  1487 ;;		_LCD_putc
  1488 ;; This function is called by:
  1489 ;;		_main
  1490 ;; This function uses a non-reentrant model
  1491 ;;
  1492                           
  1493                           
  1494                           ;psect for function _LCD_puts
  1495  04D0                     _LCD_puts:	
  1496                           
  1497                           ;incstack = 0
  1498                           ; Regs used in _LCD_puts: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1499                           ;LCD_puts@a stored from wreg
  1500  04D0  1283               	bcf	3,5	;RP0=0, select bank0
  1501  04D1  1303               	bcf	3,6	;RP1=0, select bank0
  1502  04D2  00C4               	movwf	LCD_puts@a
  1503                           
  1504                           ;lcd.c: 138:     for ( int i = 0; a[i] != '\0'; ++i ) {
  1505  04D3  01C2               	clrf	LCD_puts@i
  1506  04D4  01C3               	clrf	LCD_puts@i+1
  1507  04D5                     l1623:	
  1508  04D5  0842               	movf	LCD_puts@i,w
  1509  04D6  0744               	addwf	LCD_puts@a,w
  1510  04D7  00C1               	movwf	??_LCD_puts
  1511  04D8  0841               	movf	??_LCD_puts,w
  1512  04D9  0084               	movwf	4
  1513  04DA  1383               	bcf	3,7	;select IRP bank0
  1514  04DB  0800               	movf	0,w
  1515  04DC  1903               	btfsc	3,2
  1516  04DD  0008               	return
  1517                           
  1518                           ;lcd.c: 139:         LCD_putc(a[i]);
  1519  04DE  0842               	movf	LCD_puts@i,w
  1520  04DF  0744               	addwf	LCD_puts@a,w
  1521  04E0  00C1               	movwf	??_LCD_puts
  1522  04E1  0841               	movf	??_LCD_puts,w
  1523  04E2  0084               	movwf	4
  1524  04E3  0800               	movf	0,w
  1525  04E4  2226               	fcall	_LCD_putc
  1526                           
  1527                           ;lcd.c: 140:     }
  1528  04E5  3001               	movlw	1
  1529  04E6  1283               	bcf	3,5	;RP0=0, select bank0
  1530  04E7  1303               	bcf	3,6	;RP1=0, select bank0
  1531  04E8  07C2               	addwf	LCD_puts@i,f
  1532  04E9  1803               	skipnc
  1533  04EA  0AC3               	incf	LCD_puts@i+1,f
  1534  04EB  3000               	movlw	0
  1535  04EC  07C3               	addwf	LCD_puts@i+1,f
  1536  04ED  2CD5               	goto	l1623
  1537  04EE                     __end_of_LCD_puts:	
  1538                           
  1539                           	psect	text6
  1540  0508                     __ptext6:	
  1541 ;; *************** function _LCD_putrs *****************
  1542 ;; Defined at:
  1543 ;;		line 144 in file "lcd.c"
  1544 ;; Parameters:    Size  Location     Type
  1545 ;;  a               1    wreg     PTR const unsigned char 
  1546 ;;		 -> STR_5(13), STR_4(16), STR_3(14), STR_2(13), 
  1547 ;;		 -> STR_1(11), 
  1548 ;; Auto vars:     Size  Location     Type
  1549 ;;  a               1    2[BANK0 ] PTR const unsigned char 
  1550 ;;		 -> STR_5(13), STR_4(16), STR_3(14), STR_2(13), 
  1551 ;;		 -> STR_1(11), 
  1552 ;;  i               2    0[BANK0 ] int 
  1553 ;; Return value:  Size  Location     Type
  1554 ;;                  1    wreg      void 
  1555 ;; Registers used:
  1556 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1557 ;; Tracked objects:
  1558 ;;		On entry : 0/0
  1559 ;;		On exit  : 0/0
  1560 ;;		Unchanged: 0/0
  1561 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1562 ;;      Params:         0       0       0       0
  1563 ;;      Locals:         0       3       0       0
  1564 ;;      Temps:          0       0       0       0
  1565 ;;      Totals:         0       3       0       0
  1566 ;;Total ram usage:        3 bytes
  1567 ;; Hardware stack levels used:    1
  1568 ;; Hardware stack levels required when called:    3
  1569 ;; This function calls:
  1570 ;;		_LCD_putc
  1571 ;; This function is called by:
  1572 ;;		_main
  1573 ;; This function uses a non-reentrant model
  1574 ;;
  1575                           
  1576                           
  1577                           ;psect for function _LCD_putrs
  1578  0508                     _LCD_putrs:	
  1579                           
  1580                           ;incstack = 0
  1581                           ; Regs used in _LCD_putrs: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1582                           ;LCD_putrs@a stored from wreg
  1583  0508  1283               	bcf	3,5	;RP0=0, select bank0
  1584  0509  1303               	bcf	3,6	;RP1=0, select bank0
  1585  050A  00C3               	movwf	LCD_putrs@a
  1586                           
  1587                           ;lcd.c: 146:     for ( int i = 0; a[i] != '\0'; ++i ) {
  1588  050B  01C1               	clrf	LCD_putrs@i
  1589  050C  01C2               	clrf	LCD_putrs@i+1
  1590  050D                     l1335:	
  1591  050D  0841               	movf	LCD_putrs@i,w
  1592  050E  0743               	addwf	LCD_putrs@a,w
  1593  050F  0084               	movwf	4
  1594  0510  2392               	fcall	stringdir
  1595  0511  3A00               	xorlw	0
  1596  0512  1903               	btfsc	3,2
  1597  0513  0008               	return
  1598                           
  1599                           ;lcd.c: 147:         LCD_putc(a[i]);
  1600  0514  0841               	movf	LCD_putrs@i,w
  1601  0515  0743               	addwf	LCD_putrs@a,w
  1602  0516  0084               	movwf	4
  1603  0517  2392               	fcall	stringdir
  1604  0518  2226               	fcall	_LCD_putc
  1605                           
  1606                           ;lcd.c: 148:     }
  1607  0519  3001               	movlw	1
  1608  051A  1283               	bcf	3,5	;RP0=0, select bank0
  1609  051B  1303               	bcf	3,6	;RP1=0, select bank0
  1610  051C  07C1               	addwf	LCD_putrs@i,f
  1611  051D  1803               	skipnc
  1612  051E  0AC2               	incf	LCD_putrs@i+1,f
  1613  051F  3000               	movlw	0
  1614  0520  07C2               	addwf	LCD_putrs@i+1,f
  1615  0521  2D0D               	goto	l1335
  1616  0522                     __end_of_LCD_putrs:	
  1617                           
  1618                           	psect	text7
  1619  0226                     __ptext7:	
  1620 ;; *************** function _LCD_putc *****************
  1621 ;; Defined at:
  1622 ;;		line 119 in file "lcd.c"
  1623 ;; Parameters:    Size  Location     Type
  1624 ;;  c               1    wreg     unsigned char 
  1625 ;; Auto vars:     Size  Location     Type
  1626 ;;  c               1    9[COMMON] unsigned char 
  1627 ;; Return value:  Size  Location     Type
  1628 ;;                  1    wreg      void 
  1629 ;; Registers used:
  1630 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1631 ;; Tracked objects:
  1632 ;;		On entry : 0/0
  1633 ;;		On exit  : 0/0
  1634 ;;		Unchanged: 0/0
  1635 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1636 ;;      Params:         0       0       0       0
  1637 ;;      Locals:         1       0       0       0
  1638 ;;      Temps:          3       0       0       0
  1639 ;;      Totals:         4       0       0       0
  1640 ;;Total ram usage:        4 bytes
  1641 ;; Hardware stack levels used:    1
  1642 ;; Hardware stack levels required when called:    2
  1643 ;; This function calls:
  1644 ;;		_LCD_Out
  1645 ;; This function is called by:
  1646 ;;		_LCD_puts
  1647 ;;		_LCD_putrs
  1648 ;; This function uses a non-reentrant model
  1649 ;;
  1650                           
  1651                           
  1652                           ;psect for function _LCD_putc
  1653  0226                     _LCD_putc:	
  1654                           
  1655                           ;incstack = 0
  1656                           ; Regs used in _LCD_putc: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1657                           ;LCD_putc@c stored from wreg
  1658  0226  00F9               	movwf	LCD_putc@c
  1659                           
  1660                           ;lcd.c: 121:    *(lcd.PORT) |= 1 << lcd.RS;
  1661  0227  3001               	movlw	1
  1662  0228  00F6               	movwf	??_LCD_putc
  1663  0229  1283               	bcf	3,5	;RP0=0, select bank0
  1664  022A  1303               	bcf	3,6	;RP1=0, select bank0
  1665  022B  085A               	movf	_lcd+2,w
  1666  022C  3907               	andlw	7
  1667  022D  3E01               	addlw	1
  1668  022E  2A31               	goto	u714
  1669  022F                     u715:	
  1670  022F  1003               	clrc
  1671  0230  0DF6               	rlf	??_LCD_putc,f
  1672  0231                     u714:	
  1673  0231  3EFF               	addlw	-1
  1674  0232  1D03               	skipz
  1675  0233  2A2F               	goto	u715
  1676  0234  0876               	movf	??_LCD_putc,w
  1677  0235  00F7               	movwf	??_LCD_putc+1
  1678  0236  0858               	movf	_lcd,w
  1679  0237  0084               	movwf	4
  1680  0238  1783               	bsf	3,7
  1681  0239  1C59               	btfss	_lcd+1,0
  1682  023A  1383               	bcf	3,7
  1683  023B  0877               	movf	??_LCD_putc+1,w
  1684  023C  0480               	iorwf	0,f
  1685                           
  1686                           ;lcd.c: 122:     LCD_Out((c & 0xF0) >> 4);
  1687  023D  0879               	movf	LCD_putc@c,w
  1688  023E  00F6               	movwf	??_LCD_putc
  1689  023F  3004               	movlw	4
  1690  0240                     u725:	
  1691  0240  1003               	clrc
  1692  0241  0CF6               	rrf	??_LCD_putc,f
  1693  0242  3EFF               	addlw	-1
  1694  0243  1D03               	skipz
  1695  0244  2A40               	goto	u725
  1696  0245  0876               	movf	??_LCD_putc,w
  1697  0246  390F               	andlw	15
  1698  0247  2164               	fcall	_LCD_Out
  1699                           
  1700                           ;lcd.c: 124:     *(lcd.PORT) |= 1 << lcd.EN;
  1701  0248  3001               	movlw	1
  1702  0249  00F6               	movwf	??_LCD_putc
  1703  024A  1283               	bcf	3,5	;RP0=0, select bank0
  1704  024B  1303               	bcf	3,6	;RP1=0, select bank0
  1705  024C  0C5A               	rrf	_lcd+2,w
  1706  024D  00F7               	movwf	??_LCD_putc+1
  1707  024E  0CF7               	rrf	??_LCD_putc+1,f
  1708  024F  0C77               	rrf	??_LCD_putc+1,w
  1709  0250  3907               	andlw	7
  1710  0251  3E01               	addlw	1
  1711  0252  2A55               	goto	u734
  1712  0253                     u735:	
  1713  0253  1003               	clrc
  1714  0254  0DF6               	rlf	??_LCD_putc,f
  1715  0255                     u734:	
  1716  0255  3EFF               	addlw	-1
  1717  0256  1D03               	skipz
  1718  0257  2A53               	goto	u735
  1719  0258  0876               	movf	??_LCD_putc,w
  1720  0259  00F8               	movwf	??_LCD_putc+2
  1721  025A  0858               	movf	_lcd,w
  1722  025B  0084               	movwf	4
  1723  025C  1783               	bsf	3,7
  1724  025D  1C59               	btfss	_lcd+1,0
  1725  025E  1383               	bcf	3,7
  1726  025F  0878               	movf	??_LCD_putc+2,w
  1727  0260  0480               	iorwf	0,f
  1728                           
  1729                           ;lcd.c: 125:     _delay((unsigned long)((40)*(8000000/4000000.0)));
  1730  0261  301A               	movlw	26
  1731  0262  00F6               	movwf	??_LCD_putc
  1732  0263                     u1217:	
  1733  0263  0BF6               	decfsz	??_LCD_putc,f
  1734  0264  2A63               	goto	u1217
  1735  0265  0000               	nop
  1736                           
  1737                           ;lcd.c: 126:     *(lcd.PORT) &= ~(1 << lcd.EN);
  1738  0266  3001               	movlw	1
  1739  0267  00F6               	movwf	??_LCD_putc
  1740  0268  1283               	bcf	3,5	;RP0=0, select bank0
  1741  0269  1303               	bcf	3,6	;RP1=0, select bank0
  1742  026A  0C5A               	rrf	_lcd+2,w
  1743  026B  00F7               	movwf	??_LCD_putc+1
  1744  026C  0CF7               	rrf	??_LCD_putc+1,f
  1745  026D  0C77               	rrf	??_LCD_putc+1,w
  1746  026E  3907               	andlw	7
  1747  026F  3E01               	addlw	1
  1748  0270  2A73               	goto	u744
  1749  0271                     u745:	
  1750  0271  1003               	clrc
  1751  0272  0DF6               	rlf	??_LCD_putc,f
  1752  0273                     u744:	
  1753  0273  3EFF               	addlw	-1
  1754  0274  1D03               	skipz
  1755  0275  2A71               	goto	u745
  1756  0276  0876               	movf	??_LCD_putc,w
  1757  0277  3AFF               	xorlw	255
  1758  0278  00F8               	movwf	??_LCD_putc+2
  1759  0279  0858               	movf	_lcd,w
  1760  027A  0084               	movwf	4
  1761  027B  1783               	bsf	3,7
  1762  027C  1C59               	btfss	_lcd+1,0
  1763  027D  1383               	bcf	3,7
  1764  027E  0878               	movf	??_LCD_putc+2,w
  1765  027F  0580               	andwf	0,f
  1766                           
  1767                           ;lcd.c: 128:     LCD_Out(c & 0x0F);
  1768  0280  0879               	movf	LCD_putc@c,w
  1769  0281  390F               	andlw	15
  1770  0282  2164               	fcall	_LCD_Out
  1771                           
  1772                           ;lcd.c: 130:     *(lcd.PORT) |= 1 << lcd.EN;
  1773  0283  3001               	movlw	1
  1774  0284  00F6               	movwf	??_LCD_putc
  1775  0285  1283               	bcf	3,5	;RP0=0, select bank0
  1776  0286  1303               	bcf	3,6	;RP1=0, select bank0
  1777  0287  0C5A               	rrf	_lcd+2,w
  1778  0288  00F7               	movwf	??_LCD_putc+1
  1779  0289  0CF7               	rrf	??_LCD_putc+1,f
  1780  028A  0C77               	rrf	??_LCD_putc+1,w
  1781  028B  3907               	andlw	7
  1782  028C  3E01               	addlw	1
  1783  028D  2A90               	goto	u754
  1784  028E                     u755:	
  1785  028E  1003               	clrc
  1786  028F  0DF6               	rlf	??_LCD_putc,f
  1787  0290                     u754:	
  1788  0290  3EFF               	addlw	-1
  1789  0291  1D03               	skipz
  1790  0292  2A8E               	goto	u755
  1791  0293  0876               	movf	??_LCD_putc,w
  1792  0294  00F8               	movwf	??_LCD_putc+2
  1793  0295  0858               	movf	_lcd,w
  1794  0296  0084               	movwf	4
  1795  0297  1783               	bsf	3,7
  1796  0298  1C59               	btfss	_lcd+1,0
  1797  0299  1383               	bcf	3,7
  1798  029A  0878               	movf	??_LCD_putc+2,w
  1799  029B  0480               	iorwf	0,f
  1800                           
  1801                           ;lcd.c: 131:     _delay((unsigned long)((40)*(8000000/4000000.0)));
  1802  029C  301A               	movlw	26
  1803  029D  00F6               	movwf	??_LCD_putc
  1804  029E                     u1227:	
  1805  029E  0BF6               	decfsz	??_LCD_putc,f
  1806  029F  2A9E               	goto	u1227
  1807  02A0  0000               	nop
  1808                           
  1809                           ;lcd.c: 132:     *(lcd.PORT) &= ~(1 << lcd.EN);
  1810  02A1  3001               	movlw	1
  1811  02A2  00F6               	movwf	??_LCD_putc
  1812  02A3  1283               	bcf	3,5	;RP0=0, select bank0
  1813  02A4  1303               	bcf	3,6	;RP1=0, select bank0
  1814  02A5  0C5A               	rrf	_lcd+2,w
  1815  02A6  00F7               	movwf	??_LCD_putc+1
  1816  02A7  0CF7               	rrf	??_LCD_putc+1,f
  1817  02A8  0C77               	rrf	??_LCD_putc+1,w
  1818  02A9  3907               	andlw	7
  1819  02AA  3E01               	addlw	1
  1820  02AB  2AAE               	goto	u764
  1821  02AC                     u765:	
  1822  02AC  1003               	clrc
  1823  02AD  0DF6               	rlf	??_LCD_putc,f
  1824  02AE                     u764:	
  1825  02AE  3EFF               	addlw	-1
  1826  02AF  1D03               	skipz
  1827  02B0  2AAC               	goto	u765
  1828  02B1  0876               	movf	??_LCD_putc,w
  1829  02B2  3AFF               	xorlw	255
  1830  02B3  00F8               	movwf	??_LCD_putc+2
  1831  02B4  0858               	movf	_lcd,w
  1832  02B5  0084               	movwf	4
  1833  02B6  1783               	bsf	3,7
  1834  02B7  1C59               	btfss	_lcd+1,0
  1835  02B8  1383               	bcf	3,7
  1836  02B9  0878               	movf	??_LCD_putc+2,w
  1837  02BA  0580               	andwf	0,f
  1838  02BB  0008               	return
  1839  02BC                     __end_of_LCD_putc:	
  1840                           
  1841                           	psect	text8
  1842  02BC                     __ptext8:	
  1843 ;; *************** function _LCD_Init *****************
  1844 ;; Defined at:
  1845 ;;		line 61 in file "lcd.c"
  1846 ;; Parameters:    Size  Location     Type
  1847 ;;  display         5    0[BANK0 ] struct .
  1848 ;; Auto vars:     Size  Location     Type
  1849 ;;  cmd             1    7[BANK0 ] unsigned char 
  1850 ;; Return value:  Size  Location     Type
  1851 ;;                  1    wreg      _Bool 
  1852 ;; Registers used:
  1853 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1854 ;; Tracked objects:
  1855 ;;		On entry : 0/0
  1856 ;;		On exit  : 0/0
  1857 ;;		Unchanged: 0/0
  1858 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1859 ;;      Params:         0       5       0       0
  1860 ;;      Locals:         0       1       0       0
  1861 ;;      Temps:          0       2       0       0
  1862 ;;      Totals:         0       8       0       0
  1863 ;;Total ram usage:        8 bytes
  1864 ;; Hardware stack levels used:    1
  1865 ;; Hardware stack levels required when called:    3
  1866 ;; This function calls:
  1867 ;;		_LCD_Write
  1868 ;; This function is called by:
  1869 ;;		_main
  1870 ;; This function uses a non-reentrant model
  1871 ;;
  1872                           
  1873                           
  1874                           ;psect for function _LCD_Init
  1875  02BC                     _LCD_Init:	
  1876                           
  1877                           ;lcd.c: 63:     lcd = display;
  1878                           
  1879                           ;incstack = 0
  1880                           ; Regs used in _LCD_Init: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1881  02BC  3058               	movlw	_lcd& (0+255)
  1882  02BD  0084               	movwf	4
  1883  02BE  1283               	bcf	3,5	;RP0=0, select bank0
  1884  02BF  1303               	bcf	3,6	;RP1=0, select bank0
  1885  02C0  0841               	movf	LCD_Init@display,w
  1886  02C1  1383               	bcf	3,7	;select IRP bank0
  1887  02C2  0080               	movwf	0
  1888  02C3  0A84               	incf	4,f
  1889  02C4  0842               	movf	LCD_Init@display+1,w
  1890  02C5  0080               	movwf	0
  1891  02C6  0A84               	incf	4,f
  1892  02C7  0843               	movf	LCD_Init@display+2,w
  1893  02C8  0080               	movwf	0
  1894  02C9  0A84               	incf	4,f
  1895  02CA  0844               	movf	LCD_Init@display+3,w
  1896  02CB  0080               	movwf	0
  1897  02CC  0A84               	incf	4,f
  1898  02CD  0845               	movf	LCD_Init@display+4,w
  1899  02CE  0080               	movwf	0
  1900                           
  1901                           ;lcd.c: 72:     if ( lcd.PORT == &PORTA ) {
  1902  02CF  3000               	movlw	0
  1903  02D0  0659               	xorwf	_lcd+1,w
  1904  02D1  1D03               	skipz
  1905  02D2  2AD5               	goto	u1105
  1906  02D3  3005               	movlw	5
  1907  02D4  0658               	xorwf	_lcd,w
  1908  02D5                     u1105:	
  1909  02D5  1D03               	skipz
  1910  02D6  2ADB               	goto	l1577
  1911                           
  1912                           ;lcd.c: 73:         TRISA = 0x00;
  1913  02D7  1683               	bsf	3,5	;RP0=1, select bank1
  1914  02D8  1303               	bcf	3,6	;RP1=0, select bank1
  1915  02D9  0185               	clrf	5	;volatile
  1916                           
  1917                           ;lcd.c: 74:     }
  1918  02DA  2AEE               	goto	l1585
  1919  02DB                     l1577:	
  1920  02DB  3000               	movlw	0
  1921  02DC  0659               	xorwf	_lcd+1,w
  1922  02DD  1D03               	skipz
  1923  02DE  2AE1               	goto	u1115
  1924  02DF  3006               	movlw	6
  1925  02E0  0658               	xorwf	_lcd,w
  1926  02E1                     u1115:	
  1927  02E1  1903               	btfsc	3,2
  1928  02E2  2AEB               	goto	l1579
  1929                           
  1930                           ;lcd.c: 77:     }
  1931  02E3  3000               	movlw	0
  1932  02E4  0659               	xorwf	_lcd+1,w
  1933  02E5  1D03               	skipz
  1934  02E6  2AE9               	goto	u1125
  1935  02E7  3006               	movlw	6
  1936  02E8  0658               	xorwf	_lcd,w
  1937  02E9                     u1125:	
  1938  02E9  1D03               	skipz
  1939  02EA  0008               	return
  1940  02EB                     l1579:	
  1941                           
  1942                           ;lcd.c: 76:         TRISB = 0x00;
  1943  02EB  1683               	bsf	3,5	;RP0=1, select bank1
  1944  02EC  1303               	bcf	3,6	;RP1=0, select bank1
  1945  02ED  0186               	clrf	6	;volatile
  1946  02EE                     l1585:	
  1947                           
  1948                           ;lcd.c: 94:     _delay((unsigned long)((20)*(8000000/4000.0)));
  1949  02EE  3034               	movlw	52
  1950  02EF  1283               	bcf	3,5	;RP0=0, select bank0
  1951  02F0  1303               	bcf	3,6	;RP1=0, select bank0
  1952  02F1  00C7               	movwf	??_LCD_Init+1
  1953  02F2  30F1               	movlw	241
  1954  02F3  00C6               	movwf	??_LCD_Init
  1955  02F4                     u1237:	
  1956  02F4  0BC6               	decfsz	??_LCD_Init,f
  1957  02F5  2AF4               	goto	u1237
  1958  02F6  0BC7               	decfsz	??_LCD_Init+1,f
  1959  02F7  2AF4               	goto	u1237
  1960  02F8  0000               	nop
  1961                           
  1962                           ;lcd.c: 97:     LCD_Write(0x03);
  1963  02F9  3003               	movlw	3
  1964  02FA  233B               	fcall	_LCD_Write
  1965                           
  1966                           ;lcd.c: 98:     _delay((unsigned long)((5)*(8000000/4000.0)));
  1967  02FB  300D               	movlw	13
  1968  02FC  1283               	bcf	3,5	;RP0=0, select bank0
  1969  02FD  1303               	bcf	3,6	;RP1=0, select bank0
  1970  02FE  00C7               	movwf	??_LCD_Init+1
  1971  02FF  30FB               	movlw	251
  1972  0300  00C6               	movwf	??_LCD_Init
  1973  0301                     u1247:	
  1974  0301  0BC6               	decfsz	??_LCD_Init,f
  1975  0302  2B01               	goto	u1247
  1976  0303  0BC7               	decfsz	??_LCD_Init+1,f
  1977  0304  2B01               	goto	u1247
  1978  0305  0000               	nop
  1979                           
  1980                           ;lcd.c: 99:     LCD_Write(0x03);
  1981  0306  3003               	movlw	3
  1982  0307  233B               	fcall	_LCD_Write
  1983                           
  1984                           ;lcd.c: 100:     _delay((unsigned long)((16)*(8000000/4000.0)));
  1985  0308  302A               	movlw	42
  1986  0309  1283               	bcf	3,5	;RP0=0, select bank0
  1987  030A  1303               	bcf	3,6	;RP1=0, select bank0
  1988  030B  00C7               	movwf	??_LCD_Init+1
  1989  030C  308D               	movlw	141
  1990  030D  00C6               	movwf	??_LCD_Init
  1991  030E                     u1257:	
  1992  030E  0BC6               	decfsz	??_LCD_Init,f
  1993  030F  2B0E               	goto	u1257
  1994  0310  0BC7               	decfsz	??_LCD_Init+1,f
  1995  0311  2B0E               	goto	u1257
  1996  0312  0000               	nop
  1997                           
  1998                           ;lcd.c: 101:     LCD_Write(0x03);
  1999  0313  3003               	movlw	3
  2000  0314  233B               	fcall	_LCD_Write
  2001                           
  2002                           ;lcd.c: 104:     LCD_Write(0x02);
  2003  0315  3002               	movlw	2
  2004  0316  233B               	fcall	_LCD_Write
  2005  0317  3002               	movlw	2
  2006  0318  233B               	fcall	_LCD_Write
  2007  0319  3008               	movlw	8
  2008  031A  233B               	fcall	_LCD_Write
  2009  031B  3000               	movlw	0
  2010  031C  233B               	fcall	_LCD_Write
  2011  031D  3006               	movlw	6
  2012  031E  233B               	fcall	_LCD_Write
  2013  031F  3008               	movlw	8
  2014  0320  1283               	bcf	3,5	;RP0=0, select bank0
  2015  0321  1303               	bcf	3,6	;RP1=0, select bank0
  2016  0322  00C6               	movwf	??_LCD_Init
  2017  0323  0846               	movf	??_LCD_Init,w
  2018  0324  00C8               	movwf	LCD_Init@cmd
  2019  0325  1548               	bsf	LCD_Init@cmd,2
  2020  0326  0848               	movf	LCD_Init@cmd,w
  2021  0327  00C6               	movwf	??_LCD_Init
  2022  0328  3004               	movlw	4
  2023  0329                     u1135:	
  2024  0329  1003               	clrc
  2025  032A  0CC6               	rrf	??_LCD_Init,f
  2026  032B  3EFF               	addlw	-1
  2027  032C  1D03               	skipz
  2028  032D  2B29               	goto	u1135
  2029  032E  0846               	movf	??_LCD_Init,w
  2030  032F  390F               	andlw	15
  2031  0330  233B               	fcall	_LCD_Write
  2032  0331  1283               	bcf	3,5	;RP0=0, select bank0
  2033  0332  1303               	bcf	3,6	;RP1=0, select bank0
  2034  0333  0848               	movf	LCD_Init@cmd,w
  2035  0334  390F               	andlw	15
  2036  0335  233B               	fcall	_LCD_Write
  2037                           
  2038                           ;lcd.c: 114:     do { LCD_Write( (0x01 & 0xF0) >> 4 ); LCD_Write( 0x01 & 0x0F); } while 
      +                          ( 0 );
  2039  0336  3000               	movlw	0
  2040  0337  233B               	fcall	_LCD_Write
  2041  0338  3001               	movlw	1
  2042  0339  233B               	fcall	_LCD_Write
  2043  033A  0008               	return
  2044  033B                     __end_of_LCD_Init:	
  2045                           
  2046                           	psect	text9
  2047  033B                     __ptext9:	
  2048 ;; *************** function _LCD_Write *****************
  2049 ;; Defined at:
  2050 ;;		line 50 in file "lcd.c"
  2051 ;; Parameters:    Size  Location     Type
  2052 ;;  c               1    wreg     unsigned char 
  2053 ;; Auto vars:     Size  Location     Type
  2054 ;;  c               1    9[COMMON] unsigned char 
  2055 ;; Return value:  Size  Location     Type
  2056 ;;                  1    wreg      void 
  2057 ;; Registers used:
  2058 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2059 ;; Tracked objects:
  2060 ;;		On entry : 0/0
  2061 ;;		On exit  : 0/0
  2062 ;;		Unchanged: 0/0
  2063 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2064 ;;      Params:         0       0       0       0
  2065 ;;      Locals:         1       0       0       0
  2066 ;;      Temps:          3       0       0       0
  2067 ;;      Totals:         4       0       0       0
  2068 ;;Total ram usage:        4 bytes
  2069 ;; Hardware stack levels used:    1
  2070 ;; Hardware stack levels required when called:    2
  2071 ;; This function calls:
  2072 ;;		_LCD_Out
  2073 ;; This function is called by:
  2074 ;;		_main
  2075 ;;		_LCD_Init
  2076 ;; This function uses a non-reentrant model
  2077 ;;
  2078                           
  2079                           
  2080                           ;psect for function _LCD_Write
  2081  033B                     _LCD_Write:	
  2082                           
  2083                           ;incstack = 0
  2084                           ; Regs used in _LCD_Write: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2085                           ;LCD_Write@c stored from wreg
  2086  033B  00F9               	movwf	LCD_Write@c
  2087                           
  2088                           ;lcd.c: 52:     *(lcd.PORT) &= ~(1 << lcd.RS);
  2089  033C  3001               	movlw	1
  2090  033D  00F6               	movwf	??_LCD_Write
  2091  033E  1283               	bcf	3,5	;RP0=0, select bank0
  2092  033F  1303               	bcf	3,6	;RP1=0, select bank0
  2093  0340  085A               	movf	_lcd+2,w
  2094  0341  3907               	andlw	7
  2095  0342  3E01               	addlw	1
  2096  0343  2B46               	goto	u684
  2097  0344                     u685:	
  2098  0344  1003               	clrc
  2099  0345  0DF6               	rlf	??_LCD_Write,f
  2100  0346                     u684:	
  2101  0346  3EFF               	addlw	-1
  2102  0347  1D03               	skipz
  2103  0348  2B44               	goto	u685
  2104  0349  0876               	movf	??_LCD_Write,w
  2105  034A  3AFF               	xorlw	255
  2106  034B  00F7               	movwf	??_LCD_Write+1
  2107  034C  0858               	movf	_lcd,w
  2108  034D  0084               	movwf	4
  2109  034E  1783               	bsf	3,7
  2110  034F  1C59               	btfss	_lcd+1,0
  2111  0350  1383               	bcf	3,7
  2112  0351  0877               	movf	??_LCD_Write+1,w
  2113  0352  0580               	andwf	0,f
  2114                           
  2115                           ;lcd.c: 53:     LCD_Out(c);
  2116  0353  0879               	movf	LCD_Write@c,w
  2117  0354  2164               	fcall	_LCD_Out
  2118                           
  2119                           ;lcd.c: 55:     *(lcd.PORT) |= 1 << lcd.EN;
  2120  0355  3001               	movlw	1
  2121  0356  00F6               	movwf	??_LCD_Write
  2122  0357  1283               	bcf	3,5	;RP0=0, select bank0
  2123  0358  1303               	bcf	3,6	;RP1=0, select bank0
  2124  0359  0C5A               	rrf	_lcd+2,w
  2125  035A  00F7               	movwf	??_LCD_Write+1
  2126  035B  0CF7               	rrf	??_LCD_Write+1,f
  2127  035C  0C77               	rrf	??_LCD_Write+1,w
  2128  035D  3907               	andlw	7
  2129  035E  3E01               	addlw	1
  2130  035F  2B62               	goto	u694
  2131  0360                     u695:	
  2132  0360  1003               	clrc
  2133  0361  0DF6               	rlf	??_LCD_Write,f
  2134  0362                     u694:	
  2135  0362  3EFF               	addlw	-1
  2136  0363  1D03               	skipz
  2137  0364  2B60               	goto	u695
  2138  0365  0876               	movf	??_LCD_Write,w
  2139  0366  00F8               	movwf	??_LCD_Write+2
  2140  0367  0858               	movf	_lcd,w
  2141  0368  0084               	movwf	4
  2142  0369  1783               	bsf	3,7
  2143  036A  1C59               	btfss	_lcd+1,0
  2144  036B  1383               	bcf	3,7
  2145  036C  0878               	movf	??_LCD_Write+2,w
  2146  036D  0480               	iorwf	0,f
  2147                           
  2148                           ;lcd.c: 56:     _delay((unsigned long)((4)*(8000000/4000.0)));
  2149  036E  300B               	movlw	11
  2150  036F  00F7               	movwf	??_LCD_Write+1
  2151  0370  3062               	movlw	98
  2152  0371  00F6               	movwf	??_LCD_Write
  2153  0372                     u1267:	
  2154  0372  0BF6               	decfsz	??_LCD_Write,f
  2155  0373  2B72               	goto	u1267
  2156  0374  0BF7               	decfsz	??_LCD_Write+1,f
  2157  0375  2B72               	goto	u1267
  2158  0376  0000               	nop
  2159                           
  2160                           ;lcd.c: 57:     *(lcd.PORT) &= ~(1 << lcd.EN);
  2161  0377  3001               	movlw	1
  2162  0378  00F6               	movwf	??_LCD_Write
  2163  0379  1283               	bcf	3,5	;RP0=0, select bank0
  2164  037A  1303               	bcf	3,6	;RP1=0, select bank0
  2165  037B  0C5A               	rrf	_lcd+2,w
  2166  037C  00F7               	movwf	??_LCD_Write+1
  2167  037D  0CF7               	rrf	??_LCD_Write+1,f
  2168  037E  0C77               	rrf	??_LCD_Write+1,w
  2169  037F  3907               	andlw	7
  2170  0380  3E01               	addlw	1
  2171  0381  2B84               	goto	u704
  2172  0382                     u705:	
  2173  0382  1003               	clrc
  2174  0383  0DF6               	rlf	??_LCD_Write,f
  2175  0384                     u704:	
  2176  0384  3EFF               	addlw	-1
  2177  0385  1D03               	skipz
  2178  0386  2B82               	goto	u705
  2179  0387  0876               	movf	??_LCD_Write,w
  2180  0388  3AFF               	xorlw	255
  2181  0389  00F8               	movwf	??_LCD_Write+2
  2182  038A  0858               	movf	_lcd,w
  2183  038B  0084               	movwf	4
  2184  038C  1783               	bsf	3,7
  2185  038D  1C59               	btfss	_lcd+1,0
  2186  038E  1383               	bcf	3,7
  2187  038F  0878               	movf	??_LCD_Write+2,w
  2188  0390  0580               	andwf	0,f
  2189  0391  0008               	return
  2190  0392                     __end_of_LCD_Write:	
  2191                           
  2192                           	psect	text10
  2193  0164                     __ptext10:	
  2194 ;; *************** function _LCD_Out *****************
  2195 ;; Defined at:
  2196 ;;		line 18 in file "lcd.c"
  2197 ;; Parameters:    Size  Location     Type
  2198 ;;  c               1    wreg     unsigned char 
  2199 ;; Auto vars:     Size  Location     Type
  2200 ;;  c               1    5[COMMON] unsigned char 
  2201 ;; Return value:  Size  Location     Type
  2202 ;;                  1    wreg      void 
  2203 ;; Registers used:
  2204 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2205 ;; Tracked objects:
  2206 ;;		On entry : 0/0
  2207 ;;		On exit  : 0/0
  2208 ;;		Unchanged: 0/0
  2209 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2210 ;;      Params:         0       0       0       0
  2211 ;;      Locals:         1       0       0       0
  2212 ;;      Temps:          3       0       0       0
  2213 ;;      Totals:         4       0       0       0
  2214 ;;Total ram usage:        4 bytes
  2215 ;; Hardware stack levels used:    1
  2216 ;; Hardware stack levels required when called:    1
  2217 ;; This function calls:
  2218 ;;		Nothing
  2219 ;; This function is called by:
  2220 ;;		_LCD_Write
  2221 ;;		_LCD_putc
  2222 ;; This function uses a non-reentrant model
  2223 ;;
  2224                           
  2225                           
  2226                           ;psect for function _LCD_Out
  2227  0164                     _LCD_Out:	
  2228                           
  2229                           ;incstack = 0
  2230                           ; Regs used in _LCD_Out: [wreg-fsr0h+status,2+status,0]
  2231                           ;LCD_Out@c stored from wreg
  2232  0164  00F5               	movwf	LCD_Out@c
  2233                           
  2234                           ;lcd.c: 20:     if ( c & 1 ){
  2235  0165  1C75               	btfss	LCD_Out@c,0
  2236  0166  297E               	goto	l1237
  2237                           
  2238                           ;lcd.c: 21:         *(lcd.PORT) |= 1 << lcd.D4;
  2239  0167  3001               	movlw	1
  2240  0168  00F2               	movwf	??_LCD_Out
  2241  0169  1283               	bcf	3,5	;RP0=0, select bank0
  2242  016A  1303               	bcf	3,6	;RP1=0, select bank0
  2243  016B  085B               	movf	_lcd+3,w
  2244  016C  3907               	andlw	7
  2245  016D  3E01               	addlw	1
  2246  016E  2971               	goto	u574
  2247  016F                     u575:	
  2248  016F  1003               	clrc
  2249  0170  0DF2               	rlf	??_LCD_Out,f
  2250  0171                     u574:	
  2251  0171  3EFF               	addlw	-1
  2252  0172  1D03               	skipz
  2253  0173  296F               	goto	u575
  2254  0174  0872               	movf	??_LCD_Out,w
  2255  0175  00F3               	movwf	??_LCD_Out+1
  2256  0176  0858               	movf	_lcd,w
  2257  0177  0084               	movwf	4
  2258  0178  1783               	bsf	3,7
  2259  0179  1C59               	btfss	_lcd+1,0
  2260  017A  1383               	bcf	3,7
  2261  017B  0873               	movf	??_LCD_Out+1,w
  2262  017C  0480               	iorwf	0,f
  2263                           
  2264                           ;lcd.c: 22:     }
  2265  017D  2995               	goto	l1239
  2266  017E                     l1237:	
  2267                           
  2268                           ;lcd.c: 24:          *(lcd.PORT) &= ~(1 << lcd.D4);
  2269  017E  3001               	movlw	1
  2270  017F  00F2               	movwf	??_LCD_Out
  2271  0180  1283               	bcf	3,5	;RP0=0, select bank0
  2272  0181  1303               	bcf	3,6	;RP1=0, select bank0
  2273  0182  085B               	movf	_lcd+3,w
  2274  0183  3907               	andlw	7
  2275  0184  3E01               	addlw	1
  2276  0185  2988               	goto	u584
  2277  0186                     u585:	
  2278  0186  1003               	clrc
  2279  0187  0DF2               	rlf	??_LCD_Out,f
  2280  0188                     u584:	
  2281  0188  3EFF               	addlw	-1
  2282  0189  1D03               	skipz
  2283  018A  2986               	goto	u585
  2284  018B  0872               	movf	??_LCD_Out,w
  2285  018C  3AFF               	xorlw	255
  2286  018D  00F3               	movwf	??_LCD_Out+1
  2287  018E  0858               	movf	_lcd,w
  2288  018F  0084               	movwf	4
  2289  0190  1783               	bsf	3,7
  2290  0191  1C59               	btfss	_lcd+1,0
  2291  0192  1383               	bcf	3,7
  2292  0193  0873               	movf	??_LCD_Out+1,w
  2293  0194  0580               	andwf	0,f
  2294  0195                     l1239:	
  2295                           
  2296                           ;lcd.c: 27:     if ( c & 2 ) {
  2297  0195  1CF5               	btfss	LCD_Out@c,1
  2298  0196  29AF               	goto	l1243
  2299                           
  2300                           ;lcd.c: 28:         *(lcd.PORT) |= 1 << lcd.D5;
  2301  0197  3001               	movlw	1
  2302  0198  00F2               	movwf	??_LCD_Out
  2303  0199  0C5B               	rrf	_lcd+3,w
  2304  019A  00F3               	movwf	??_LCD_Out+1
  2305  019B  0CF3               	rrf	??_LCD_Out+1,f
  2306  019C  0C73               	rrf	??_LCD_Out+1,w
  2307  019D  3907               	andlw	7
  2308  019E  3E01               	addlw	1
  2309  019F  29A2               	goto	u604
  2310  01A0                     u605:	
  2311  01A0  1003               	clrc
  2312  01A1  0DF2               	rlf	??_LCD_Out,f
  2313  01A2                     u604:	
  2314  01A2  3EFF               	addlw	-1
  2315  01A3  1D03               	skipz
  2316  01A4  29A0               	goto	u605
  2317  01A5  0872               	movf	??_LCD_Out,w
  2318  01A6  00F4               	movwf	??_LCD_Out+2
  2319  01A7  0858               	movf	_lcd,w
  2320  01A8  0084               	movwf	4
  2321  01A9  1783               	bsf	3,7
  2322  01AA  1C59               	btfss	_lcd+1,0
  2323  01AB  1383               	bcf	3,7
  2324  01AC  0874               	movf	??_LCD_Out+2,w
  2325  01AD  0480               	iorwf	0,f
  2326                           
  2327                           ;lcd.c: 29:     }
  2328  01AE  29C7               	goto	l1245
  2329  01AF                     l1243:	
  2330                           
  2331                           ;lcd.c: 31:         *(lcd.PORT) &= ~(1 << lcd.D5);
  2332  01AF  3001               	movlw	1
  2333  01B0  00F2               	movwf	??_LCD_Out
  2334  01B1  0C5B               	rrf	_lcd+3,w
  2335  01B2  00F3               	movwf	??_LCD_Out+1
  2336  01B3  0CF3               	rrf	??_LCD_Out+1,f
  2337  01B4  0C73               	rrf	??_LCD_Out+1,w
  2338  01B5  3907               	andlw	7
  2339  01B6  3E01               	addlw	1
  2340  01B7  29BA               	goto	u614
  2341  01B8                     u615:	
  2342  01B8  1003               	clrc
  2343  01B9  0DF2               	rlf	??_LCD_Out,f
  2344  01BA                     u614:	
  2345  01BA  3EFF               	addlw	-1
  2346  01BB  1D03               	skipz
  2347  01BC  29B8               	goto	u615
  2348  01BD  0872               	movf	??_LCD_Out,w
  2349  01BE  3AFF               	xorlw	255
  2350  01BF  00F4               	movwf	??_LCD_Out+2
  2351  01C0  0858               	movf	_lcd,w
  2352  01C1  0084               	movwf	4
  2353  01C2  1783               	bsf	3,7
  2354  01C3  1C59               	btfss	_lcd+1,0
  2355  01C4  1383               	bcf	3,7
  2356  01C5  0874               	movf	??_LCD_Out+2,w
  2357  01C6  0580               	andwf	0,f
  2358  01C7                     l1245:	
  2359                           
  2360                           ;lcd.c: 34:     if ( c & 4 ) {
  2361  01C7  1D75               	btfss	LCD_Out@c,2
  2362  01C8  29DE               	goto	l1249
  2363                           
  2364                           ;lcd.c: 35:         *(lcd.PORT) |= 1 << lcd.D6;
  2365  01C9  3001               	movlw	1
  2366  01CA  00F2               	movwf	??_LCD_Out
  2367  01CB  085C               	movf	_lcd+4,w
  2368  01CC  3907               	andlw	7
  2369  01CD  3E01               	addlw	1
  2370  01CE  29D1               	goto	u634
  2371  01CF                     u635:	
  2372  01CF  1003               	clrc
  2373  01D0  0DF2               	rlf	??_LCD_Out,f
  2374  01D1                     u634:	
  2375  01D1  3EFF               	addlw	-1
  2376  01D2  1D03               	skipz
  2377  01D3  29CF               	goto	u635
  2378  01D4  0872               	movf	??_LCD_Out,w
  2379  01D5  00F3               	movwf	??_LCD_Out+1
  2380  01D6  0858               	movf	_lcd,w
  2381  01D7  0084               	movwf	4
  2382  01D8  1783               	bsf	3,7
  2383  01D9  1C59               	btfss	_lcd+1,0
  2384  01DA  1383               	bcf	3,7
  2385  01DB  0873               	movf	??_LCD_Out+1,w
  2386  01DC  0480               	iorwf	0,f
  2387                           
  2388                           ;lcd.c: 36:     }
  2389  01DD  29F3               	goto	l1251
  2390  01DE                     l1249:	
  2391                           
  2392                           ;lcd.c: 38:         *(lcd.PORT) &= ~(1 << lcd.D6);
  2393  01DE  3001               	movlw	1
  2394  01DF  00F2               	movwf	??_LCD_Out
  2395  01E0  085C               	movf	_lcd+4,w
  2396  01E1  3907               	andlw	7
  2397  01E2  3E01               	addlw	1
  2398  01E3  29E6               	goto	u644
  2399  01E4                     u645:	
  2400  01E4  1003               	clrc
  2401  01E5  0DF2               	rlf	??_LCD_Out,f
  2402  01E6                     u644:	
  2403  01E6  3EFF               	addlw	-1
  2404  01E7  1D03               	skipz
  2405  01E8  29E4               	goto	u645
  2406  01E9  0872               	movf	??_LCD_Out,w
  2407  01EA  3AFF               	xorlw	255
  2408  01EB  00F3               	movwf	??_LCD_Out+1
  2409  01EC  0858               	movf	_lcd,w
  2410  01ED  0084               	movwf	4
  2411  01EE  1783               	bsf	3,7
  2412  01EF  1C59               	btfss	_lcd+1,0
  2413  01F0  1383               	bcf	3,7
  2414  01F1  0873               	movf	??_LCD_Out+1,w
  2415  01F2  0580               	andwf	0,f
  2416  01F3                     l1251:	
  2417                           
  2418                           ;lcd.c: 41:     if ( c & 8 ) {
  2419  01F3  1DF5               	btfss	LCD_Out@c,3
  2420  01F4  2A0D               	goto	l1255
  2421                           
  2422                           ;lcd.c: 42:          *(lcd.PORT) |= 1 << lcd.D7;
  2423  01F5  3001               	movlw	1
  2424  01F6  00F2               	movwf	??_LCD_Out
  2425  01F7  0C5C               	rrf	_lcd+4,w
  2426  01F8  00F3               	movwf	??_LCD_Out+1
  2427  01F9  0CF3               	rrf	??_LCD_Out+1,f
  2428  01FA  0C73               	rrf	??_LCD_Out+1,w
  2429  01FB  3907               	andlw	7
  2430  01FC  3E01               	addlw	1
  2431  01FD  2A00               	goto	u664
  2432  01FE                     u665:	
  2433  01FE  1003               	clrc
  2434  01FF  0DF2               	rlf	??_LCD_Out,f
  2435  0200                     u664:	
  2436  0200  3EFF               	addlw	-1
  2437  0201  1D03               	skipz
  2438  0202  29FE               	goto	u665
  2439  0203  0872               	movf	??_LCD_Out,w
  2440  0204  00F4               	movwf	??_LCD_Out+2
  2441  0205  0858               	movf	_lcd,w
  2442  0206  0084               	movwf	4
  2443  0207  1783               	bsf	3,7
  2444  0208  1C59               	btfss	_lcd+1,0
  2445  0209  1383               	bcf	3,7
  2446  020A  0874               	movf	??_LCD_Out+2,w
  2447  020B  0480               	iorwf	0,f
  2448                           
  2449                           ;lcd.c: 43:     }
  2450  020C  0008               	return
  2451  020D                     l1255:	
  2452                           
  2453                           ;lcd.c: 45:          *(lcd.PORT) &= ~(1 << lcd.D7);
  2454  020D  3001               	movlw	1
  2455  020E  00F2               	movwf	??_LCD_Out
  2456  020F  0C5C               	rrf	_lcd+4,w
  2457  0210  00F3               	movwf	??_LCD_Out+1
  2458  0211  0CF3               	rrf	??_LCD_Out+1,f
  2459  0212  0C73               	rrf	??_LCD_Out+1,w
  2460  0213  3907               	andlw	7
  2461  0214  3E01               	addlw	1
  2462  0215  2A18               	goto	u674
  2463  0216                     u675:	
  2464  0216  1003               	clrc
  2465  0217  0DF2               	rlf	??_LCD_Out,f
  2466  0218                     u674:	
  2467  0218  3EFF               	addlw	-1
  2468  0219  1D03               	skipz
  2469  021A  2A16               	goto	u675
  2470  021B  0872               	movf	??_LCD_Out,w
  2471  021C  3AFF               	xorlw	255
  2472  021D  00F4               	movwf	??_LCD_Out+2
  2473  021E  0858               	movf	_lcd,w
  2474  021F  0084               	movwf	4
  2475  0220  1783               	bsf	3,7
  2476  0221  1C59               	btfss	_lcd+1,0
  2477  0222  1383               	bcf	3,7
  2478  0223  0874               	movf	??_LCD_Out+2,w
  2479  0224  0580               	andwf	0,f
  2480  0225  0008               	return
  2481  0226                     __end_of_LCD_Out:	
  2482                           
  2483                           	psect	text11
  2484  0481                     __ptext11:	
  2485 ;; *************** function _CheckResponse *****************
  2486 ;; Defined at:
  2487 ;;		line 129 in file "main.c"
  2488 ;; Parameters:    Size  Location     Type
  2489 ;;		None
  2490 ;; Auto vars:     Size  Location     Type
  2491 ;;		None
  2492 ;; Return value:  Size  Location     Type
  2493 ;;                  2    2[COMMON] unsigned short 
  2494 ;; Registers used:
  2495 ;;		wreg, status,2, status,0
  2496 ;; Tracked objects:
  2497 ;;		On entry : 0/0
  2498 ;;		On exit  : 0/0
  2499 ;;		Unchanged: 0/0
  2500 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2501 ;;      Params:         2       0       0       0
  2502 ;;      Locals:         0       0       0       0
  2503 ;;      Temps:          2       0       0       0
  2504 ;;      Totals:         4       0       0       0
  2505 ;;Total ram usage:        4 bytes
  2506 ;; Hardware stack levels used:    1
  2507 ;; Hardware stack levels required when called:    1
  2508 ;; This function calls:
  2509 ;;		Nothing
  2510 ;; This function is called by:
  2511 ;;		_main
  2512 ;; This function uses a non-reentrant model
  2513 ;;
  2514                           
  2515                           
  2516                           ;psect for function _CheckResponse
  2517  0481                     _CheckResponse:	
  2518                           
  2519                           ;main.c: 130:     TOUT = 0;
  2520                           
  2521                           ;incstack = 0
  2522                           ; Regs used in _CheckResponse: [wreg+status,2+status,0]
  2523  0481  01FA               	clrf	_TOUT
  2524  0482  01FB               	clrf	_TOUT+1
  2525                           
  2526                           ;main.c: 131:     TMR2 = 0;
  2527  0483  1283               	bcf	3,5	;RP0=0, select bank0
  2528  0484  1303               	bcf	3,6	;RP1=0, select bank0
  2529  0485  0191               	clrf	17	;volatile
  2530                           
  2531                           ;main.c: 132:     T2CONbits.TMR2ON = 1;
  2532  0486  1512               	bsf	18,2	;volatile
  2533  0487  2C8C               	goto	l220
  2534  0488                     l1349:	
  2535  0488  087A               	movf	_TOUT,w
  2536  0489  047B               	iorwf	_TOUT+1,w
  2537  048A  1D03               	btfss	3,2
  2538  048B  2C8E               	goto	l1351
  2539  048C                     l220:	
  2540                           ;main.c: 133:     while (!PORTAbits.RA2 & !TOUT);
  2541                           
  2542  048C  1D05               	btfss	5,2	;volatile
  2543  048D  2C88               	goto	l1349
  2544  048E                     l1351:	
  2545                           
  2546                           ;main.c: 134:     if (TOUT)
  2547  048E  087A               	movf	_TOUT,w
  2548  048F  047B               	iorwf	_TOUT+1,w
  2549  0490  1903               	btfsc	3,2
  2550  0491  2C95               	goto	l1359
  2551  0492                     l1353:	
  2552                           
  2553                           ;main.c: 135:         return 0;
  2554  0492  01F2               	clrf	?_CheckResponse
  2555  0493  01F3               	clrf	?_CheckResponse+1
  2556  0494  0008               	return
  2557  0495                     l1359:	
  2558                           
  2559                           ;main.c: 137:         TMR2 = 0;
  2560  0495  0191               	clrf	17	;volatile
  2561  0496                     l1361:	
  2562                           ;main.c: 138:         while (PORTAbits.RA2 & !TOUT);
  2563                           
  2564  0496  0C05               	rrf	5,w	;volatile
  2565  0497  00F4               	movwf	??_CheckResponse
  2566  0498  0C74               	rrf	??_CheckResponse,w
  2567  0499  3901               	andlw	1
  2568  049A  00F5               	movwf	??_CheckResponse+1
  2569  049B  087A               	movf	_TOUT,w
  2570  049C  047B               	iorwf	_TOUT+1,w
  2571  049D  1D03               	btfss	3,2
  2572  049E  2CA1               	goto	u850
  2573  049F  3001               	movlw	1
  2574  04A0  2CA2               	goto	u860
  2575  04A1                     u850:	
  2576  04A1  3000               	movlw	0
  2577  04A2                     u860:	
  2578  04A2  0575               	andwf	??_CheckResponse+1,w
  2579  04A3  1D03               	btfss	3,2
  2580  04A4  2C96               	goto	l1361
  2581                           
  2582                           ;main.c: 139:         if (TOUT)
  2583  04A5  087A               	movf	_TOUT,w
  2584  04A6  047B               	iorwf	_TOUT+1,w
  2585  04A7  1D03               	btfss	3,2
  2586  04A8  2C92               	goto	l1353
  2587                           
  2588                           ;main.c: 142:             T2CONbits.TMR2ON = 0;
  2589                           
  2590                           ;main.c: 141:         else {
  2591  04A9  1112               	bcf	18,2	;volatile
  2592                           
  2593                           ;main.c: 143:             return 1;
  2594  04AA  3001               	movlw	1
  2595  04AB  00F2               	movwf	?_CheckResponse
  2596  04AC  3000               	movlw	0
  2597  04AD  00F3               	movwf	?_CheckResponse+1
  2598  04AE  0008               	return
  2599  04AF                     __end_of_CheckResponse:	
  2600                           
  2601                           	psect	text12
  2602  0522                     __ptext12:	
  2603 ;; *************** function _tcInt *****************
  2604 ;; Defined at:
  2605 ;;		line 35 in file "main.c"
  2606 ;; Parameters:    Size  Location     Type
  2607 ;;		None
  2608 ;; Auto vars:     Size  Location     Type
  2609 ;;		None
  2610 ;; Return value:  Size  Location     Type
  2611 ;;                  1    wreg      void 
  2612 ;; Registers used:
  2613 ;;		wreg
  2614 ;; Tracked objects:
  2615 ;;		On entry : 0/0
  2616 ;;		On exit  : 0/0
  2617 ;;		Unchanged: 0/0
  2618 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2619 ;;      Params:         0       0       0       0
  2620 ;;      Locals:         0       0       0       0
  2621 ;;      Temps:          2       0       0       0
  2622 ;;      Totals:         2       0       0       0
  2623 ;;Total ram usage:        2 bytes
  2624 ;; Hardware stack levels used:    1
  2625 ;; This function calls:
  2626 ;;		Nothing
  2627 ;; This function is called by:
  2628 ;;		Interrupt level 1
  2629 ;; This function uses a non-reentrant model
  2630 ;;
  2631                           
  2632                           
  2633                           ;psect for function _tcInt
  2634  0522                     _tcInt:	
  2635                           
  2636                           ;main.c: 36:     if (PIR1bits.TMR2IF) {
  2637  0522  1283               	bcf	3,5	;RP0=0, select bank0
  2638  0523  1303               	bcf	3,6	;RP1=0, select bank0
  2639  0524  1C8C               	btfss	12,1	;volatile
  2640  0525  2D2C               	goto	i1l66
  2641                           
  2642                           ;main.c: 37:         TOUT = 1;
  2643  0526  3001               	movlw	1
  2644  0527  00FA               	movwf	_TOUT
  2645  0528  3000               	movlw	0
  2646  0529  00FB               	movwf	_TOUT+1
  2647                           
  2648                           ;main.c: 38:         T2CONbits.TMR2ON = 0;
  2649  052A  1112               	bcf	18,2	;volatile
  2650                           
  2651                           ;main.c: 39:         PIR1bits.TMR2IF = 0;
  2652  052B  108C               	bcf	12,1	;volatile
  2653  052C                     i1l66:	
  2654  052C  0871               	movf	??_tcInt+1,w
  2655  052D  008A               	movwf	10
  2656  052E  0E70               	swapf	??_tcInt^(0+4294967168),w
  2657  052F  0083               	movwf	3
  2658  0530  0EFE               	swapf	126,f
  2659  0531  0E7E               	swapf	126,w
  2660  0532  0009               	retfie
  2661  0533                     __end_of_tcInt:	
  2662  007E                     btemp	set	126	;btemp
  2663  007E                     wtemp0	set	126
  2664                           
  2665                           	psect	intentry
  2666  0004                     __pintentry:	
  2667                           ;incstack = 0
  2668                           ; Regs used in _tcInt: [wreg]
  2669                           
  2670  0004                     interrupt_function:	
  2671  007E                     saved_w	set	btemp
  2672  0004  00FE               	movwf	btemp
  2673  0005  0E03               	swapf	3,w
  2674  0006  00F0               	movwf	??_tcInt
  2675  0007  080A               	movf	10,w
  2676  0008  00F1               	movwf	??_tcInt+1
  2677  0009  2D22               	ljmp	_tcInt


Data Sizes:
    Strings     67
    Constant    0
    Data        33
    BSS         19
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     10      12
    BANK0            80     23      73
    BANK1            80      0       0
    BANK2            48      0       0

Pointer List with Targets:

    LCD_putrs@a	PTR const unsigned char  size(1) Largest target is 16
		 -> STR_5(CODE[13]), STR_4(CODE[16]), STR_3(CODE[14]), STR_2(CODE[13]), 
		 -> STR_1(CODE[11]), 

    LCD_puts@a	PTR unsigned char  size(1) Largest target is 14
		 -> message2(BANK0[14]), message1(BANK0[14]), 

    display.PORT	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTB(SFR0[1]), 

    lcd.PORT	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTB(SFR0[1]), 

    lcd.PORT	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTB(SFR0[1]), 

    S75$PORT	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTB(SFR0[1]), 

    F715.PORT	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTB(SFR0[1]), 


Critical Paths under _main in COMMON

    _main->_LCD_Write
    _main->___lwdiv
    _LCD_puts->_LCD_putc
    _LCD_putrs->_LCD_putc
    _LCD_putc->_LCD_Out
    _LCD_Init->_LCD_Write
    _LCD_Write->_LCD_Out

Critical Paths under _tcInt in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_LCD_Init

Critical Paths under _tcInt in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _tcInt in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _tcInt in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                15    15      0    2461
                                              8 BANK0     15    15      0
                      _CheckResponse
                           _LCD_Init
                          _LCD_Write
                          _LCD_putrs
                           _LCD_puts
                           _ReadByte
                        _StartSignal
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (1) ___lwmod                                              6     2      4     463
                                              2 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (1) ___lwdiv                                              8     4      4     770
                                              2 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (1) _StartSignal                                          2     2      0       0
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _ReadByte                                             9     7      2      24
                                              2 COMMON     7     5      2
 ---------------------------------------------------------------------------------
 (1) _LCD_puts                                             4     4      0     334
                                              0 BANK0      4     4      0
                           _LCD_putc
 ---------------------------------------------------------------------------------
 (1) _LCD_putrs                                            3     3      0     387
                                              0 BANK0      3     3      0
                           _LCD_putc
 ---------------------------------------------------------------------------------
 (2) _LCD_putc                                             4     4      0     132
                                              6 COMMON     4     4      0
                            _LCD_Out
 ---------------------------------------------------------------------------------
 (1) _LCD_Init                                             8     3      5     305
                                              0 BANK0      8     3      5
                          _LCD_Write
 ---------------------------------------------------------------------------------
 (1) _LCD_Write                                            4     4      0     110
                                              6 COMMON     4     4      0
                            _LCD_Out
 ---------------------------------------------------------------------------------
 (3) _LCD_Out                                              4     4      0      88
                                              2 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (1) _CheckResponse                                        4     2      2       0
                                              2 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _tcInt                                                2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _CheckResponse
   _LCD_Init
     _LCD_Write
       _LCD_Out
   _LCD_Write
     _LCD_Out
   _LCD_putrs
     _LCD_putc
       _LCD_Out
   _LCD_puts
     _LCD_putc
       _LCD_Out
   _ReadByte
   _StartSignal
   ___lwdiv
   ___lwmod

 _tcInt (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               30      0       0       9        0.0%
BITBANK2            30      0       0       8        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     17      49       3       91.3%
BITBANK0            50      0       0       5        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      A       C       1       85.7%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      55      10        0.0%
ABS                  0      0      55       4        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA              80      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Sat Jun 15 12:14:14 2019

                      _i 0065                        pc 0002                       fsr 0004  
                    l210 0420                      l220 048C                      l213 0424  
                    u604 01A2                      u605 01A0                      u614 01BA  
                    u615 01B8                      u704 0384                      u705 0382  
                    u634 01D1                      u714 0231                      u635 01CF  
                    u715 022F                      u644 01E6                      u645 01E4  
                    u725 0240                      u574 0171                      u734 0255  
                    u575 016F                      u735 0253                      u664 0200  
                    u584 0188                      u744 0273                      u665 01FE  
                    u585 0186                      u745 0271                      u850 04A1  
                    u674 0218                      u754 0290                      u675 0216  
                    u755 028E                      u860 04A2                      u684 0346  
                    u764 02AE                      u924 0437                      u685 0344  
                    u765 02AC                      u925 0434                      u694 0362  
                    u695 0360                      u965 03E6                      u985 03F2  
                    u995 03FE          LCD_Init@display 0041                      _lcd 0058  
                    fsr0 0004                      indf 0000          __end_of_LCD_Out 0226  
                   l1251 01F3                     l1243 01AF                     l1245 01C7  
                   l1237 017E                     l1351 048E                     l1255 020D  
                   l1239 0195                     l1335 050D                     l1361 0496  
                   l1353 0492                     l1249 01DE                     l1425 0407  
                   l1417 03E3                     l1441 0455                     l1419 03F1  
                   l1443 0463                     l1451 047C                     l1349 0488  
                   l1429 0412                     l1359 0495                     l1623 04D5  
                   l1391 043D                     l1447 0471                     l1585 02EE  
                   l1577 02DB                     l1673 0072                     l1665 00F3  
                   l1579 02EB                     l1693 007F                     STR_1 03D0  
                   STR_2 03B6                     STR_3 03A8                     STR_4 0398  
                   STR_5 03C3                     u1005 0408                     u1105 02D5  
                   u1115 02E1                     u1035 0458                     u1125 02E9  
                   u1135 0329                     u1207 0501                     u1055 0469  
                   u1217 0263                     u1065 0472                     u1227 029E  
                   u1237 02F4                     u1165 0155                     u1247 0301  
                   u1257 030E                     u1177 0066                     u1267 0372  
                   u1187 00FB                     u1197 04F8                     i1l66 052C  
                   _TMR2 0011                     _TOUT 007A                     _main 001D  
                   btemp 007E                     start 000A       __size_of_LCD_Write 0057  
            LCD_Init@cmd 0048       __size_of_LCD_putrs 001A         __end_of_LCD_Init 033B  
       __end_of_LCD_putc 02BC         __end_of_LCD_puts 04EE                    ?_main 0070  
                  _CMCON 001F                    _T2CON 0012          __end_of___lwdiv 0417  
        __end_of___lwmod 0481                    _PORTA 0005                    _PORTB 0006  
                  _TRISA 0085                    _TRISB 0086                    _tcInt 0522  
            ReadByte@num 0077                    pclath 000A                    status 0003  
                  wtemp0 007E          __initialization 000B             __end_of_main 0164  
       __end_of_ReadByte 044F                   ??_main 0049                ??_LCD_Out 0072  
      __end_of_LCD_Write 0392        __end_of_LCD_putrs 0522                   ?_tcInt 0070  
              ??___lwdiv 0076                ??___lwmod 0076   __size_of_CheckResponse 002E  
                 saved_w 007E  __end_of__initialization 001B                ?_LCD_Init 0041  
              ?_LCD_putc 0070                ?_LCD_puts 0070           __pcstackCOMMON 0070  
           __pidataBANK0 04AF            ??_StartSignal 0072            __end_of_tcInt 0533  
              LCD_putc@c 0079                LCD_puts@a 0044                LCD_puts@i 0042  
                ??_tcInt 0070               __pbssBANK0 0058                ?_ReadByte 0072  
             ??_LCD_Init 0046            _CheckResponse 0481               ??_LCD_putc 0076  
             ??_LCD_puts 0041               __pmaintext 001D               __pintentry 0004  
    __end_of_StartSignal 0508                  _LCD_Out 0164               __stringtab 0392  
             ??_ReadByte 0074           ?_CheckResponse 0072                  _T_Byte1 0063  
                _T_Byte2 0061                  ___lwdiv 03DB                  ___lwmod 044F  
                __ptext1 044F                  __ptext2 03DB                  __ptext3 04EE  
                __ptext4 0417                  __ptext5 04D0                  __ptext6 0508  
                __ptext7 0226                  __ptext8 02BC                  __ptext9 033B  
              _T2CONbits 0012                  main@lcd 0051                  clrloop0 0543  
              _LCD_Write 033B     end_of_initialization 001B                _LCD_putrs 0508  
            _StartSignal 04EE                _PORTAbits 0005                _TRISAbits 0085  
             ?_LCD_Write 0070          ??_CheckResponse 0074               ?_LCD_putrs 0070  
      __size_of_LCD_Init 007F        __size_of_LCD_putc 0096        __size_of_LCD_puts 001E  
             LCD_Write@c 0079      start_initialization 000B               LCD_putrs@a 0043  
             LCD_putrs@i 0041        __size_of_ReadByte 0038               init_fetch0 0533  
            __pdataBANK0 0020                 ?_LCD_Out 0070              __pbssCOMMON 007A  
              ___latbits 0000            __pcstackBANK0 0041                 LCD_Out@c 0075  
            ??_LCD_Write 0076              ??_LCD_putrs 007A         ___lwdiv@dividend 0074  
               ?___lwdiv 0072                 ?___lwmod 0072                __pstrings 0392  
       ___lwdiv@quotient 0077           __size_of_tcInt 0011        interrupt_function 0004  
               _LCD_Init 02BC                clear_ram0 0542                 _LCD_putc 0226  
               _LCD_puts 04D0                 _PIE1bits 008C                 _PIR1bits 000C  
           ?_StartSignal 0070                 _RH_Byte1 005F                 _RH_Byte2 005D  
            __stringbase 0397                main@check 0056                 _CheckSum 0067  
       __size_of_LCD_Out 00C2                 _ReadByte 0417         __size_of___lwdiv 003C  
       __size_of___lwmod 0032       __end_of__stringtab 0398          ___lwdiv@divisor 0072  
        ___lwdiv@counter 0079                 __ptext10 0164                 __ptext11 0481  
               __ptext12 0522    __end_of_CheckResponse 04AF            __size_of_main 0147  
               _message1 0033                 _message2 0025                 main@F715 0020  
             _INTCONbits 000B                 init_ram0 0537                 intlevel1 0000  
       ___lwmod@dividend 0074                stringcode 0392     __size_of_StartSignal 001A  
        ___lwmod@divisor 0072          ___lwmod@counter 0077                 stringdir 0392  
               stringtab 0392  
