

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Sat May 25 11:59:30 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	16F628A
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	strings,global,class=STRING,delta=2
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	bitbssBANK0,global,bit,class=BANK0,space=1,delta=1
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	maintext,global,class=CODE,split=1,delta=2
    13                           	psect	text1,local,class=CODE,merge=1,delta=2
    14                           	psect	text2,local,class=CODE,merge=1,delta=2
    15                           	psect	text3,local,class=CODE,merge=1,delta=2,group=1
    16                           	psect	text4,local,class=CODE,merge=1,delta=2,group=2
    17                           	psect	text5,local,class=CODE,merge=1,delta=2,group=2
    18                           	psect	text6,local,class=CODE,merge=1,delta=2,group=1
    19                           	psect	text7,local,class=CODE,merge=1,delta=2,group=1
    20                           	psect	text8,local,class=CODE,merge=1,delta=2
    21                           	psect	text9,local,class=CODE,merge=1,delta=2
    22                           	psect	text10,local,class=CODE,merge=1,delta=2
    23                           	psect	text11,local,class=CODE,merge=1,delta=2
    24                           	psect	text12,local,class=CODE,merge=1,delta=2
    25                           	psect	text13,local,class=CODE,merge=1,delta=2
    26                           	dabs	1,0x7E,2
    27  0000                     
    28                           ; Version 2.05
    29                           ; Generated 20/12/2018 GMT
    30                           ; 
    31                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    32                           ; All rights reserved.
    33                           ; 
    34                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    35                           ; 
    36                           ; Redistribution and use in source and binary forms, with or without modification, are
    37                           ; permitted provided that the following conditions are met:
    38                           ; 
    39                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    40                           ;        conditions and the following disclaimer.
    41                           ; 
    42                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    43                           ;        of conditions and the following disclaimer in the documentation and/or other
    44                           ;        materials provided with the distribution.
    45                           ; 
    46                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    47                           ;        software without specific prior written permission.
    48                           ; 
    49                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    50                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    51                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    52                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    53                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    54                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    55                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    56                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    57                           ; 
    58                           ; 
    59                           ; Code-generator required, PIC16F628A Definitions
    60                           ; 
    61                           ; SFR Addresses
    62  0000                     	;# 
    63  0001                     	;# 
    64  0002                     	;# 
    65  0003                     	;# 
    66  0004                     	;# 
    67  0005                     	;# 
    68  0006                     	;# 
    69  000A                     	;# 
    70  000B                     	;# 
    71  000C                     	;# 
    72  000E                     	;# 
    73  000E                     	;# 
    74  000F                     	;# 
    75  0010                     	;# 
    76  0011                     	;# 
    77  0012                     	;# 
    78  0015                     	;# 
    79  0015                     	;# 
    80  0016                     	;# 
    81  0017                     	;# 
    82  0018                     	;# 
    83  0019                     	;# 
    84  001A                     	;# 
    85  001F                     	;# 
    86  0081                     	;# 
    87  0085                     	;# 
    88  0086                     	;# 
    89  008C                     	;# 
    90  008E                     	;# 
    91  0092                     	;# 
    92  0098                     	;# 
    93  0099                     	;# 
    94  009A                     	;# 
    95  009B                     	;# 
    96  009C                     	;# 
    97  009D                     	;# 
    98  009F                     	;# 
    99  0000                     	;# 
   100  0001                     	;# 
   101  0002                     	;# 
   102  0003                     	;# 
   103  0004                     	;# 
   104  0005                     	;# 
   105  0006                     	;# 
   106  000A                     	;# 
   107  000B                     	;# 
   108  000C                     	;# 
   109  000E                     	;# 
   110  000E                     	;# 
   111  000F                     	;# 
   112  0010                     	;# 
   113  0011                     	;# 
   114  0012                     	;# 
   115  0015                     	;# 
   116  0015                     	;# 
   117  0016                     	;# 
   118  0017                     	;# 
   119  0018                     	;# 
   120  0019                     	;# 
   121  001A                     	;# 
   122  001F                     	;# 
   123  0081                     	;# 
   124  0085                     	;# 
   125  0086                     	;# 
   126  008C                     	;# 
   127  008E                     	;# 
   128  0092                     	;# 
   129  0098                     	;# 
   130  0099                     	;# 
   131  009A                     	;# 
   132  009B                     	;# 
   133  009C                     	;# 
   134  009D                     	;# 
   135  009F                     	;# 
   136  0000                     	;# 
   137  0001                     	;# 
   138  0002                     	;# 
   139  0003                     	;# 
   140  0004                     	;# 
   141  0005                     	;# 
   142  0006                     	;# 
   143  000A                     	;# 
   144  000B                     	;# 
   145  000C                     	;# 
   146  000E                     	;# 
   147  000E                     	;# 
   148  000F                     	;# 
   149  0010                     	;# 
   150  0011                     	;# 
   151  0012                     	;# 
   152  0015                     	;# 
   153  0015                     	;# 
   154  0016                     	;# 
   155  0017                     	;# 
   156  0018                     	;# 
   157  0019                     	;# 
   158  001A                     	;# 
   159  001F                     	;# 
   160  0081                     	;# 
   161  0085                     	;# 
   162  0086                     	;# 
   163  008C                     	;# 
   164  008E                     	;# 
   165  0092                     	;# 
   166  0098                     	;# 
   167  0099                     	;# 
   168  009A                     	;# 
   169  009B                     	;# 
   170  009C                     	;# 
   171  009D                     	;# 
   172  009F                     	;# 
   173                           
   174                           	psect	idataBANK0
   175  02AE                     __pidataBANK0:	
   176                           
   177                           ;initializer for main@F716
   178  02AE  3406               	retlw	6
   179  02AF  3400               	retlw	0
   180  02B0  341A               	retlw	26
   181  02B1  342C               	retlw	44
   182  02B2  343E               	retlw	62
   183  0006                     _PORTBbits	set	6
   184  0005                     _PORTA	set	5
   185  0006                     _PORTB	set	6
   186  0081                     _OPTION_REGbits	set	129
   187  0086                     _TRISB	set	134
   188  0085                     _TRISA	set	133
   189                           
   190                           	psect	strings
   191  0001                     __pstrings:	
   192  0001                     stringtab:	
   193  0001                     __stringtab:	
   194  0001                     stringcode:	
   195                           ;	String table - string pointers are 1 byte each
   196                           
   197  0001                     stringdir:	
   198  0001  3000               	movlw	high stringdir
   199  0002  008A               	movwf	10
   200  0003  0804               	movf	4,w
   201  0004  0A84               	incf	4,f
   202  0005  0782               	addwf	2,f
   203  0006                     __stringbase:	
   204  0006  3400               	retlw	0
   205  0007                     __end_of__stringtab:	
   206  0007                     STR_2:	
   207  0007  3443               	retlw	67	;'C'
   208  0008  346F               	retlw	111	;'o'
   209  0009  346E               	retlw	110	;'n'
   210  000A  3474               	retlw	116	;'t'
   211  000B  3461               	retlw	97	;'a'
   212  000C  3464               	retlw	100	;'d'
   213  000D  346F               	retlw	111	;'o'
   214  000E  3472               	retlw	114	;'r'
   215  000F  3420               	retlw	32	;' '
   216  0010  3430               	retlw	48	;'0'
   217  0011  3420               	retlw	32	;' '
   218  0012  3461               	retlw	97	;'a'
   219  0013  3420               	retlw	32	;' '
   220  0014  3431               	retlw	49	;'1'
   221  0015  3430               	retlw	48	;'0'
   222  0016  3430               	retlw	48	;'0'
   223  0017  3400               	retlw	0
   224  0018                     STR_1:	
   225  0018  3420               	retlw	32	;' '
   226  0019  3420               	retlw	32	;' '
   227  001A  3420               	retlw	32	;' '
   228  001B  3420               	retlw	32	;' '
   229  001C  3420               	retlw	32	;' '
   230  001D  3400               	retlw	0
   231                           
   232                           	psect	cinit
   233  07EE                     start_initialization:	
   234                           ; #config settings
   235                           
   236  07EE                     __initialization:	
   237                           
   238                           ; Initialize objects allocated to BANK0
   239  07EE  22AE               	fcall	__pidataBANK0	;fetch initializer
   240  07EF  00C2               	movwf	__pdataBANK0& (0+127)
   241  07F0  22AF               	fcall	__pidataBANK0+1	;fetch initializer
   242  07F1  00C3               	movwf	(__pdataBANK0+1)& (0+127)
   243  07F2  22B0               	fcall	__pidataBANK0+2	;fetch initializer
   244  07F3  00C4               	movwf	(__pdataBANK0+2)& (0+127)
   245  07F4  22B1               	fcall	__pidataBANK0+3	;fetch initializer
   246  07F5  00C5               	movwf	(__pdataBANK0+3)& (0+127)
   247  07F6  22B2               	fcall	__pidataBANK0+4	;fetch initializer
   248  07F7  00C6               	movwf	(__pdataBANK0+4)& (0+127)
   249                           
   250                           ; Clear objects allocated to BANK0
   251  07F8  01BD               	clrf	__pbssBANK0& (0+127)
   252  07F9  01BE               	clrf	(__pbssBANK0+1)& (0+127)
   253  07FA  01BF               	clrf	(__pbssBANK0+2)& (0+127)
   254  07FB  01C0               	clrf	(__pbssBANK0+3)& (0+127)
   255  07FC  01C1               	clrf	(__pbssBANK0+4)& (0+127)
   256                           
   257                           ; Clear objects allocated to BITBANK0
   258  07FD  01C7               	clrf	(__pbitbssBANK0/(0+8))& (0+127)
   259  07FE                     end_of_initialization:	
   260                           ;End of C runtime variable initialization code
   261                           
   262  07FE                     __end_of__initialization:	
   263  07FE  0183               	clrf	3
   264  07FF  2CB2               	ljmp	_main	;jump to C main() function
   265                           
   266                           	psect	bssBANK0
   267  003D                     __pbssBANK0:	
   268  003D                     _lcd:	
   269  003D                     	ds	5
   270                           
   271                           	psect	dataBANK0
   272  0042                     __pdataBANK0:	
   273  0042                     main@F716:	
   274  0042                     	ds	5
   275                           
   276                           	psect	bitbssBANK0
   277  0238                     __pbitbssBANK0:	
   278  0238                     _new3:	
   279  0238                     	ds	1
   280  0239                     _old3:	
   281  0239                     	ds	1
   282  023A                     _new2:	
   283  023A                     	ds	1
   284  023B                     _old2:	
   285  023B                     	ds	1
   286                           
   287                           	psect	cstackCOMMON
   288  0070                     __pcstackCOMMON:	
   289  0070                     ?_LCD_Out:	
   290  0070                     ??_LCD_Out:	
   291                           ; 1 bytes @ 0x0
   292                           
   293  0070                     ?_LCD_Write:	
   294                           ; 1 bytes @ 0x0
   295                           
   296  0070                     ?_LCD_putc:	
   297                           ; 1 bytes @ 0x0
   298                           
   299  0070                     ?_LCD_puts:	
   300                           ; 1 bytes @ 0x0
   301                           
   302  0070                     ?_LCD_putrs:	
   303                           ; 1 bytes @ 0x0
   304                           
   305  0070                     ?_main:	
   306                           ; 1 bytes @ 0x0
   307                           
   308  0070                     ?___awdiv:	
   309                           ; 1 bytes @ 0x0
   310                           
   311  0070                     ?___lwdiv:	
   312                           ; 2 bytes @ 0x0
   313                           
   314  0070                     ?___lwmod:	
   315                           ; 2 bytes @ 0x0
   316                           
   317  0070                     ___awdiv@divisor:	
   318                           ; 2 bytes @ 0x0
   319                           
   320  0070                     ___lwdiv@divisor:	
   321                           ; 2 bytes @ 0x0
   322                           
   323  0070                     ___lwmod@divisor:	
   324                           ; 2 bytes @ 0x0
   325                           
   326                           
   327                           ; 2 bytes @ 0x0
   328  0070                     	ds	2
   329  0072                     ___awdiv@dividend:	
   330  0072                     ___lwdiv@dividend:	
   331                           ; 2 bytes @ 0x2
   332                           
   333  0072                     ___lwmod@dividend:	
   334                           ; 2 bytes @ 0x2
   335                           
   336                           
   337                           ; 2 bytes @ 0x2
   338  0072                     	ds	1
   339  0073                     LCD_Out@c:	
   340                           
   341                           ; 1 bytes @ 0x3
   342  0073                     	ds	1
   343  0074                     ??_LCD_Write:	
   344  0074                     ??_LCD_putc:	
   345                           ; 1 bytes @ 0x4
   346                           
   347  0074                     ??___awdiv:	
   348                           ; 1 bytes @ 0x4
   349                           
   350  0074                     ??___lwdiv:	
   351                           ; 1 bytes @ 0x4
   352                           
   353  0074                     ??___lwmod:	
   354                           ; 1 bytes @ 0x4
   355                           
   356                           
   357                           ; 1 bytes @ 0x4
   358  0074                     	ds	1
   359  0075                     ___awdiv@counter:	
   360  0075                     ___lwmod@counter:	
   361                           ; 1 bytes @ 0x5
   362                           
   363  0075                     ___lwdiv@quotient:	
   364                           ; 1 bytes @ 0x5
   365                           
   366                           
   367                           ; 2 bytes @ 0x5
   368  0075                     	ds	1
   369  0076                     ___awdiv@sign:	
   370                           
   371                           ; 1 bytes @ 0x6
   372  0076                     	ds	1
   373  0077                     LCD_Write@c:	
   374  0077                     LCD_putc@c:	
   375                           ; 1 bytes @ 0x7
   376                           
   377  0077                     ___lwdiv@counter:	
   378                           ; 1 bytes @ 0x7
   379                           
   380  0077                     ___awdiv@quotient:	
   381                           ; 1 bytes @ 0x7
   382                           
   383                           
   384                           ; 2 bytes @ 0x7
   385  0077                     	ds	1
   386  0078                     ?_utoa:	
   387  0078                     ?_LCD_Init:	
   388                           ; 1 bytes @ 0x8
   389                           
   390  0078                     ??_LCD_puts:	
   391                           ; 1 bytes @ 0x8
   392                           
   393  0078                     ??_LCD_putrs:	
   394                           ; 1 bytes @ 0x8
   395                           
   396  0078                     LCD_putrs@i:	
   397                           ; 1 bytes @ 0x8
   398                           
   399  0078                     utoa@val:	
   400                           ; 2 bytes @ 0x8
   401                           
   402  0078                     LCD_Init@display:	
   403                           ; 2 bytes @ 0x8
   404                           
   405                           
   406                           ; 5 bytes @ 0x8
   407  0078                     	ds	1
   408  0079                     ?_numCifras:	
   409  0079                     LCD_puts@i:	
   410                           ; 2 bytes @ 0x9
   411                           
   412  0079                     numCifras@num:	
   413                           ; 2 bytes @ 0x9
   414                           
   415                           
   416                           ; 2 bytes @ 0x9
   417  0079                     	ds	1
   418  007A                     LCD_putrs@a:	
   419  007A                     utoa@base:	
   420                           ; 1 bytes @ 0xA
   421                           
   422                           
   423                           ; 2 bytes @ 0xA
   424  007A                     	ds	1
   425  007B                     ??_numCifras:	
   426  007B                     LCD_puts@a:	
   427                           ; 1 bytes @ 0xB
   428                           
   429  007B                     numCifras@contador:	
   430                           ; 1 bytes @ 0xB
   431                           
   432                           
   433                           ; 2 bytes @ 0xB
   434  007B                     	ds	1
   435  007C                     ??_utoa:	
   436                           
   437                           ; 1 bytes @ 0xC
   438  007C                     	ds	1
   439  007D                     ??_itoa:	
   440  007D                     LCD_Init@cmd:	
   441                           ; 1 bytes @ 0xD
   442                           
   443                           
   444                           ; 1 bytes @ 0xD
   445  007D                     	ds	1
   446                           
   447                           	psect	cstackBANK0
   448  0020                     __pcstackBANK0:	
   449  0020                     ??_LCD_Init:	
   450  0020                     utoa@v:	
   451                           ; 1 bytes @ 0x0
   452                           
   453                           
   454                           ; 2 bytes @ 0x0
   455  0020                     	ds	2
   456  0022                     utoa@c:	
   457                           
   458                           ; 1 bytes @ 0x2
   459  0022                     	ds	1
   460  0023                     utoa@buf:	
   461                           
   462                           ; 1 bytes @ 0x3
   463  0023                     	ds	1
   464  0024                     ?_itoa:	
   465  0024                     itoa@val:	
   466                           ; 1 bytes @ 0x4
   467                           
   468                           
   469                           ; 2 bytes @ 0x4
   470  0024                     	ds	2
   471  0026                     itoa@base:	
   472                           
   473                           ; 2 bytes @ 0x6
   474  0026                     	ds	3
   475  0029                     itoa@buf:	
   476                           
   477                           ; 1 bytes @ 0x9
   478  0029                     	ds	1
   479  002A                     ?_mostrarNum:	
   480  002A                     mostrarNum@col:	
   481                           ; 1 bytes @ 0xA
   482                           
   483                           
   484                           ; 1 bytes @ 0xA
   485  002A                     	ds	1
   486  002B                     mostrarNum@num:	
   487                           
   488                           ; 2 bytes @ 0xB
   489  002B                     	ds	2
   490  002D                     ??_mostrarNum:	
   491                           
   492                           ; 1 bytes @ 0xD
   493  002D                     	ds	1
   494  002E                     mostrarNum@aux:	
   495                           
   496                           ; 4 bytes @ 0xE
   497  002E                     	ds	4
   498  0032                     mostrarNum@aux2:	
   499                           
   500                           ; 2 bytes @ 0x12
   501  0032                     	ds	2
   502  0034                     mostrarNum@fil:	
   503                           
   504                           ; 1 bytes @ 0x14
   505  0034                     	ds	1
   506  0035                     ??_main:	
   507                           
   508                           ; 1 bytes @ 0x15
   509  0035                     	ds	1
   510  0036                     main@lcd:	
   511                           
   512                           ; 5 bytes @ 0x16
   513  0036                     	ds	5
   514  003B                     main@a:	
   515                           
   516                           ; 2 bytes @ 0x1B
   517  003B                     	ds	2
   518                           
   519                           	psect	maintext
   520  04B2                     __pmaintext:	
   521 ;;
   522 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   523 ;;
   524 ;; *************** function _main *****************
   525 ;; Defined at:
   526 ;;		line 43 in file "main.c"
   527 ;; Parameters:    Size  Location     Type
   528 ;;		None
   529 ;; Auto vars:     Size  Location     Type
   530 ;;  lcd             5   22[BANK0 ] struct .
   531 ;;  a               2   27[BANK0 ] int 
   532 ;; Return value:  Size  Location     Type
   533 ;;                  1    wreg      void 
   534 ;; Registers used:
   535 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   536 ;; Tracked objects:
   537 ;;		On entry : B00/0
   538 ;;		On exit  : 0/0
   539 ;;		Unchanged: 0/0
   540 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   541 ;;      Params:         0       0       0       0
   542 ;;      Locals:         0       7       0       0
   543 ;;      Temps:          0       1       0       0
   544 ;;      Totals:         0       8       0       0
   545 ;;Total ram usage:        8 bytes
   546 ;; Hardware stack levels required when called:    4
   547 ;; This function calls:
   548 ;;		_LCD_Init
   549 ;;		_LCD_Write
   550 ;;		_LCD_putrs
   551 ;;		_mostrarNum
   552 ;; This function is called by:
   553 ;;		Startup code after reset
   554 ;; This function uses a non-reentrant model
   555 ;;
   556                           
   557                           
   558                           ;psect for function _main
   559  04B2                     _main:	
   560                           
   561                           ;main.c: 44:     LCD lcd = {&PORTB, 2, 3, 4, 5, 6, 7};
   562                           
   563                           ;incstack = 0
   564                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   565  04B2  3036               	movlw	main@lcd& (0+255)
   566  04B3  0084               	movwf	4
   567  04B4  1283               	bcf	3,5	;RP0=0, select bank0
   568  04B5  1303               	bcf	3,6	;RP1=0, select bank0
   569  04B6  0842               	movf	main@F716,w
   570  04B7  1383               	bcf	3,7	;select IRP bank0
   571  04B8  0080               	movwf	0
   572  04B9  0A84               	incf	4,f
   573  04BA  0843               	movf	main@F716+1,w
   574  04BB  0080               	movwf	0
   575  04BC  0A84               	incf	4,f
   576  04BD  0844               	movf	main@F716+2,w
   577  04BE  0080               	movwf	0
   578  04BF  0A84               	incf	4,f
   579  04C0  0845               	movf	main@F716+3,w
   580  04C1  0080               	movwf	0
   581  04C2  0A84               	incf	4,f
   582  04C3  0846               	movf	main@F716+4,w
   583  04C4  0080               	movwf	0
   584                           
   585                           ;main.c: 45:     LCD_Init(lcd);
   586  04C5  3078               	movlw	LCD_Init@display& (0+255)
   587  04C6  0084               	movwf	4
   588  04C7  0836               	movf	main@lcd,w
   589  04C8  0080               	movwf	0
   590  04C9  0A84               	incf	4,f
   591  04CA  0837               	movf	main@lcd+1,w
   592  04CB  0080               	movwf	0
   593  04CC  0A84               	incf	4,f
   594  04CD  0838               	movf	main@lcd+2,w
   595  04CE  0080               	movwf	0
   596  04CF  0A84               	incf	4,f
   597  04D0  0839               	movf	main@lcd+3,w
   598  04D1  0080               	movwf	0
   599  04D2  0A84               	incf	4,f
   600  04D3  083A               	movf	main@lcd+4,w
   601  04D4  0080               	movwf	0
   602  04D5  2528               	fcall	_LCD_Init
   603                           
   604                           ;main.c: 46:     TRISB = 0B00000011;
   605  04D6  3003               	movlw	3
   606  04D7  1683               	bsf	3,5	;RP0=1, select bank1
   607  04D8  1303               	bcf	3,6	;RP1=0, select bank1
   608  04D9  0086               	movwf	6	;volatile
   609                           
   610                           ;main.c: 47:     OPTION_REGbits.nRBPU = 0;
   611  04DA  1381               	bcf	1,7	;volatile
   612  04DB  3000               	movlw	0
   613  04DC  23A2               	fcall	_LCD_Write
   614  04DD  3001               	movlw	1
   615  04DE  23A2               	fcall	_LCD_Write
   616  04DF  3008               	movlw	8
   617  04E0  23A2               	fcall	_LCD_Write
   618  04E1  3000               	movlw	0
   619  04E2  23A2               	fcall	_LCD_Write
   620                           
   621                           ;main.c: 50:     LCD_putrs("Contador 0 a 100");
   622  04E3  3001               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
   623  04E4  22B3               	fcall	_LCD_putrs
   624                           
   625                           ;main.c: 51:     int a = 0;
   626  04E5  1283               	bcf	3,5	;RP0=0, select bank0
   627  04E6  1303               	bcf	3,6	;RP1=0, select bank0
   628  04E7  01BB               	clrf	main@a
   629  04E8  01BC               	clrf	main@a+1
   630  04E9                     l1395:	
   631                           
   632                           ;main.c: 54:         new2 = PORTBbits.RB0;
   633  04E9  1283               	bcf	3,5	;RP0=0, select bank0
   634  04EA  1303               	bcf	3,6	;RP1=0, select bank0
   635  04EB  1147               	bcf	_new2/(0+8),_new2& (0+7)
   636  04EC  1806               	btfsc	6,0	;volatile
   637  04ED  1547               	bsf	_new2/(0+8),_new2& (0+7)
   638                           
   639                           ;main.c: 55:         new3 = PORTBbits.RB1;
   640  04EE  1283               	bcf	3,5	;RP0=0, select bank0
   641  04EF  1303               	bcf	3,6	;RP1=0, select bank0
   642  04F0  1047               	bcf	_new3/(0+8),_new3& (0+7)
   643  04F1  1886               	btfsc	6,1	;volatile
   644  04F2  1447               	bsf	_new3/(0+8),_new3& (0+7)
   645                           
   646                           ;main.c: 56:         if (old2 && !new2) {
   647  04F3  1283               	bcf	3,5	;RP0=0, select bank0
   648  04F4  1303               	bcf	3,6	;RP1=0, select bank0
   649  04F5  19C7               	btfsc	_old2/(0+8),_old2& (0+7)
   650  04F6  1947               	btfsc	_new2/(0+8),_new2& (0+7)
   651  04F7  2D08               	goto	l1407
   652                           
   653                           ;main.c: 57:             a++;
   654  04F8  3001               	movlw	1
   655  04F9  07BB               	addwf	main@a,f
   656  04FA  1803               	skipnc
   657  04FB  0ABC               	incf	main@a+1,f
   658  04FC  3000               	movlw	0
   659  04FD  07BC               	addwf	main@a+1,f
   660                           
   661                           ;main.c: 58:             mostrarNum(1, 10, a);
   662  04FE  300A               	movlw	10
   663  04FF  00B5               	movwf	??_main
   664  0500  0835               	movf	??_main,w
   665  0501  00AA               	movwf	mostrarNum@col
   666  0502  083C               	movf	main@a+1,w
   667  0503  00AC               	movwf	mostrarNum@num+1
   668  0504  083B               	movf	main@a,w
   669  0505  00AB               	movwf	mostrarNum@num
   670  0506  3001               	movlw	1
   671  0507  26FD               	fcall	_mostrarNum
   672  0508                     l1407:	
   673                           
   674                           ;main.c: 60:         if (old3 && !new3) {
   675  0508  1283               	bcf	3,5	;RP0=0, select bank0
   676  0509  1303               	bcf	3,6	;RP1=0, select bank0
   677  050A  18C7               	btfsc	_old3/(0+8),_old3& (0+7)
   678  050B  1847               	btfsc	_new3/(0+8),_new3& (0+7)
   679  050C  2D1D               	goto	l1415
   680                           
   681                           ;main.c: 61:             a--;
   682  050D  30FF               	movlw	255
   683  050E  07BB               	addwf	main@a,f
   684  050F  1803               	skipnc
   685  0510  0ABC               	incf	main@a+1,f
   686  0511  30FF               	movlw	255
   687  0512  07BC               	addwf	main@a+1,f
   688                           
   689                           ;main.c: 62:             mostrarNum(1, 10, a);
   690  0513  300A               	movlw	10
   691  0514  00B5               	movwf	??_main
   692  0515  0835               	movf	??_main,w
   693  0516  00AA               	movwf	mostrarNum@col
   694  0517  083C               	movf	main@a+1,w
   695  0518  00AC               	movwf	mostrarNum@num+1
   696  0519  083B               	movf	main@a,w
   697  051A  00AB               	movwf	mostrarNum@num
   698  051B  3001               	movlw	1
   699  051C  26FD               	fcall	_mostrarNum
   700  051D                     l1415:	
   701                           
   702                           ;main.c: 64:         old2 = new2;
   703  051D  1283               	bcf	3,5	;RP0=0, select bank0
   704  051E  1303               	bcf	3,6	;RP1=0, select bank0
   705  051F  11C7               	bcf	_old2/(0+8),_old2& (0+7)
   706  0520  1947               	btfsc	_new2/(0+8),_new2& (0+7)
   707  0521  15C7               	bsf	_old2/(0+8),_old2& (0+7)
   708                           
   709                           ;main.c: 65:         old3 = new3;
   710  0522  1283               	bcf	3,5	;RP0=0, select bank0
   711  0523  1303               	bcf	3,6	;RP1=0, select bank0
   712  0524  10C7               	bcf	_old3/(0+8),_old3& (0+7)
   713  0525  1847               	btfsc	_new3/(0+8),_new3& (0+7)
   714  0526  14C7               	bsf	_old3/(0+8),_old3& (0+7)
   715                           
   716                           ;main.c: 66:     }
   717  0527  2CE9               	goto	l1395
   718  0528                     __end_of_main:	
   719                           
   720                           	psect	text1
   721  06FD                     __ptext1:	
   722 ;; *************** function _mostrarNum *****************
   723 ;; Defined at:
   724 ;;		line 13 in file "main.c"
   725 ;; Parameters:    Size  Location     Type
   726 ;;  fil             1    wreg     unsigned char 
   727 ;;  col             1   10[BANK0 ] unsigned char 
   728 ;;  num             2   11[BANK0 ] int 
   729 ;; Auto vars:     Size  Location     Type
   730 ;;  fil             1   20[BANK0 ] unsigned char 
   731 ;;  aux             4   14[BANK0 ] unsigned char [4]
   732 ;;  aux2            2   18[BANK0 ] int 
   733 ;; Return value:  Size  Location     Type
   734 ;;                  1    wreg      void 
   735 ;; Registers used:
   736 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   737 ;; Tracked objects:
   738 ;;		On entry : 0/0
   739 ;;		On exit  : 0/0
   740 ;;		Unchanged: 0/0
   741 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   742 ;;      Params:         0       3       0       0
   743 ;;      Locals:         0       7       0       0
   744 ;;      Temps:          0       1       0       0
   745 ;;      Totals:         0      11       0       0
   746 ;;Total ram usage:       11 bytes
   747 ;; Hardware stack levels used:    1
   748 ;; Hardware stack levels required when called:    3
   749 ;; This function calls:
   750 ;;		_LCD_Write
   751 ;;		_LCD_putrs
   752 ;;		_LCD_puts
   753 ;;		_itoa
   754 ;;		_numCifras
   755 ;; This function is called by:
   756 ;;		_main
   757 ;; This function uses a non-reentrant model
   758 ;;
   759                           
   760                           
   761                           ;psect for function _mostrarNum
   762  06FD                     _mostrarNum:	
   763                           
   764                           ;incstack = 0
   765                           ; Regs used in _mostrarNum: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   766                           ;mostrarNum@fil stored from wreg
   767  06FD  1283               	bcf	3,5	;RP0=0, select bank0
   768  06FE  1303               	bcf	3,6	;RP1=0, select bank0
   769  06FF  00B4               	movwf	mostrarNum@fil
   770                           
   771                           ;main.c: 14:     char aux[4];;main.c: 15:     int aux2;;main.c: 16:     do { if ( fil ==
      +                           0 ) { do { LCD_Write( (0x80 + col - 4 & 0xF0) >> 4 ); LCD_Write( 0x80 + col - 4 & 0x0F)
      +                          ; } while ( 0 ); } else if ( fil == 1 ) { do { LCD_Write( (0xC0 + col - 4 & 0xF0) >> 4 )
      +                          ; LCD_Write( 0xC0 + col - 4 & 0x0F); } while ( 0 ); } else if ( fil == 2 ) { do { LCD_Wr
      +                          ite( (0x94 + col - 4 & 0xF0) >> 4 ); LCD_Write( 0x94 + col - 4 & 0x0F); } while ( 0 ); }
      +                           else if ( fil == 3 ) { do { LCD_Write( (0xD4 + col - 4 & 0xF0) >> 4 ); LCD_Write( 0xD4 
      +                          + col - 4 & 0x0F); } while ( 0 ); } } while ( 0 );
   772  0700  0834               	movf	mostrarNum@fil,w
   773  0701  1D03               	btfss	3,2
   774  0702  2F14               	goto	l1329
   775  0703  082A               	movf	mostrarNum@col,w
   776  0704  3E7C               	addlw	124
   777  0705  00AD               	movwf	??_mostrarNum
   778  0706  3004               	movlw	4
   779  0707                     u1385:	
   780  0707  1003               	clrc
   781  0708  0CAD               	rrf	??_mostrarNum,f
   782  0709  3EFF               	addlw	-1
   783  070A  1D03               	skipz
   784  070B  2F07               	goto	u1385
   785  070C  082D               	movf	??_mostrarNum,w
   786  070D  390F               	andlw	15
   787  070E  23A2               	fcall	_LCD_Write
   788  070F  1283               	bcf	3,5	;RP0=0, select bank0
   789  0710  1303               	bcf	3,6	;RP1=0, select bank0
   790  0711  082A               	movf	mostrarNum@col,w
   791  0712  3E7C               	addlw	124
   792  0713  2F51               	goto	L1
   793  0714                     l1329:	
   794  0714  0334               	decf	mostrarNum@fil,w
   795  0715  1D03               	btfss	3,2
   796  0716  2F28               	goto	l1333
   797  0717  082A               	movf	mostrarNum@col,w
   798  0718  3EBC               	addlw	188
   799  0719  00AD               	movwf	??_mostrarNum
   800  071A  3004               	movlw	4
   801  071B                     u1405:	
   802  071B  1003               	clrc
   803  071C  0CAD               	rrf	??_mostrarNum,f
   804  071D  3EFF               	addlw	-1
   805  071E  1D03               	skipz
   806  071F  2F1B               	goto	u1405
   807  0720  082D               	movf	??_mostrarNum,w
   808  0721  390F               	andlw	15
   809  0722  23A2               	fcall	_LCD_Write
   810  0723  1283               	bcf	3,5	;RP0=0, select bank0
   811  0724  1303               	bcf	3,6	;RP1=0, select bank0
   812  0725  082A               	movf	mostrarNum@col,w
   813  0726  3EBC               	addlw	188
   814  0727  2F51               	goto	L1
   815  0728                     l1333:	
   816  0728  3002               	movlw	2
   817  0729  0634               	xorwf	mostrarNum@fil,w
   818  072A  1D03               	btfss	3,2
   819  072B  2F3D               	goto	l1337
   820  072C  082A               	movf	mostrarNum@col,w
   821  072D  3E90               	addlw	144
   822  072E  00AD               	movwf	??_mostrarNum
   823  072F  3004               	movlw	4
   824  0730                     u1425:	
   825  0730  1003               	clrc
   826  0731  0CAD               	rrf	??_mostrarNum,f
   827  0732  3EFF               	addlw	-1
   828  0733  1D03               	skipz
   829  0734  2F30               	goto	u1425
   830  0735  082D               	movf	??_mostrarNum,w
   831  0736  390F               	andlw	15
   832  0737  23A2               	fcall	_LCD_Write
   833  0738  1283               	bcf	3,5	;RP0=0, select bank0
   834  0739  1303               	bcf	3,6	;RP1=0, select bank0
   835  073A  082A               	movf	mostrarNum@col,w
   836  073B  3E90               	addlw	144
   837  073C  2F51               	goto	L1
   838  073D                     l1337:	
   839  073D  3003               	movlw	3
   840  073E  0634               	xorwf	mostrarNum@fil,w
   841  073F  1D03               	btfss	3,2
   842  0740  2F53               	goto	l110
   843  0741  082A               	movf	mostrarNum@col,w
   844  0742  3ED0               	addlw	208
   845  0743  00AD               	movwf	??_mostrarNum
   846  0744  3004               	movlw	4
   847  0745                     u1445:	
   848  0745  1003               	clrc
   849  0746  0CAD               	rrf	??_mostrarNum,f
   850  0747  3EFF               	addlw	-1
   851  0748  1D03               	skipz
   852  0749  2F45               	goto	u1445
   853  074A  082D               	movf	??_mostrarNum,w
   854  074B  390F               	andlw	15
   855  074C  23A2               	fcall	_LCD_Write
   856  074D  1283               	bcf	3,5	;RP0=0, select bank0
   857  074E  1303               	bcf	3,6	;RP1=0, select bank0
   858  074F  082A               	movf	mostrarNum@col,w
   859  0750  3ED0               	addlw	208
   860  0751                     L1:	
   861  0751  390F               	andlw	15
   862  0752  23A2               	fcall	_LCD_Write
   863  0753                     l110:	
   864                           
   865                           ;main.c: 17:     LCD_putrs("     ");
   866  0753  3012               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   867  0754  22B3               	fcall	_LCD_putrs
   868                           
   869                           ;main.c: 18:     itoa(aux, num, 10);
   870  0755  1283               	bcf	3,5	;RP0=0, select bank0
   871  0756  1303               	bcf	3,6	;RP1=0, select bank0
   872  0757  082C               	movf	mostrarNum@num+1,w
   873  0758  00A5               	movwf	itoa@val+1
   874  0759  082B               	movf	mostrarNum@num,w
   875  075A  00A4               	movwf	itoa@val
   876  075B  300A               	movlw	10
   877  075C  00A6               	movwf	itoa@base
   878  075D  3000               	movlw	0
   879  075E  00A7               	movwf	itoa@base+1
   880  075F  302E               	movlw	(low (mostrarNum@aux| 0))& (0+255)
   881  0760  22E3               	fcall	_itoa
   882                           
   883                           ;main.c: 19:     if (num > 9) {
   884  0761  1283               	bcf	3,5	;RP0=0, select bank0
   885  0762  1303               	bcf	3,6	;RP1=0, select bank0
   886  0763  082C               	movf	mostrarNum@num+1,w
   887  0764  3A80               	xorlw	128
   888  0765  00FF               	movwf	127
   889  0766  3080               	movlw	128
   890  0767  027F               	subwf	127,w
   891  0768  1D03               	skipz
   892  0769  2F6C               	goto	u1455
   893  076A  300A               	movlw	10
   894  076B  022B               	subwf	mostrarNum@num,w
   895  076C                     u1455:	
   896  076C  1C03               	skipc
   897  076D  2F84               	goto	l1347
   898                           
   899                           ;main.c: 20:         aux2 = numCifras(num) - 1;
   900  076E  1283               	bcf	3,5	;RP0=0, select bank0
   901  076F  1303               	bcf	3,6	;RP1=0, select bank0
   902  0770  082C               	movf	mostrarNum@num+1,w
   903  0771  00FA               	movwf	numCifras@num+1
   904  0772  082B               	movf	mostrarNum@num,w
   905  0773  00F9               	movwf	numCifras@num
   906  0774  2303               	fcall	_numCifras
   907  0775  0879               	movf	?_numCifras,w
   908  0776  3EFF               	addlw	255
   909  0777  1283               	bcf	3,5	;RP0=0, select bank0
   910  0778  1303               	bcf	3,6	;RP1=0, select bank0
   911  0779  00B2               	movwf	mostrarNum@aux2
   912  077A  087A               	movf	?_numCifras+1,w
   913  077B  1803               	skipnc
   914  077C  3E01               	addlw	1
   915  077D  3EFF               	addlw	255
   916  077E  00B3               	movwf	mostrarNum@aux2+1
   917                           
   918                           ;main.c: 21:         col = col - aux2;
   919  077F  0832               	movf	mostrarNum@aux2,w
   920  0780  022A               	subwf	mostrarNum@col,w
   921  0781  00AD               	movwf	??_mostrarNum
   922  0782  082D               	movf	??_mostrarNum,w
   923  0783  00AA               	movwf	mostrarNum@col
   924  0784                     l1347:	
   925                           
   926                           ;main.c: 23:     if(num < 0){
   927  0784  1283               	bcf	3,5	;RP0=0, select bank0
   928  0785  1303               	bcf	3,6	;RP1=0, select bank0
   929  0786  1FAC               	btfss	mostrarNum@num+1,7
   930  0787  2F98               	goto	l1353
   931                           
   932                           ;main.c: 24:         aux2 = numCifras(num);
   933  0788  082C               	movf	mostrarNum@num+1,w
   934  0789  00FA               	movwf	numCifras@num+1
   935  078A  082B               	movf	mostrarNum@num,w
   936  078B  00F9               	movwf	numCifras@num
   937  078C  2303               	fcall	_numCifras
   938  078D  087A               	movf	?_numCifras+1,w
   939  078E  1283               	bcf	3,5	;RP0=0, select bank0
   940  078F  1303               	bcf	3,6	;RP1=0, select bank0
   941  0790  00B3               	movwf	mostrarNum@aux2+1
   942  0791  0879               	movf	?_numCifras,w
   943  0792  00B2               	movwf	mostrarNum@aux2
   944                           
   945                           ;main.c: 25:         col = col - aux2;
   946  0793  0832               	movf	mostrarNum@aux2,w
   947  0794  022A               	subwf	mostrarNum@col,w
   948  0795  00AD               	movwf	??_mostrarNum
   949  0796  082D               	movf	??_mostrarNum,w
   950  0797  00AA               	movwf	mostrarNum@col
   951  0798                     l1353:	
   952  0798  0834               	movf	mostrarNum@fil,w
   953  0799  1D03               	btfss	3,2
   954  079A  2FAC               	goto	l1357
   955  079B  082A               	movf	mostrarNum@col,w
   956  079C  3E80               	addlw	128
   957  079D  00AD               	movwf	??_mostrarNum
   958  079E  3004               	movlw	4
   959  079F                     u1485:	
   960  079F  1003               	clrc
   961  07A0  0CAD               	rrf	??_mostrarNum,f
   962  07A1  3EFF               	addlw	-1
   963  07A2  1D03               	skipz
   964  07A3  2F9F               	goto	u1485
   965  07A4  082D               	movf	??_mostrarNum,w
   966  07A5  390F               	andlw	15
   967  07A6  23A2               	fcall	_LCD_Write
   968  07A7  1283               	bcf	3,5	;RP0=0, select bank0
   969  07A8  1303               	bcf	3,6	;RP1=0, select bank0
   970  07A9  082A               	movf	mostrarNum@col,w
   971  07AA  3E80               	addlw	128
   972  07AB  2FE9               	goto	L2
   973  07AC                     l1357:	
   974  07AC  0334               	decf	mostrarNum@fil,w
   975  07AD  1D03               	btfss	3,2
   976  07AE  2FC0               	goto	l1361
   977  07AF  082A               	movf	mostrarNum@col,w
   978  07B0  3EC0               	addlw	192
   979  07B1  00AD               	movwf	??_mostrarNum
   980  07B2  3004               	movlw	4
   981  07B3                     u1505:	
   982  07B3  1003               	clrc
   983  07B4  0CAD               	rrf	??_mostrarNum,f
   984  07B5  3EFF               	addlw	-1
   985  07B6  1D03               	skipz
   986  07B7  2FB3               	goto	u1505
   987  07B8  082D               	movf	??_mostrarNum,w
   988  07B9  390F               	andlw	15
   989  07BA  23A2               	fcall	_LCD_Write
   990  07BB  1283               	bcf	3,5	;RP0=0, select bank0
   991  07BC  1303               	bcf	3,6	;RP1=0, select bank0
   992  07BD  082A               	movf	mostrarNum@col,w
   993  07BE  3EC0               	addlw	192
   994  07BF  2FE9               	goto	L2
   995  07C0                     l1361:	
   996  07C0  3002               	movlw	2
   997  07C1  0634               	xorwf	mostrarNum@fil,w
   998  07C2  1D03               	btfss	3,2
   999  07C3  2FD5               	goto	l1365
  1000  07C4  082A               	movf	mostrarNum@col,w
  1001  07C5  3E94               	addlw	148
  1002  07C6  00AD               	movwf	??_mostrarNum
  1003  07C7  3004               	movlw	4
  1004  07C8                     u1525:	
  1005  07C8  1003               	clrc
  1006  07C9  0CAD               	rrf	??_mostrarNum,f
  1007  07CA  3EFF               	addlw	-1
  1008  07CB  1D03               	skipz
  1009  07CC  2FC8               	goto	u1525
  1010  07CD  082D               	movf	??_mostrarNum,w
  1011  07CE  390F               	andlw	15
  1012  07CF  23A2               	fcall	_LCD_Write
  1013  07D0  1283               	bcf	3,5	;RP0=0, select bank0
  1014  07D1  1303               	bcf	3,6	;RP1=0, select bank0
  1015  07D2  082A               	movf	mostrarNum@col,w
  1016  07D3  3E94               	addlw	148
  1017  07D4  2FE9               	goto	L2
  1018  07D5                     l1365:	
  1019  07D5  3003               	movlw	3
  1020  07D6  0634               	xorwf	mostrarNum@fil,w
  1021  07D7  1D03               	btfss	3,2
  1022  07D8  2FEB               	goto	l129
  1023  07D9  082A               	movf	mostrarNum@col,w
  1024  07DA  3ED4               	addlw	212
  1025  07DB  00AD               	movwf	??_mostrarNum
  1026  07DC  3004               	movlw	4
  1027  07DD                     u1545:	
  1028  07DD  1003               	clrc
  1029  07DE  0CAD               	rrf	??_mostrarNum,f
  1030  07DF  3EFF               	addlw	-1
  1031  07E0  1D03               	skipz
  1032  07E1  2FDD               	goto	u1545
  1033  07E2  082D               	movf	??_mostrarNum,w
  1034  07E3  390F               	andlw	15
  1035  07E4  23A2               	fcall	_LCD_Write
  1036  07E5  1283               	bcf	3,5	;RP0=0, select bank0
  1037  07E6  1303               	bcf	3,6	;RP1=0, select bank0
  1038  07E7  082A               	movf	mostrarNum@col,w
  1039  07E8  3ED4               	addlw	212
  1040  07E9                     L2:	
  1041  07E9  390F               	andlw	15
  1042  07EA  23A2               	fcall	_LCD_Write
  1043  07EB                     l129:	
  1044                           
  1045                           ;main.c: 28:     LCD_puts(aux);
  1046  07EB  302E               	movlw	(low (mostrarNum@aux| 0))& (0+255)
  1047  07EC  22C9               	fcall	_LCD_puts
  1048  07ED  0008               	return
  1049  07EE                     __end_of_mostrarNum:	
  1050                           
  1051                           	psect	text2
  1052  0303                     __ptext2:	
  1053 ;; *************** function _numCifras *****************
  1054 ;; Defined at:
  1055 ;;		line 33 in file "main.c"
  1056 ;; Parameters:    Size  Location     Type
  1057 ;;  num             2    9[COMMON] int 
  1058 ;; Auto vars:     Size  Location     Type
  1059 ;;  contador        2   11[COMMON] int 
  1060 ;; Return value:  Size  Location     Type
  1061 ;;                  2    9[COMMON] int 
  1062 ;; Registers used:
  1063 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  1064 ;; Tracked objects:
  1065 ;;		On entry : 0/0
  1066 ;;		On exit  : 0/0
  1067 ;;		Unchanged: 0/0
  1068 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1069 ;;      Params:         2       0       0       0
  1070 ;;      Locals:         2       0       0       0
  1071 ;;      Temps:          0       0       0       0
  1072 ;;      Totals:         4       0       0       0
  1073 ;;Total ram usage:        4 bytes
  1074 ;; Hardware stack levels used:    1
  1075 ;; Hardware stack levels required when called:    1
  1076 ;; This function calls:
  1077 ;;		___awdiv
  1078 ;; This function is called by:
  1079 ;;		_mostrarNum
  1080 ;; This function uses a non-reentrant model
  1081 ;;
  1082                           
  1083                           
  1084                           ;psect for function _numCifras
  1085  0303                     _numCifras:	
  1086                           
  1087                           ;main.c: 34:     int contador = 1;
  1088                           
  1089                           ;incstack = 0
  1090                           ; Regs used in _numCifras: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  1091  0303  3001               	movlw	1
  1092  0304  00FB               	movwf	numCifras@contador
  1093  0305  3000               	movlw	0
  1094  0306  00FC               	movwf	numCifras@contador+1
  1095  0307                     l1273:	
  1096                           ;main.c: 35:     while (num / 10 > 0) {
  1097                           
  1098                           
  1099                           ;main.c: 35:     while (num / 10 > 0) {
  1100  0307  300A               	movlw	10
  1101  0308  00F0               	movwf	___awdiv@divisor
  1102  0309  3000               	movlw	0
  1103  030A  00F1               	movwf	___awdiv@divisor+1
  1104  030B  087A               	movf	numCifras@num+1,w
  1105  030C  00F3               	movwf	___awdiv@dividend+1
  1106  030D  0879               	movf	numCifras@num,w
  1107  030E  00F2               	movwf	___awdiv@dividend
  1108  030F  23F9               	fcall	___awdiv
  1109  0310  0871               	movf	?___awdiv+1,w
  1110  0311  3A80               	xorlw	128
  1111  0312  00FF               	movwf	127
  1112  0313  3080               	movlw	128
  1113  0314  027F               	subwf	127,w
  1114  0315  1D03               	skipz
  1115  0316  2B19               	goto	u1325
  1116  0317  3001               	movlw	1
  1117  0318  0270               	subwf	?___awdiv,w
  1118  0319                     u1325:	
  1119  0319  1C03               	btfss	3,0
  1120  031A  2B2F               	goto	l1275
  1121                           
  1122                           ;main.c: 37:         num = num / 10;
  1123  031B  300A               	movlw	10
  1124  031C  00F0               	movwf	___awdiv@divisor
  1125  031D  3000               	movlw	0
  1126  031E  00F1               	movwf	___awdiv@divisor+1
  1127  031F  087A               	movf	numCifras@num+1,w
  1128  0320  00F3               	movwf	___awdiv@dividend+1
  1129  0321  0879               	movf	numCifras@num,w
  1130  0322  00F2               	movwf	___awdiv@dividend
  1131  0323  23F9               	fcall	___awdiv
  1132  0324  0871               	movf	?___awdiv+1,w
  1133  0325  00FA               	movwf	numCifras@num+1
  1134  0326  0870               	movf	?___awdiv,w
  1135  0327  00F9               	movwf	numCifras@num
  1136                           
  1137                           ;main.c: 38:         contador++;
  1138  0328  3001               	movlw	1
  1139  0329  07FB               	addwf	numCifras@contador,f
  1140  032A  1803               	skipnc
  1141  032B  0AFC               	incf	numCifras@contador+1,f
  1142  032C  3000               	movlw	0
  1143  032D  07FC               	addwf	numCifras@contador+1,f
  1144  032E  2B07               	goto	l1273
  1145  032F                     l1275:	
  1146                           
  1147                           ;main.c: 40:     return contador;
  1148  032F  087C               	movf	numCifras@contador+1,w
  1149  0330  00FA               	movwf	?_numCifras+1
  1150  0331  087B               	movf	numCifras@contador,w
  1151  0332  00F9               	movwf	?_numCifras
  1152  0333  0008               	return
  1153  0334                     __end_of_numCifras:	
  1154                           
  1155                           	psect	text3
  1156  03F9                     __ptext3:	
  1157 ;; *************** function ___awdiv *****************
  1158 ;; Defined at:
  1159 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\awdiv.c"
  1160 ;; Parameters:    Size  Location     Type
  1161 ;;  divisor         2    0[COMMON] int 
  1162 ;;  dividend        2    2[COMMON] int 
  1163 ;; Auto vars:     Size  Location     Type
  1164 ;;  quotient        2    7[COMMON] int 
  1165 ;;  sign            1    6[COMMON] unsigned char 
  1166 ;;  counter         1    5[COMMON] unsigned char 
  1167 ;; Return value:  Size  Location     Type
  1168 ;;                  2    0[COMMON] int 
  1169 ;; Registers used:
  1170 ;;		wreg, status,2, status,0
  1171 ;; Tracked objects:
  1172 ;;		On entry : 0/0
  1173 ;;		On exit  : 0/0
  1174 ;;		Unchanged: 0/0
  1175 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1176 ;;      Params:         4       0       0       0
  1177 ;;      Locals:         4       0       0       0
  1178 ;;      Temps:          1       0       0       0
  1179 ;;      Totals:         9       0       0       0
  1180 ;;Total ram usage:        9 bytes
  1181 ;; Hardware stack levels used:    1
  1182 ;; This function calls:
  1183 ;;		Nothing
  1184 ;; This function is called by:
  1185 ;;		_numCifras
  1186 ;; This function uses a non-reentrant model
  1187 ;;
  1188                           
  1189                           
  1190                           ;psect for function ___awdiv
  1191  03F9                     ___awdiv:	
  1192                           
  1193                           ;incstack = 0
  1194                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  1195  03F9  01F6               	clrf	___awdiv@sign
  1196  03FA  1FF1               	btfss	___awdiv@divisor+1,7
  1197  03FB  2C03               	goto	l1161
  1198  03FC  09F0               	comf	___awdiv@divisor,f
  1199  03FD  09F1               	comf	___awdiv@divisor+1,f
  1200  03FE  0AF0               	incf	___awdiv@divisor,f
  1201  03FF  1903               	skipnz
  1202  0400  0AF1               	incf	___awdiv@divisor+1,f
  1203  0401  01F6               	clrf	___awdiv@sign
  1204  0402  0AF6               	incf	___awdiv@sign,f
  1205  0403                     l1161:	
  1206  0403  1FF3               	btfss	___awdiv@dividend+1,7
  1207  0404  2C0E               	goto	l1167
  1208  0405  09F2               	comf	___awdiv@dividend,f
  1209  0406  09F3               	comf	___awdiv@dividend+1,f
  1210  0407  0AF2               	incf	___awdiv@dividend,f
  1211  0408  1903               	skipnz
  1212  0409  0AF3               	incf	___awdiv@dividend+1,f
  1213  040A  3001               	movlw	1
  1214  040B  00F4               	movwf	??___awdiv
  1215  040C  0874               	movf	??___awdiv,w
  1216  040D  06F6               	xorwf	___awdiv@sign,f
  1217  040E                     l1167:	
  1218  040E  01F7               	clrf	___awdiv@quotient
  1219  040F  01F8               	clrf	___awdiv@quotient+1
  1220  0410  0870               	movf	___awdiv@divisor,w
  1221  0411  0471               	iorwf	___awdiv@divisor+1,w
  1222  0412  1903               	btfsc	3,2
  1223  0413  2C45               	goto	l1189
  1224  0414  01F5               	clrf	___awdiv@counter
  1225  0415  0AF5               	incf	___awdiv@counter,f
  1226  0416                     l1177:	
  1227  0416  1BF1               	btfsc	___awdiv@divisor+1,7
  1228  0417  2C24               	goto	l1179
  1229  0418  3001               	movlw	1
  1230  0419                     u1165:	
  1231  0419  1003               	clrc
  1232  041A  0DF0               	rlf	___awdiv@divisor,f
  1233  041B  0DF1               	rlf	___awdiv@divisor+1,f
  1234  041C  3EFF               	addlw	-1
  1235  041D  1D03               	skipz
  1236  041E  2C19               	goto	u1165
  1237  041F  3001               	movlw	1
  1238  0420  00F4               	movwf	??___awdiv
  1239  0421  0874               	movf	??___awdiv,w
  1240  0422  07F5               	addwf	___awdiv@counter,f
  1241  0423  2C16               	goto	l1177
  1242  0424                     l1179:	
  1243  0424  3001               	movlw	1
  1244  0425                     u1185:	
  1245  0425  1003               	clrc
  1246  0426  0DF7               	rlf	___awdiv@quotient,f
  1247  0427  0DF8               	rlf	___awdiv@quotient+1,f
  1248  0428  3EFF               	addlw	-1
  1249  0429  1D03               	skipz
  1250  042A  2C25               	goto	u1185
  1251  042B  0871               	movf	___awdiv@divisor+1,w
  1252  042C  0273               	subwf	___awdiv@dividend+1,w
  1253  042D  1D03               	skipz
  1254  042E  2C31               	goto	u1195
  1255  042F  0870               	movf	___awdiv@divisor,w
  1256  0430  0272               	subwf	___awdiv@dividend,w
  1257  0431                     u1195:	
  1258  0431  1C03               	skipc
  1259  0432  2C3A               	goto	l1185
  1260  0433  0870               	movf	___awdiv@divisor,w
  1261  0434  02F2               	subwf	___awdiv@dividend,f
  1262  0435  0871               	movf	___awdiv@divisor+1,w
  1263  0436  1C03               	skipc
  1264  0437  03F3               	decf	___awdiv@dividend+1,f
  1265  0438  02F3               	subwf	___awdiv@dividend+1,f
  1266  0439  1477               	bsf	___awdiv@quotient,0
  1267  043A                     l1185:	
  1268  043A  3001               	movlw	1
  1269  043B                     u1205:	
  1270  043B  1003               	clrc
  1271  043C  0CF1               	rrf	___awdiv@divisor+1,f
  1272  043D  0CF0               	rrf	___awdiv@divisor,f
  1273  043E  3EFF               	addlw	-1
  1274  043F  1D03               	skipz
  1275  0440  2C3B               	goto	u1205
  1276  0441  3001               	movlw	1
  1277  0442  02F5               	subwf	___awdiv@counter,f
  1278  0443  1D03               	btfss	3,2
  1279  0444  2C24               	goto	l1179
  1280  0445                     l1189:	
  1281  0445  0876               	movf	___awdiv@sign,w
  1282  0446  1903               	btfsc	3,2
  1283  0447  2C4D               	goto	l1193
  1284  0448  09F7               	comf	___awdiv@quotient,f
  1285  0449  09F8               	comf	___awdiv@quotient+1,f
  1286  044A  0AF7               	incf	___awdiv@quotient,f
  1287  044B  1903               	skipnz
  1288  044C  0AF8               	incf	___awdiv@quotient+1,f
  1289  044D                     l1193:	
  1290  044D  0878               	movf	___awdiv@quotient+1,w
  1291  044E  00F1               	movwf	?___awdiv+1
  1292  044F  0877               	movf	___awdiv@quotient,w
  1293  0450  00F0               	movwf	?___awdiv
  1294  0451  0008               	return
  1295  0452                     __end_of___awdiv:	
  1296                           
  1297                           	psect	text4
  1298  02E3                     __ptext4:	
  1299 ;; *************** function _itoa *****************
  1300 ;; Defined at:
  1301 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\itoa.c"
  1302 ;; Parameters:    Size  Location     Type
  1303 ;;  buf             1    wreg     PTR unsigned char 
  1304 ;;		 -> mostrarNum@aux(4), 
  1305 ;;  val             2    4[BANK0 ] int 
  1306 ;;  base            2    6[BANK0 ] int 
  1307 ;; Auto vars:     Size  Location     Type
  1308 ;;  buf             1    9[BANK0 ] PTR unsigned char 
  1309 ;;		 -> mostrarNum@aux(4), 
  1310 ;;  cp              1    0        PTR unsigned char 
  1311 ;;		 -> mostrarNum@aux(4), 
  1312 ;; Return value:  Size  Location     Type
  1313 ;;                  1    wreg      PTR unsigned char 
  1314 ;; Registers used:
  1315 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1316 ;; Tracked objects:
  1317 ;;		On entry : 0/0
  1318 ;;		On exit  : 0/0
  1319 ;;		Unchanged: 0/0
  1320 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1321 ;;      Params:         0       4       0       0
  1322 ;;      Locals:         0       2       0       0
  1323 ;;      Temps:          1       0       0       0
  1324 ;;      Totals:         1       6       0       0
  1325 ;;Total ram usage:        7 bytes
  1326 ;; Hardware stack levels used:    1
  1327 ;; Hardware stack levels required when called:    2
  1328 ;; This function calls:
  1329 ;;		_utoa
  1330 ;; This function is called by:
  1331 ;;		_mostrarNum
  1332 ;; This function uses a non-reentrant model
  1333 ;;
  1334                           
  1335                           
  1336                           ;psect for function _itoa
  1337  02E3                     _itoa:	
  1338                           
  1339                           ;incstack = 0
  1340                           ; Regs used in _itoa: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1341                           ;itoa@buf stored from wreg
  1342  02E3  1283               	bcf	3,5	;RP0=0, select bank0
  1343  02E4  1303               	bcf	3,6	;RP1=0, select bank0
  1344  02E5  00A9               	movwf	itoa@buf
  1345  02E6  1FA5               	btfss	itoa@val+1,7
  1346  02E7  2AF8               	goto	l1263
  1347  02E8  302D               	movlw	45
  1348  02E9  00FD               	movwf	??_itoa
  1349  02EA  0829               	movf	itoa@buf,w
  1350  02EB  0084               	movwf	4
  1351  02EC  087D               	movf	??_itoa,w
  1352  02ED  1383               	bcf	3,7	;select IRP bank0
  1353  02EE  0080               	movwf	0
  1354  02EF  3001               	movlw	1
  1355  02F0  00FD               	movwf	??_itoa
  1356  02F1  087D               	movf	??_itoa,w
  1357  02F2  07A9               	addwf	itoa@buf,f
  1358  02F3  09A4               	comf	itoa@val,f
  1359  02F4  09A5               	comf	itoa@val+1,f
  1360  02F5  0AA4               	incf	itoa@val,f
  1361  02F6  1903               	skipnz
  1362  02F7  0AA5               	incf	itoa@val+1,f
  1363  02F8                     l1263:	
  1364  02F8  0825               	movf	itoa@val+1,w
  1365  02F9  00F9               	movwf	utoa@val+1
  1366  02FA  0824               	movf	itoa@val,w
  1367  02FB  00F8               	movwf	utoa@val
  1368  02FC  0827               	movf	itoa@base+1,w
  1369  02FD  00FB               	movwf	utoa@base+1
  1370  02FE  0826               	movf	itoa@base,w
  1371  02FF  00FA               	movwf	utoa@base
  1372  0300  0829               	movf	itoa@buf,w
  1373  0301  2452               	fcall	_utoa
  1374  0302  0008               	return
  1375  0303                     __end_of_itoa:	
  1376                           
  1377                           	psect	text5
  1378  0452                     __ptext5:	
  1379 ;; *************** function _utoa *****************
  1380 ;; Defined at:
  1381 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\itoa.c"
  1382 ;; Parameters:    Size  Location     Type
  1383 ;;  buf             1    wreg     PTR unsigned char 
  1384 ;;		 -> mostrarNum@aux(4), 
  1385 ;;  val             2    8[COMMON] unsigned int 
  1386 ;;  base            2   10[COMMON] int 
  1387 ;; Auto vars:     Size  Location     Type
  1388 ;;  buf             1    3[BANK0 ] PTR unsigned char 
  1389 ;;		 -> mostrarNum@aux(4), 
  1390 ;;  v               2    0[BANK0 ] unsigned int 
  1391 ;;  c               1    2[BANK0 ] unsigned char 
  1392 ;; Return value:  Size  Location     Type
  1393 ;;                  1    wreg      PTR unsigned char 
  1394 ;; Registers used:
  1395 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1396 ;; Tracked objects:
  1397 ;;		On entry : 0/0
  1398 ;;		On exit  : 0/0
  1399 ;;		Unchanged: 0/0
  1400 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1401 ;;      Params:         4       0       0       0
  1402 ;;      Locals:         0       4       0       0
  1403 ;;      Temps:          1       0       0       0
  1404 ;;      Totals:         5       4       0       0
  1405 ;;Total ram usage:        9 bytes
  1406 ;; Hardware stack levels used:    1
  1407 ;; Hardware stack levels required when called:    1
  1408 ;; This function calls:
  1409 ;;		___lwdiv
  1410 ;;		___lwmod
  1411 ;; This function is called by:
  1412 ;;		_itoa
  1413 ;; This function uses a non-reentrant model
  1414 ;;
  1415                           
  1416                           
  1417                           ;psect for function _utoa
  1418  0452                     _utoa:	
  1419                           
  1420                           ;incstack = 0
  1421                           ; Regs used in _utoa: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1422                           ;utoa@buf stored from wreg
  1423  0452  1283               	bcf	3,5	;RP0=0, select bank0
  1424  0453  1303               	bcf	3,6	;RP1=0, select bank0
  1425  0454  00A3               	movwf	utoa@buf
  1426  0455  0879               	movf	utoa@val+1,w
  1427  0456  00A1               	movwf	utoa@v+1
  1428  0457  0878               	movf	utoa@val,w
  1429  0458  00A0               	movwf	utoa@v
  1430  0459                     l1199:	
  1431  0459  087B               	movf	utoa@base+1,w
  1432  045A  00F1               	movwf	___lwdiv@divisor+1
  1433  045B  087A               	movf	utoa@base,w
  1434  045C  00F0               	movwf	___lwdiv@divisor
  1435  045D  0821               	movf	utoa@v+1,w
  1436  045E  00F3               	movwf	___lwdiv@dividend+1
  1437  045F  0820               	movf	utoa@v,w
  1438  0460  00F2               	movwf	___lwdiv@dividend
  1439  0461  2366               	fcall	___lwdiv
  1440  0462  0871               	movf	?___lwdiv+1,w
  1441  0463  1283               	bcf	3,5	;RP0=0, select bank0
  1442  0464  1303               	bcf	3,6	;RP1=0, select bank0
  1443  0465  00A1               	movwf	utoa@v+1
  1444  0466  0870               	movf	?___lwdiv,w
  1445  0467  00A0               	movwf	utoa@v
  1446  0468  3001               	movlw	1
  1447  0469  00FC               	movwf	??_utoa
  1448  046A  087C               	movf	??_utoa,w
  1449  046B  07A3               	addwf	utoa@buf,f
  1450  046C  0820               	movf	utoa@v,w
  1451  046D  0421               	iorwf	utoa@v+1,w
  1452  046E  1D03               	btfss	3,2
  1453  046F  2C59               	goto	l1199
  1454  0470  0823               	movf	utoa@buf,w
  1455  0471  0084               	movwf	4
  1456  0472  1383               	bcf	3,7	;select IRP bank0
  1457  0473  0180               	clrf	0
  1458  0474  3001               	movlw	1
  1459  0475  02A3               	subwf	utoa@buf,f
  1460  0476                     l1209:	
  1461  0476  087B               	movf	utoa@base+1,w
  1462  0477  00F1               	movwf	___lwmod@divisor+1
  1463  0478  087A               	movf	utoa@base,w
  1464  0479  00F0               	movwf	___lwmod@divisor
  1465  047A  0879               	movf	utoa@val+1,w
  1466  047B  00F3               	movwf	___lwmod@dividend+1
  1467  047C  0878               	movf	utoa@val,w
  1468  047D  00F2               	movwf	___lwmod@dividend
  1469  047E  2334               	fcall	___lwmod
  1470  047F  0870               	movf	?___lwmod,w
  1471  0480  00FC               	movwf	??_utoa
  1472  0481  087C               	movf	??_utoa,w
  1473  0482  1283               	bcf	3,5	;RP0=0, select bank0
  1474  0483  1303               	bcf	3,6	;RP1=0, select bank0
  1475  0484  00A2               	movwf	utoa@c
  1476  0485  087B               	movf	utoa@base+1,w
  1477  0486  00F1               	movwf	___lwdiv@divisor+1
  1478  0487  087A               	movf	utoa@base,w
  1479  0488  00F0               	movwf	___lwdiv@divisor
  1480  0489  0879               	movf	utoa@val+1,w
  1481  048A  00F3               	movwf	___lwdiv@dividend+1
  1482  048B  0878               	movf	utoa@val,w
  1483  048C  00F2               	movwf	___lwdiv@dividend
  1484  048D  2366               	fcall	___lwdiv
  1485  048E  0871               	movf	?___lwdiv+1,w
  1486  048F  00F9               	movwf	utoa@val+1
  1487  0490  0870               	movf	?___lwdiv,w
  1488  0491  00F8               	movwf	utoa@val
  1489  0492  300A               	movlw	10
  1490  0493  1283               	bcf	3,5	;RP0=0, select bank0
  1491  0494  1303               	bcf	3,6	;RP1=0, select bank0
  1492  0495  0222               	subwf	utoa@c,w
  1493  0496  1C03               	skipc
  1494  0497  2C9C               	goto	l687
  1495  0498  3007               	movlw	7
  1496  0499  00FC               	movwf	??_utoa
  1497  049A  087C               	movf	??_utoa,w
  1498  049B  07A2               	addwf	utoa@c,f
  1499  049C                     l687:	
  1500  049C  3030               	movlw	48
  1501  049D  00FC               	movwf	??_utoa
  1502  049E  087C               	movf	??_utoa,w
  1503  049F  07A2               	addwf	utoa@c,f
  1504  04A0  0822               	movf	utoa@c,w
  1505  04A1  00FC               	movwf	??_utoa
  1506  04A2  0823               	movf	utoa@buf,w
  1507  04A3  0084               	movwf	4
  1508  04A4  087C               	movf	??_utoa,w
  1509  04A5  1383               	bcf	3,7	;select IRP bank0
  1510  04A6  0080               	movwf	0
  1511  04A7  3001               	movlw	1
  1512  04A8  02A3               	subwf	utoa@buf,f
  1513  04A9  0878               	movf	utoa@val,w
  1514  04AA  0479               	iorwf	utoa@val+1,w
  1515  04AB  1D03               	btfss	3,2
  1516  04AC  2C76               	goto	l1209
  1517                           
  1518                           ;	Return value of _utoa is never used
  1519  04AD  3001               	movlw	1
  1520  04AE  00FC               	movwf	??_utoa
  1521  04AF  087C               	movf	??_utoa,w
  1522  04B0  07A3               	addwf	utoa@buf,f
  1523  04B1  0008               	return
  1524  04B2                     __end_of_utoa:	
  1525                           
  1526                           	psect	text6
  1527  0334                     __ptext6:	
  1528 ;; *************** function ___lwmod *****************
  1529 ;; Defined at:
  1530 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\lwmod.c"
  1531 ;; Parameters:    Size  Location     Type
  1532 ;;  divisor         2    0[COMMON] unsigned int 
  1533 ;;  dividend        2    2[COMMON] unsigned int 
  1534 ;; Auto vars:     Size  Location     Type
  1535 ;;  counter         1    5[COMMON] unsigned char 
  1536 ;; Return value:  Size  Location     Type
  1537 ;;                  2    0[COMMON] unsigned int 
  1538 ;; Registers used:
  1539 ;;		wreg, status,2, status,0
  1540 ;; Tracked objects:
  1541 ;;		On entry : 0/0
  1542 ;;		On exit  : 0/0
  1543 ;;		Unchanged: 0/0
  1544 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1545 ;;      Params:         4       0       0       0
  1546 ;;      Locals:         1       0       0       0
  1547 ;;      Temps:          1       0       0       0
  1548 ;;      Totals:         6       0       0       0
  1549 ;;Total ram usage:        6 bytes
  1550 ;; Hardware stack levels used:    1
  1551 ;; This function calls:
  1552 ;;		Nothing
  1553 ;; This function is called by:
  1554 ;;		_utoa
  1555 ;; This function uses a non-reentrant model
  1556 ;;
  1557                           
  1558                           
  1559                           ;psect for function ___lwmod
  1560  0334                     ___lwmod:	
  1561                           
  1562                           ;incstack = 0
  1563                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  1564  0334  0870               	movf	___lwmod@divisor,w
  1565  0335  0471               	iorwf	___lwmod@divisor+1,w
  1566  0336  1903               	btfsc	3,2
  1567  0337  2B61               	goto	l1133
  1568  0338  01F5               	clrf	___lwmod@counter
  1569  0339  0AF5               	incf	___lwmod@counter,f
  1570  033A                     l1123:	
  1571  033A  1BF1               	btfsc	___lwmod@divisor+1,7
  1572  033B  2B48               	goto	l1125
  1573  033C  3001               	movlw	1
  1574  033D                     u1025:	
  1575  033D  1003               	clrc
  1576  033E  0DF0               	rlf	___lwmod@divisor,f
  1577  033F  0DF1               	rlf	___lwmod@divisor+1,f
  1578  0340  3EFF               	addlw	-1
  1579  0341  1D03               	skipz
  1580  0342  2B3D               	goto	u1025
  1581  0343  3001               	movlw	1
  1582  0344  00F4               	movwf	??___lwmod
  1583  0345  0874               	movf	??___lwmod,w
  1584  0346  07F5               	addwf	___lwmod@counter,f
  1585  0347  2B3A               	goto	l1123
  1586  0348                     l1125:	
  1587  0348  0871               	movf	___lwmod@divisor+1,w
  1588  0349  0273               	subwf	___lwmod@dividend+1,w
  1589  034A  1D03               	skipz
  1590  034B  2B4E               	goto	u1045
  1591  034C  0870               	movf	___lwmod@divisor,w
  1592  034D  0272               	subwf	___lwmod@dividend,w
  1593  034E                     u1045:	
  1594  034E  1C03               	skipc
  1595  034F  2B56               	goto	l1129
  1596  0350  0870               	movf	___lwmod@divisor,w
  1597  0351  02F2               	subwf	___lwmod@dividend,f
  1598  0352  0871               	movf	___lwmod@divisor+1,w
  1599  0353  1C03               	skipc
  1600  0354  03F3               	decf	___lwmod@dividend+1,f
  1601  0355  02F3               	subwf	___lwmod@dividend+1,f
  1602  0356                     l1129:	
  1603  0356  3001               	movlw	1
  1604  0357                     u1055:	
  1605  0357  1003               	clrc
  1606  0358  0CF1               	rrf	___lwmod@divisor+1,f
  1607  0359  0CF0               	rrf	___lwmod@divisor,f
  1608  035A  3EFF               	addlw	-1
  1609  035B  1D03               	skipz
  1610  035C  2B57               	goto	u1055
  1611  035D  3001               	movlw	1
  1612  035E  02F5               	subwf	___lwmod@counter,f
  1613  035F  1D03               	btfss	3,2
  1614  0360  2B48               	goto	l1125
  1615  0361                     l1133:	
  1616  0361  0873               	movf	___lwmod@dividend+1,w
  1617  0362  00F1               	movwf	?___lwmod+1
  1618  0363  0872               	movf	___lwmod@dividend,w
  1619  0364  00F0               	movwf	?___lwmod
  1620  0365  0008               	return
  1621  0366                     __end_of___lwmod:	
  1622                           
  1623                           	psect	text7
  1624  0366                     __ptext7:	
  1625 ;; *************** function ___lwdiv *****************
  1626 ;; Defined at:
  1627 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\lwdiv.c"
  1628 ;; Parameters:    Size  Location     Type
  1629 ;;  divisor         2    0[COMMON] unsigned int 
  1630 ;;  dividend        2    2[COMMON] unsigned int 
  1631 ;; Auto vars:     Size  Location     Type
  1632 ;;  quotient        2    5[COMMON] unsigned int 
  1633 ;;  counter         1    7[COMMON] unsigned char 
  1634 ;; Return value:  Size  Location     Type
  1635 ;;                  2    0[COMMON] unsigned int 
  1636 ;; Registers used:
  1637 ;;		wreg, status,2, status,0
  1638 ;; Tracked objects:
  1639 ;;		On entry : 0/0
  1640 ;;		On exit  : 0/0
  1641 ;;		Unchanged: 0/0
  1642 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1643 ;;      Params:         4       0       0       0
  1644 ;;      Locals:         3       0       0       0
  1645 ;;      Temps:          1       0       0       0
  1646 ;;      Totals:         8       0       0       0
  1647 ;;Total ram usage:        8 bytes
  1648 ;; Hardware stack levels used:    1
  1649 ;; This function calls:
  1650 ;;		Nothing
  1651 ;; This function is called by:
  1652 ;;		_utoa
  1653 ;; This function uses a non-reentrant model
  1654 ;;
  1655                           
  1656                           
  1657                           ;psect for function ___lwdiv
  1658  0366                     ___lwdiv:	
  1659                           
  1660                           ;incstack = 0
  1661                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  1662  0366  01F5               	clrf	___lwdiv@quotient
  1663  0367  01F6               	clrf	___lwdiv@quotient+1
  1664  0368  0870               	movf	___lwdiv@divisor,w
  1665  0369  0471               	iorwf	___lwdiv@divisor+1,w
  1666  036A  1903               	btfsc	3,2
  1667  036B  2B9D               	goto	l1111
  1668  036C  01F7               	clrf	___lwdiv@counter
  1669  036D  0AF7               	incf	___lwdiv@counter,f
  1670  036E                     l1099:	
  1671  036E  1BF1               	btfsc	___lwdiv@divisor+1,7
  1672  036F  2B7C               	goto	l1101
  1673  0370  3001               	movlw	1
  1674  0371                     u955:	
  1675  0371  1003               	clrc
  1676  0372  0DF0               	rlf	___lwdiv@divisor,f
  1677  0373  0DF1               	rlf	___lwdiv@divisor+1,f
  1678  0374  3EFF               	addlw	-1
  1679  0375  1D03               	skipz
  1680  0376  2B71               	goto	u955
  1681  0377  3001               	movlw	1
  1682  0378  00F4               	movwf	??___lwdiv
  1683  0379  0874               	movf	??___lwdiv,w
  1684  037A  07F7               	addwf	___lwdiv@counter,f
  1685  037B  2B6E               	goto	l1099
  1686  037C                     l1101:	
  1687  037C  3001               	movlw	1
  1688  037D                     u975:	
  1689  037D  1003               	clrc
  1690  037E  0DF5               	rlf	___lwdiv@quotient,f
  1691  037F  0DF6               	rlf	___lwdiv@quotient+1,f
  1692  0380  3EFF               	addlw	-1
  1693  0381  1D03               	skipz
  1694  0382  2B7D               	goto	u975
  1695  0383  0871               	movf	___lwdiv@divisor+1,w
  1696  0384  0273               	subwf	___lwdiv@dividend+1,w
  1697  0385  1D03               	skipz
  1698  0386  2B89               	goto	u985
  1699  0387  0870               	movf	___lwdiv@divisor,w
  1700  0388  0272               	subwf	___lwdiv@dividend,w
  1701  0389                     u985:	
  1702  0389  1C03               	skipc
  1703  038A  2B92               	goto	l1107
  1704  038B  0870               	movf	___lwdiv@divisor,w
  1705  038C  02F2               	subwf	___lwdiv@dividend,f
  1706  038D  0871               	movf	___lwdiv@divisor+1,w
  1707  038E  1C03               	skipc
  1708  038F  03F3               	decf	___lwdiv@dividend+1,f
  1709  0390  02F3               	subwf	___lwdiv@dividend+1,f
  1710  0391  1475               	bsf	___lwdiv@quotient,0
  1711  0392                     l1107:	
  1712  0392  3001               	movlw	1
  1713  0393                     u995:	
  1714  0393  1003               	clrc
  1715  0394  0CF1               	rrf	___lwdiv@divisor+1,f
  1716  0395  0CF0               	rrf	___lwdiv@divisor,f
  1717  0396  3EFF               	addlw	-1
  1718  0397  1D03               	skipz
  1719  0398  2B93               	goto	u995
  1720  0399  3001               	movlw	1
  1721  039A  02F7               	subwf	___lwdiv@counter,f
  1722  039B  1D03               	btfss	3,2
  1723  039C  2B7C               	goto	l1101
  1724  039D                     l1111:	
  1725  039D  0876               	movf	___lwdiv@quotient+1,w
  1726  039E  00F1               	movwf	?___lwdiv+1
  1727  039F  0875               	movf	___lwdiv@quotient,w
  1728  03A0  00F0               	movwf	?___lwdiv
  1729  03A1  0008               	return
  1730  03A2                     __end_of___lwdiv:	
  1731                           
  1732                           	psect	text8
  1733  02C9                     __ptext8:	
  1734 ;; *************** function _LCD_puts *****************
  1735 ;; Defined at:
  1736 ;;		line 136 in file "lcd.c"
  1737 ;; Parameters:    Size  Location     Type
  1738 ;;  a               1    wreg     PTR unsigned char 
  1739 ;;		 -> mostrarNum@aux(4), 
  1740 ;; Auto vars:     Size  Location     Type
  1741 ;;  a               1   11[COMMON] PTR unsigned char 
  1742 ;;		 -> mostrarNum@aux(4), 
  1743 ;;  i               2    9[COMMON] int 
  1744 ;; Return value:  Size  Location     Type
  1745 ;;                  1    wreg      void 
  1746 ;; Registers used:
  1747 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1748 ;; Tracked objects:
  1749 ;;		On entry : 0/0
  1750 ;;		On exit  : 0/0
  1751 ;;		Unchanged: 0/0
  1752 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1753 ;;      Params:         0       0       0       0
  1754 ;;      Locals:         3       0       0       0
  1755 ;;      Temps:          1       0       0       0
  1756 ;;      Totals:         4       0       0       0
  1757 ;;Total ram usage:        4 bytes
  1758 ;; Hardware stack levels used:    1
  1759 ;; Hardware stack levels required when called:    2
  1760 ;; This function calls:
  1761 ;;		_LCD_putc
  1762 ;; This function is called by:
  1763 ;;		_mostrarNum
  1764 ;; This function uses a non-reentrant model
  1765 ;;
  1766                           
  1767                           
  1768                           ;psect for function _LCD_puts
  1769  02C9                     _LCD_puts:	
  1770                           
  1771                           ;incstack = 0
  1772                           ; Regs used in _LCD_puts: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1773                           ;LCD_puts@a stored from wreg
  1774  02C9  00FB               	movwf	LCD_puts@a
  1775                           
  1776                           ;lcd.c: 138:     for ( int i = 0; a[i] != '\0'; ++i ) {
  1777  02CA  01F9               	clrf	LCD_puts@i
  1778  02CB  01FA               	clrf	LCD_puts@i+1
  1779  02CC                     l1243:	
  1780  02CC  0879               	movf	LCD_puts@i,w
  1781  02CD  077B               	addwf	LCD_puts@a,w
  1782  02CE  00F8               	movwf	??_LCD_puts
  1783  02CF  0878               	movf	??_LCD_puts,w
  1784  02D0  0084               	movwf	4
  1785  02D1  1383               	bcf	3,7	;select IRP bank0
  1786  02D2  0800               	movf	0,w
  1787  02D3  1903               	btfsc	3,2
  1788  02D4  0008               	return
  1789                           
  1790                           ;lcd.c: 139:         LCD_putc(a[i]);
  1791  02D5  0879               	movf	LCD_puts@i,w
  1792  02D6  077B               	addwf	LCD_puts@a,w
  1793  02D7  00F8               	movwf	??_LCD_puts
  1794  02D8  0878               	movf	??_LCD_puts,w
  1795  02D9  0084               	movwf	4
  1796  02DA  0800               	movf	0,w
  1797  02DB  25A5               	fcall	_LCD_putc
  1798                           
  1799                           ;lcd.c: 140:     }
  1800  02DC  3001               	movlw	1
  1801  02DD  07F9               	addwf	LCD_puts@i,f
  1802  02DE  1803               	skipnc
  1803  02DF  0AFA               	incf	LCD_puts@i+1,f
  1804  02E0  3000               	movlw	0
  1805  02E1  07FA               	addwf	LCD_puts@i+1,f
  1806  02E2  2ACC               	goto	l1243
  1807  02E3                     __end_of_LCD_puts:	
  1808                           
  1809                           	psect	text9
  1810  02B3                     __ptext9:	
  1811 ;; *************** function _LCD_putrs *****************
  1812 ;; Defined at:
  1813 ;;		line 144 in file "lcd.c"
  1814 ;; Parameters:    Size  Location     Type
  1815 ;;  a               1    wreg     PTR const unsigned char 
  1816 ;;		 -> STR_2(17), STR_1(6), 
  1817 ;; Auto vars:     Size  Location     Type
  1818 ;;  a               1   10[COMMON] PTR const unsigned char 
  1819 ;;		 -> STR_2(17), STR_1(6), 
  1820 ;;  i               2    8[COMMON] int 
  1821 ;; Return value:  Size  Location     Type
  1822 ;;                  1    wreg      void 
  1823 ;; Registers used:
  1824 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1825 ;; Tracked objects:
  1826 ;;		On entry : 0/0
  1827 ;;		On exit  : 0/0
  1828 ;;		Unchanged: 0/0
  1829 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1830 ;;      Params:         0       0       0       0
  1831 ;;      Locals:         3       0       0       0
  1832 ;;      Temps:          0       0       0       0
  1833 ;;      Totals:         3       0       0       0
  1834 ;;Total ram usage:        3 bytes
  1835 ;; Hardware stack levels used:    1
  1836 ;; Hardware stack levels required when called:    2
  1837 ;; This function calls:
  1838 ;;		_LCD_putc
  1839 ;; This function is called by:
  1840 ;;		_mostrarNum
  1841 ;;		_main
  1842 ;; This function uses a non-reentrant model
  1843 ;;
  1844                           
  1845                           
  1846                           ;psect for function _LCD_putrs
  1847  02B3                     _LCD_putrs:	
  1848                           
  1849                           ;incstack = 0
  1850                           ; Regs used in _LCD_putrs: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1851                           ;LCD_putrs@a stored from wreg
  1852  02B3  00FA               	movwf	LCD_putrs@a
  1853                           
  1854                           ;lcd.c: 146:     for ( int i = 0; a[i] != '\0'; ++i ) {
  1855  02B4  01F8               	clrf	LCD_putrs@i
  1856  02B5  01F9               	clrf	LCD_putrs@i+1
  1857  02B6                     l1251:	
  1858  02B6  0878               	movf	LCD_putrs@i,w
  1859  02B7  077A               	addwf	LCD_putrs@a,w
  1860  02B8  0084               	movwf	4
  1861  02B9  2001               	fcall	stringdir
  1862  02BA  3A00               	xorlw	0
  1863  02BB  1903               	btfsc	3,2
  1864  02BC  0008               	return
  1865                           
  1866                           ;lcd.c: 147:         LCD_putc(a[i]);
  1867  02BD  0878               	movf	LCD_putrs@i,w
  1868  02BE  077A               	addwf	LCD_putrs@a,w
  1869  02BF  0084               	movwf	4
  1870  02C0  2001               	fcall	stringdir
  1871  02C1  25A5               	fcall	_LCD_putc
  1872                           
  1873                           ;lcd.c: 148:     }
  1874  02C2  3001               	movlw	1
  1875  02C3  07F8               	addwf	LCD_putrs@i,f
  1876  02C4  1803               	skipnc
  1877  02C5  0AF9               	incf	LCD_putrs@i+1,f
  1878  02C6  3000               	movlw	0
  1879  02C7  07F9               	addwf	LCD_putrs@i+1,f
  1880  02C8  2AB6               	goto	l1251
  1881  02C9                     __end_of_LCD_putrs:	
  1882                           
  1883                           	psect	text10
  1884  05A5                     __ptext10:	
  1885 ;; *************** function _LCD_putc *****************
  1886 ;; Defined at:
  1887 ;;		line 119 in file "lcd.c"
  1888 ;; Parameters:    Size  Location     Type
  1889 ;;  c               1    wreg     unsigned char 
  1890 ;; Auto vars:     Size  Location     Type
  1891 ;;  c               1    7[COMMON] unsigned char 
  1892 ;; Return value:  Size  Location     Type
  1893 ;;                  1    wreg      void 
  1894 ;; Registers used:
  1895 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1896 ;; Tracked objects:
  1897 ;;		On entry : 0/0
  1898 ;;		On exit  : 0/0
  1899 ;;		Unchanged: 0/0
  1900 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1901 ;;      Params:         0       0       0       0
  1902 ;;      Locals:         1       0       0       0
  1903 ;;      Temps:          3       0       0       0
  1904 ;;      Totals:         4       0       0       0
  1905 ;;Total ram usage:        4 bytes
  1906 ;; Hardware stack levels used:    1
  1907 ;; Hardware stack levels required when called:    1
  1908 ;; This function calls:
  1909 ;;		_LCD_Out
  1910 ;; This function is called by:
  1911 ;;		_LCD_puts
  1912 ;;		_LCD_putrs
  1913 ;; This function uses a non-reentrant model
  1914 ;;
  1915                           
  1916                           
  1917                           ;psect for function _LCD_putc
  1918  05A5                     _LCD_putc:	
  1919                           
  1920                           ;incstack = 0
  1921                           ; Regs used in _LCD_putc: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1922                           ;LCD_putc@c stored from wreg
  1923  05A5  00F7               	movwf	LCD_putc@c
  1924                           
  1925                           ;lcd.c: 121:    *(lcd.PORT) |= 1 << lcd.RS;
  1926  05A6  3001               	movlw	1
  1927  05A7  00F4               	movwf	??_LCD_putc
  1928  05A8  1283               	bcf	3,5	;RP0=0, select bank0
  1929  05A9  1303               	bcf	3,6	;RP1=0, select bank0
  1930  05AA  083F               	movf	_lcd+2,w
  1931  05AB  3907               	andlw	7
  1932  05AC  3E01               	addlw	1
  1933  05AD  2DB0               	goto	u1074
  1934  05AE                     u1075:	
  1935  05AE  1003               	clrc
  1936  05AF  0DF4               	rlf	??_LCD_putc,f
  1937  05B0                     u1074:	
  1938  05B0  3EFF               	addlw	-1
  1939  05B1  1D03               	skipz
  1940  05B2  2DAE               	goto	u1075
  1941  05B3  0874               	movf	??_LCD_putc,w
  1942  05B4  00F5               	movwf	??_LCD_putc+1
  1943  05B5  083D               	movf	_lcd,w
  1944  05B6  0084               	movwf	4
  1945  05B7  1783               	bsf	3,7
  1946  05B8  1C3E               	btfss	_lcd+1,0
  1947  05B9  1383               	bcf	3,7
  1948  05BA  0875               	movf	??_LCD_putc+1,w
  1949  05BB  0480               	iorwf	0,f
  1950                           
  1951                           ;lcd.c: 122:     LCD_Out((c & 0xF0) >> 4);
  1952  05BC  0877               	movf	LCD_putc@c,w
  1953  05BD  00F4               	movwf	??_LCD_putc
  1954  05BE  3004               	movlw	4
  1955  05BF                     u1085:	
  1956  05BF  1003               	clrc
  1957  05C0  0CF4               	rrf	??_LCD_putc,f
  1958  05C1  3EFF               	addlw	-1
  1959  05C2  1D03               	skipz
  1960  05C3  2DBF               	goto	u1085
  1961  05C4  0874               	movf	??_LCD_putc,w
  1962  05C5  390F               	andlw	15
  1963  05C6  263B               	fcall	_LCD_Out
  1964                           
  1965                           ;lcd.c: 124:     *(lcd.PORT) |= 1 << lcd.EN;
  1966  05C7  3001               	movlw	1
  1967  05C8  00F4               	movwf	??_LCD_putc
  1968  05C9  1283               	bcf	3,5	;RP0=0, select bank0
  1969  05CA  1303               	bcf	3,6	;RP1=0, select bank0
  1970  05CB  0C3F               	rrf	_lcd+2,w
  1971  05CC  00F5               	movwf	??_LCD_putc+1
  1972  05CD  0CF5               	rrf	??_LCD_putc+1,f
  1973  05CE  0C75               	rrf	??_LCD_putc+1,w
  1974  05CF  3907               	andlw	7
  1975  05D0  3E01               	addlw	1
  1976  05D1  2DD4               	goto	u1094
  1977  05D2                     u1095:	
  1978  05D2  1003               	clrc
  1979  05D3  0DF4               	rlf	??_LCD_putc,f
  1980  05D4                     u1094:	
  1981  05D4  3EFF               	addlw	-1
  1982  05D5  1D03               	skipz
  1983  05D6  2DD2               	goto	u1095
  1984  05D7  0874               	movf	??_LCD_putc,w
  1985  05D8  00F6               	movwf	??_LCD_putc+2
  1986  05D9  083D               	movf	_lcd,w
  1987  05DA  0084               	movwf	4
  1988  05DB  1783               	bsf	3,7
  1989  05DC  1C3E               	btfss	_lcd+1,0
  1990  05DD  1383               	bcf	3,7
  1991  05DE  0876               	movf	??_LCD_putc+2,w
  1992  05DF  0480               	iorwf	0,f
  1993                           
  1994                           ;lcd.c: 125:     _delay((unsigned long)((40)*(8000000/4000000.0)));
  1995  05E0  301A               	movlw	26
  1996  05E1  00F4               	movwf	??_LCD_putc
  1997  05E2                     u1637:	
  1998  05E2  0BF4               	decfsz	??_LCD_putc,f
  1999  05E3  2DE2               	goto	u1637
  2000  05E4  0000               	nop
  2001                           
  2002                           ;lcd.c: 126:     *(lcd.PORT) &= ~(1 << lcd.EN);
  2003  05E5  3001               	movlw	1
  2004  05E6  00F4               	movwf	??_LCD_putc
  2005  05E7  1283               	bcf	3,5	;RP0=0, select bank0
  2006  05E8  1303               	bcf	3,6	;RP1=0, select bank0
  2007  05E9  0C3F               	rrf	_lcd+2,w
  2008  05EA  00F5               	movwf	??_LCD_putc+1
  2009  05EB  0CF5               	rrf	??_LCD_putc+1,f
  2010  05EC  0C75               	rrf	??_LCD_putc+1,w
  2011  05ED  3907               	andlw	7
  2012  05EE  3E01               	addlw	1
  2013  05EF  2DF2               	goto	u1104
  2014  05F0                     u1105:	
  2015  05F0  1003               	clrc
  2016  05F1  0DF4               	rlf	??_LCD_putc,f
  2017  05F2                     u1104:	
  2018  05F2  3EFF               	addlw	-1
  2019  05F3  1D03               	skipz
  2020  05F4  2DF0               	goto	u1105
  2021  05F5  0874               	movf	??_LCD_putc,w
  2022  05F6  3AFF               	xorlw	255
  2023  05F7  00F6               	movwf	??_LCD_putc+2
  2024  05F8  083D               	movf	_lcd,w
  2025  05F9  0084               	movwf	4
  2026  05FA  1783               	bsf	3,7
  2027  05FB  1C3E               	btfss	_lcd+1,0
  2028  05FC  1383               	bcf	3,7
  2029  05FD  0876               	movf	??_LCD_putc+2,w
  2030  05FE  0580               	andwf	0,f
  2031                           
  2032                           ;lcd.c: 128:     LCD_Out(c & 0x0F);
  2033  05FF  0877               	movf	LCD_putc@c,w
  2034  0600  390F               	andlw	15
  2035  0601  263B               	fcall	_LCD_Out
  2036                           
  2037                           ;lcd.c: 130:     *(lcd.PORT) |= 1 << lcd.EN;
  2038  0602  3001               	movlw	1
  2039  0603  00F4               	movwf	??_LCD_putc
  2040  0604  1283               	bcf	3,5	;RP0=0, select bank0
  2041  0605  1303               	bcf	3,6	;RP1=0, select bank0
  2042  0606  0C3F               	rrf	_lcd+2,w
  2043  0607  00F5               	movwf	??_LCD_putc+1
  2044  0608  0CF5               	rrf	??_LCD_putc+1,f
  2045  0609  0C75               	rrf	??_LCD_putc+1,w
  2046  060A  3907               	andlw	7
  2047  060B  3E01               	addlw	1
  2048  060C  2E0F               	goto	u1114
  2049  060D                     u1115:	
  2050  060D  1003               	clrc
  2051  060E  0DF4               	rlf	??_LCD_putc,f
  2052  060F                     u1114:	
  2053  060F  3EFF               	addlw	-1
  2054  0610  1D03               	skipz
  2055  0611  2E0D               	goto	u1115
  2056  0612  0874               	movf	??_LCD_putc,w
  2057  0613  00F6               	movwf	??_LCD_putc+2
  2058  0614  083D               	movf	_lcd,w
  2059  0615  0084               	movwf	4
  2060  0616  1783               	bsf	3,7
  2061  0617  1C3E               	btfss	_lcd+1,0
  2062  0618  1383               	bcf	3,7
  2063  0619  0876               	movf	??_LCD_putc+2,w
  2064  061A  0480               	iorwf	0,f
  2065                           
  2066                           ;lcd.c: 131:     _delay((unsigned long)((40)*(8000000/4000000.0)));
  2067  061B  301A               	movlw	26
  2068  061C  00F4               	movwf	??_LCD_putc
  2069  061D                     u1647:	
  2070  061D  0BF4               	decfsz	??_LCD_putc,f
  2071  061E  2E1D               	goto	u1647
  2072  061F  0000               	nop
  2073                           
  2074                           ;lcd.c: 132:     *(lcd.PORT) &= ~(1 << lcd.EN);
  2075  0620  3001               	movlw	1
  2076  0621  00F4               	movwf	??_LCD_putc
  2077  0622  1283               	bcf	3,5	;RP0=0, select bank0
  2078  0623  1303               	bcf	3,6	;RP1=0, select bank0
  2079  0624  0C3F               	rrf	_lcd+2,w
  2080  0625  00F5               	movwf	??_LCD_putc+1
  2081  0626  0CF5               	rrf	??_LCD_putc+1,f
  2082  0627  0C75               	rrf	??_LCD_putc+1,w
  2083  0628  3907               	andlw	7
  2084  0629  3E01               	addlw	1
  2085  062A  2E2D               	goto	u1124
  2086  062B                     u1125:	
  2087  062B  1003               	clrc
  2088  062C  0DF4               	rlf	??_LCD_putc,f
  2089  062D                     u1124:	
  2090  062D  3EFF               	addlw	-1
  2091  062E  1D03               	skipz
  2092  062F  2E2B               	goto	u1125
  2093  0630  0874               	movf	??_LCD_putc,w
  2094  0631  3AFF               	xorlw	255
  2095  0632  00F6               	movwf	??_LCD_putc+2
  2096  0633  083D               	movf	_lcd,w
  2097  0634  0084               	movwf	4
  2098  0635  1783               	bsf	3,7
  2099  0636  1C3E               	btfss	_lcd+1,0
  2100  0637  1383               	bcf	3,7
  2101  0638  0876               	movf	??_LCD_putc+2,w
  2102  0639  0580               	andwf	0,f
  2103  063A  0008               	return
  2104  063B                     __end_of_LCD_putc:	
  2105                           
  2106                           	psect	text11
  2107  0528                     __ptext11:	
  2108 ;; *************** function _LCD_Init *****************
  2109 ;; Defined at:
  2110 ;;		line 61 in file "lcd.c"
  2111 ;; Parameters:    Size  Location     Type
  2112 ;;  display         5    8[COMMON] struct .
  2113 ;; Auto vars:     Size  Location     Type
  2114 ;;  cmd             1   13[COMMON] unsigned char 
  2115 ;; Return value:  Size  Location     Type
  2116 ;;                  1    wreg      _Bool 
  2117 ;; Registers used:
  2118 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2119 ;; Tracked objects:
  2120 ;;		On entry : 0/0
  2121 ;;		On exit  : 0/0
  2122 ;;		Unchanged: 0/0
  2123 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2124 ;;      Params:         5       0       0       0
  2125 ;;      Locals:         1       0       0       0
  2126 ;;      Temps:          0       2       0       0
  2127 ;;      Totals:         6       2       0       0
  2128 ;;Total ram usage:        8 bytes
  2129 ;; Hardware stack levels used:    1
  2130 ;; Hardware stack levels required when called:    2
  2131 ;; This function calls:
  2132 ;;		_LCD_Write
  2133 ;; This function is called by:
  2134 ;;		_main
  2135 ;; This function uses a non-reentrant model
  2136 ;;
  2137                           
  2138                           
  2139                           ;psect for function _LCD_Init
  2140  0528                     _LCD_Init:	
  2141                           
  2142                           ;lcd.c: 63:     lcd = display;
  2143                           
  2144                           ;incstack = 0
  2145                           ; Regs used in _LCD_Init: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2146  0528  303D               	movlw	_lcd& (0+255)
  2147  0529  0084               	movwf	4
  2148  052A  0878               	movf	LCD_Init@display,w
  2149  052B  1383               	bcf	3,7	;select IRP bank0
  2150  052C  0080               	movwf	0
  2151  052D  0A84               	incf	4,f
  2152  052E  0879               	movf	LCD_Init@display+1,w
  2153  052F  0080               	movwf	0
  2154  0530  0A84               	incf	4,f
  2155  0531  087A               	movf	LCD_Init@display+2,w
  2156  0532  0080               	movwf	0
  2157  0533  0A84               	incf	4,f
  2158  0534  087B               	movf	LCD_Init@display+3,w
  2159  0535  0080               	movwf	0
  2160  0536  0A84               	incf	4,f
  2161  0537  087C               	movf	LCD_Init@display+4,w
  2162  0538  0080               	movwf	0
  2163                           
  2164                           ;lcd.c: 72:     if ( lcd.PORT == &PORTA ) {
  2165  0539  3000               	movlw	0
  2166  053A  1283               	bcf	3,5	;RP0=0, select bank0
  2167  053B  1303               	bcf	3,6	;RP1=0, select bank0
  2168  053C  063E               	xorwf	_lcd+1,w
  2169  053D  1D03               	skipz
  2170  053E  2D41               	goto	u1335
  2171  053F  3005               	movlw	5
  2172  0540  063D               	xorwf	_lcd,w
  2173  0541                     u1335:	
  2174  0541  1D03               	skipz
  2175  0542  2D47               	goto	l1285
  2176                           
  2177                           ;lcd.c: 73:         TRISA = 0x00;
  2178  0543  1683               	bsf	3,5	;RP0=1, select bank1
  2179  0544  1303               	bcf	3,6	;RP1=0, select bank1
  2180  0545  0185               	clrf	5	;volatile
  2181                           
  2182                           ;lcd.c: 74:     }
  2183  0546  2D5A               	goto	l1293
  2184  0547                     l1285:	
  2185  0547  3000               	movlw	0
  2186  0548  063E               	xorwf	_lcd+1,w
  2187  0549  1D03               	skipz
  2188  054A  2D4D               	goto	u1345
  2189  054B  3006               	movlw	6
  2190  054C  063D               	xorwf	_lcd,w
  2191  054D                     u1345:	
  2192  054D  1903               	btfsc	3,2
  2193  054E  2D57               	goto	l1287
  2194                           
  2195                           ;lcd.c: 77:     }
  2196  054F  3000               	movlw	0
  2197  0550  063E               	xorwf	_lcd+1,w
  2198  0551  1D03               	skipz
  2199  0552  2D55               	goto	u1355
  2200  0553  3006               	movlw	6
  2201  0554  063D               	xorwf	_lcd,w
  2202  0555                     u1355:	
  2203  0555  1D03               	skipz
  2204  0556  0008               	return
  2205  0557                     l1287:	
  2206                           
  2207                           ;lcd.c: 76:         TRISB = 0x00;
  2208  0557  1683               	bsf	3,5	;RP0=1, select bank1
  2209  0558  1303               	bcf	3,6	;RP1=0, select bank1
  2210  0559  0186               	clrf	6	;volatile
  2211  055A                     l1293:	
  2212                           
  2213                           ;lcd.c: 94:     _delay((unsigned long)((20)*(8000000/4000.0)));
  2214  055A  3034               	movlw	52
  2215  055B  1283               	bcf	3,5	;RP0=0, select bank0
  2216  055C  1303               	bcf	3,6	;RP1=0, select bank0
  2217  055D  00A1               	movwf	??_LCD_Init+1
  2218  055E  30F1               	movlw	241
  2219  055F  00A0               	movwf	??_LCD_Init
  2220  0560                     u1657:	
  2221  0560  0BA0               	decfsz	??_LCD_Init,f
  2222  0561  2D60               	goto	u1657
  2223  0562  0BA1               	decfsz	??_LCD_Init+1,f
  2224  0563  2D60               	goto	u1657
  2225  0564  0000               	nop
  2226                           
  2227                           ;lcd.c: 97:     LCD_Write(0x03);
  2228  0565  3003               	movlw	3
  2229  0566  23A2               	fcall	_LCD_Write
  2230                           
  2231                           ;lcd.c: 98:     _delay((unsigned long)((5)*(8000000/4000.0)));
  2232  0567  300D               	movlw	13
  2233  0568  1283               	bcf	3,5	;RP0=0, select bank0
  2234  0569  1303               	bcf	3,6	;RP1=0, select bank0
  2235  056A  00A1               	movwf	??_LCD_Init+1
  2236  056B  30FB               	movlw	251
  2237  056C  00A0               	movwf	??_LCD_Init
  2238  056D                     u1667:	
  2239  056D  0BA0               	decfsz	??_LCD_Init,f
  2240  056E  2D6D               	goto	u1667
  2241  056F  0BA1               	decfsz	??_LCD_Init+1,f
  2242  0570  2D6D               	goto	u1667
  2243  0571  0000               	nop
  2244                           
  2245                           ;lcd.c: 99:     LCD_Write(0x03);
  2246  0572  3003               	movlw	3
  2247  0573  23A2               	fcall	_LCD_Write
  2248                           
  2249                           ;lcd.c: 100:     _delay((unsigned long)((16)*(8000000/4000.0)));
  2250  0574  302A               	movlw	42
  2251  0575  1283               	bcf	3,5	;RP0=0, select bank0
  2252  0576  1303               	bcf	3,6	;RP1=0, select bank0
  2253  0577  00A1               	movwf	??_LCD_Init+1
  2254  0578  308D               	movlw	141
  2255  0579  00A0               	movwf	??_LCD_Init
  2256  057A                     u1677:	
  2257  057A  0BA0               	decfsz	??_LCD_Init,f
  2258  057B  2D7A               	goto	u1677
  2259  057C  0BA1               	decfsz	??_LCD_Init+1,f
  2260  057D  2D7A               	goto	u1677
  2261  057E  0000               	nop
  2262                           
  2263                           ;lcd.c: 101:     LCD_Write(0x03);
  2264  057F  3003               	movlw	3
  2265  0580  23A2               	fcall	_LCD_Write
  2266                           
  2267                           ;lcd.c: 104:     LCD_Write(0x02);
  2268  0581  3002               	movlw	2
  2269  0582  23A2               	fcall	_LCD_Write
  2270  0583  3002               	movlw	2
  2271  0584  23A2               	fcall	_LCD_Write
  2272  0585  3008               	movlw	8
  2273  0586  23A2               	fcall	_LCD_Write
  2274  0587  3000               	movlw	0
  2275  0588  23A2               	fcall	_LCD_Write
  2276  0589  3006               	movlw	6
  2277  058A  23A2               	fcall	_LCD_Write
  2278  058B  3008               	movlw	8
  2279  058C  1283               	bcf	3,5	;RP0=0, select bank0
  2280  058D  1303               	bcf	3,6	;RP1=0, select bank0
  2281  058E  00A0               	movwf	??_LCD_Init
  2282  058F  0820               	movf	??_LCD_Init,w
  2283  0590  00FD               	movwf	LCD_Init@cmd
  2284  0591  157D               	bsf	LCD_Init@cmd,2
  2285  0592  087D               	movf	LCD_Init@cmd,w
  2286  0593  00A0               	movwf	??_LCD_Init
  2287  0594  3004               	movlw	4
  2288  0595                     u1365:	
  2289  0595  1003               	clrc
  2290  0596  0CA0               	rrf	??_LCD_Init,f
  2291  0597  3EFF               	addlw	-1
  2292  0598  1D03               	skipz
  2293  0599  2D95               	goto	u1365
  2294  059A  0820               	movf	??_LCD_Init,w
  2295  059B  390F               	andlw	15
  2296  059C  23A2               	fcall	_LCD_Write
  2297  059D  087D               	movf	LCD_Init@cmd,w
  2298  059E  390F               	andlw	15
  2299  059F  23A2               	fcall	_LCD_Write
  2300                           
  2301                           ;lcd.c: 114:     do { LCD_Write( (0x01 & 0xF0) >> 4 ); LCD_Write( 0x01 & 0x0F); } while 
      +                          ( 0 );
  2302  05A0  3000               	movlw	0
  2303  05A1  23A2               	fcall	_LCD_Write
  2304  05A2  3001               	movlw	1
  2305  05A3  23A2               	fcall	_LCD_Write
  2306  05A4  0008               	return
  2307  05A5                     __end_of_LCD_Init:	
  2308                           
  2309                           	psect	text12
  2310  03A2                     __ptext12:	
  2311 ;; *************** function _LCD_Write *****************
  2312 ;; Defined at:
  2313 ;;		line 50 in file "lcd.c"
  2314 ;; Parameters:    Size  Location     Type
  2315 ;;  c               1    wreg     unsigned char 
  2316 ;; Auto vars:     Size  Location     Type
  2317 ;;  c               1    7[COMMON] unsigned char 
  2318 ;; Return value:  Size  Location     Type
  2319 ;;                  1    wreg      void 
  2320 ;; Registers used:
  2321 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2322 ;; Tracked objects:
  2323 ;;		On entry : 0/0
  2324 ;;		On exit  : 0/0
  2325 ;;		Unchanged: 0/0
  2326 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2327 ;;      Params:         0       0       0       0
  2328 ;;      Locals:         1       0       0       0
  2329 ;;      Temps:          3       0       0       0
  2330 ;;      Totals:         4       0       0       0
  2331 ;;Total ram usage:        4 bytes
  2332 ;; Hardware stack levels used:    1
  2333 ;; Hardware stack levels required when called:    1
  2334 ;; This function calls:
  2335 ;;		_LCD_Out
  2336 ;; This function is called by:
  2337 ;;		_LCD_Init
  2338 ;;		_mostrarNum
  2339 ;;		_main
  2340 ;; This function uses a non-reentrant model
  2341 ;;
  2342                           
  2343                           
  2344                           ;psect for function _LCD_Write
  2345  03A2                     _LCD_Write:	
  2346                           
  2347                           ;incstack = 0
  2348                           ; Regs used in _LCD_Write: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2349                           ;LCD_Write@c stored from wreg
  2350  03A2  00F7               	movwf	LCD_Write@c
  2351                           
  2352                           ;lcd.c: 52:     *(lcd.PORT) &= ~(1 << lcd.RS);
  2353  03A3  3001               	movlw	1
  2354  03A4  00F4               	movwf	??_LCD_Write
  2355  03A5  1283               	bcf	3,5	;RP0=0, select bank0
  2356  03A6  1303               	bcf	3,6	;RP1=0, select bank0
  2357  03A7  083F               	movf	_lcd+2,w
  2358  03A8  3907               	andlw	7
  2359  03A9  3E01               	addlw	1
  2360  03AA  2BAD               	goto	u1264
  2361  03AB                     u1265:	
  2362  03AB  1003               	clrc
  2363  03AC  0DF4               	rlf	??_LCD_Write,f
  2364  03AD                     u1264:	
  2365  03AD  3EFF               	addlw	-1
  2366  03AE  1D03               	skipz
  2367  03AF  2BAB               	goto	u1265
  2368  03B0  0874               	movf	??_LCD_Write,w
  2369  03B1  3AFF               	xorlw	255
  2370  03B2  00F5               	movwf	??_LCD_Write+1
  2371  03B3  083D               	movf	_lcd,w
  2372  03B4  0084               	movwf	4
  2373  03B5  1783               	bsf	3,7
  2374  03B6  1C3E               	btfss	_lcd+1,0
  2375  03B7  1383               	bcf	3,7
  2376  03B8  0875               	movf	??_LCD_Write+1,w
  2377  03B9  0580               	andwf	0,f
  2378                           
  2379                           ;lcd.c: 53:     LCD_Out(c);
  2380  03BA  0877               	movf	LCD_Write@c,w
  2381  03BB  263B               	fcall	_LCD_Out
  2382                           
  2383                           ;lcd.c: 55:     *(lcd.PORT) |= 1 << lcd.EN;
  2384  03BC  3001               	movlw	1
  2385  03BD  00F4               	movwf	??_LCD_Write
  2386  03BE  1283               	bcf	3,5	;RP0=0, select bank0
  2387  03BF  1303               	bcf	3,6	;RP1=0, select bank0
  2388  03C0  0C3F               	rrf	_lcd+2,w
  2389  03C1  00F5               	movwf	??_LCD_Write+1
  2390  03C2  0CF5               	rrf	??_LCD_Write+1,f
  2391  03C3  0C75               	rrf	??_LCD_Write+1,w
  2392  03C4  3907               	andlw	7
  2393  03C5  3E01               	addlw	1
  2394  03C6  2BC9               	goto	u1274
  2395  03C7                     u1275:	
  2396  03C7  1003               	clrc
  2397  03C8  0DF4               	rlf	??_LCD_Write,f
  2398  03C9                     u1274:	
  2399  03C9  3EFF               	addlw	-1
  2400  03CA  1D03               	skipz
  2401  03CB  2BC7               	goto	u1275
  2402  03CC  0874               	movf	??_LCD_Write,w
  2403  03CD  00F6               	movwf	??_LCD_Write+2
  2404  03CE  083D               	movf	_lcd,w
  2405  03CF  0084               	movwf	4
  2406  03D0  1783               	bsf	3,7
  2407  03D1  1C3E               	btfss	_lcd+1,0
  2408  03D2  1383               	bcf	3,7
  2409  03D3  0876               	movf	??_LCD_Write+2,w
  2410  03D4  0480               	iorwf	0,f
  2411                           
  2412                           ;lcd.c: 56:     _delay((unsigned long)((4)*(8000000/4000.0)));
  2413  03D5  300B               	movlw	11
  2414  03D6  00F5               	movwf	??_LCD_Write+1
  2415  03D7  3062               	movlw	98
  2416  03D8  00F4               	movwf	??_LCD_Write
  2417  03D9                     u1687:	
  2418  03D9  0BF4               	decfsz	??_LCD_Write,f
  2419  03DA  2BD9               	goto	u1687
  2420  03DB  0BF5               	decfsz	??_LCD_Write+1,f
  2421  03DC  2BD9               	goto	u1687
  2422  03DD  0000               	nop
  2423                           
  2424                           ;lcd.c: 57:     *(lcd.PORT) &= ~(1 << lcd.EN);
  2425  03DE  3001               	movlw	1
  2426  03DF  00F4               	movwf	??_LCD_Write
  2427  03E0  1283               	bcf	3,5	;RP0=0, select bank0
  2428  03E1  1303               	bcf	3,6	;RP1=0, select bank0
  2429  03E2  0C3F               	rrf	_lcd+2,w
  2430  03E3  00F5               	movwf	??_LCD_Write+1
  2431  03E4  0CF5               	rrf	??_LCD_Write+1,f
  2432  03E5  0C75               	rrf	??_LCD_Write+1,w
  2433  03E6  3907               	andlw	7
  2434  03E7  3E01               	addlw	1
  2435  03E8  2BEB               	goto	u1284
  2436  03E9                     u1285:	
  2437  03E9  1003               	clrc
  2438  03EA  0DF4               	rlf	??_LCD_Write,f
  2439  03EB                     u1284:	
  2440  03EB  3EFF               	addlw	-1
  2441  03EC  1D03               	skipz
  2442  03ED  2BE9               	goto	u1285
  2443  03EE  0874               	movf	??_LCD_Write,w
  2444  03EF  3AFF               	xorlw	255
  2445  03F0  00F6               	movwf	??_LCD_Write+2
  2446  03F1  083D               	movf	_lcd,w
  2447  03F2  0084               	movwf	4
  2448  03F3  1783               	bsf	3,7
  2449  03F4  1C3E               	btfss	_lcd+1,0
  2450  03F5  1383               	bcf	3,7
  2451  03F6  0876               	movf	??_LCD_Write+2,w
  2452  03F7  0580               	andwf	0,f
  2453  03F8  0008               	return
  2454  03F9                     __end_of_LCD_Write:	
  2455                           
  2456                           	psect	text13
  2457  063B                     __ptext13:	
  2458 ;; *************** function _LCD_Out *****************
  2459 ;; Defined at:
  2460 ;;		line 18 in file "lcd.c"
  2461 ;; Parameters:    Size  Location     Type
  2462 ;;  c               1    wreg     unsigned char 
  2463 ;; Auto vars:     Size  Location     Type
  2464 ;;  c               1    3[COMMON] unsigned char 
  2465 ;; Return value:  Size  Location     Type
  2466 ;;                  1    wreg      void 
  2467 ;; Registers used:
  2468 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2469 ;; Tracked objects:
  2470 ;;		On entry : 0/0
  2471 ;;		On exit  : 0/0
  2472 ;;		Unchanged: 0/0
  2473 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2474 ;;      Params:         0       0       0       0
  2475 ;;      Locals:         1       0       0       0
  2476 ;;      Temps:          3       0       0       0
  2477 ;;      Totals:         4       0       0       0
  2478 ;;Total ram usage:        4 bytes
  2479 ;; Hardware stack levels used:    1
  2480 ;; This function calls:
  2481 ;;		Nothing
  2482 ;; This function is called by:
  2483 ;;		_LCD_Write
  2484 ;;		_LCD_putc
  2485 ;; This function uses a non-reentrant model
  2486 ;;
  2487                           
  2488                           
  2489                           ;psect for function _LCD_Out
  2490  063B                     _LCD_Out:	
  2491                           
  2492                           ;incstack = 0
  2493                           ; Regs used in _LCD_Out: [wreg-fsr0h+status,2+status,0]
  2494                           ;LCD_Out@c stored from wreg
  2495  063B  00F3               	movwf	LCD_Out@c
  2496                           
  2497                           ;lcd.c: 20:     if ( c & 1 ){
  2498  063C  1C73               	btfss	LCD_Out@c,0
  2499  063D  2E55               	goto	l1069
  2500                           
  2501                           ;lcd.c: 21:         *(lcd.PORT) |= 1 << lcd.D4;
  2502  063E  3001               	movlw	1
  2503  063F  00F0               	movwf	??_LCD_Out
  2504  0640  1283               	bcf	3,5	;RP0=0, select bank0
  2505  0641  1303               	bcf	3,6	;RP1=0, select bank0
  2506  0642  0840               	movf	_lcd+3,w
  2507  0643  3907               	andlw	7
  2508  0644  3E01               	addlw	1
  2509  0645  2E48               	goto	u834
  2510  0646                     u835:	
  2511  0646  1003               	clrc
  2512  0647  0DF0               	rlf	??_LCD_Out,f
  2513  0648                     u834:	
  2514  0648  3EFF               	addlw	-1
  2515  0649  1D03               	skipz
  2516  064A  2E46               	goto	u835
  2517  064B  0870               	movf	??_LCD_Out,w
  2518  064C  00F1               	movwf	??_LCD_Out+1
  2519  064D  083D               	movf	_lcd,w
  2520  064E  0084               	movwf	4
  2521  064F  1783               	bsf	3,7
  2522  0650  1C3E               	btfss	_lcd+1,0
  2523  0651  1383               	bcf	3,7
  2524  0652  0871               	movf	??_LCD_Out+1,w
  2525  0653  0480               	iorwf	0,f
  2526                           
  2527                           ;lcd.c: 22:     }
  2528  0654  2E6C               	goto	l1071
  2529  0655                     l1069:	
  2530                           
  2531                           ;lcd.c: 24:          *(lcd.PORT) &= ~(1 << lcd.D4);
  2532  0655  3001               	movlw	1
  2533  0656  00F0               	movwf	??_LCD_Out
  2534  0657  1283               	bcf	3,5	;RP0=0, select bank0
  2535  0658  1303               	bcf	3,6	;RP1=0, select bank0
  2536  0659  0840               	movf	_lcd+3,w
  2537  065A  3907               	andlw	7
  2538  065B  3E01               	addlw	1
  2539  065C  2E5F               	goto	u844
  2540  065D                     u845:	
  2541  065D  1003               	clrc
  2542  065E  0DF0               	rlf	??_LCD_Out,f
  2543  065F                     u844:	
  2544  065F  3EFF               	addlw	-1
  2545  0660  1D03               	skipz
  2546  0661  2E5D               	goto	u845
  2547  0662  0870               	movf	??_LCD_Out,w
  2548  0663  3AFF               	xorlw	255
  2549  0664  00F1               	movwf	??_LCD_Out+1
  2550  0665  083D               	movf	_lcd,w
  2551  0666  0084               	movwf	4
  2552  0667  1783               	bsf	3,7
  2553  0668  1C3E               	btfss	_lcd+1,0
  2554  0669  1383               	bcf	3,7
  2555  066A  0871               	movf	??_LCD_Out+1,w
  2556  066B  0580               	andwf	0,f
  2557  066C                     l1071:	
  2558                           
  2559                           ;lcd.c: 27:     if ( c & 2 ) {
  2560  066C  1CF3               	btfss	LCD_Out@c,1
  2561  066D  2E86               	goto	l1075
  2562                           
  2563                           ;lcd.c: 28:         *(lcd.PORT) |= 1 << lcd.D5;
  2564  066E  3001               	movlw	1
  2565  066F  00F0               	movwf	??_LCD_Out
  2566  0670  0C40               	rrf	_lcd+3,w
  2567  0671  00F1               	movwf	??_LCD_Out+1
  2568  0672  0CF1               	rrf	??_LCD_Out+1,f
  2569  0673  0C71               	rrf	??_LCD_Out+1,w
  2570  0674  3907               	andlw	7
  2571  0675  3E01               	addlw	1
  2572  0676  2E79               	goto	u864
  2573  0677                     u865:	
  2574  0677  1003               	clrc
  2575  0678  0DF0               	rlf	??_LCD_Out,f
  2576  0679                     u864:	
  2577  0679  3EFF               	addlw	-1
  2578  067A  1D03               	skipz
  2579  067B  2E77               	goto	u865
  2580  067C  0870               	movf	??_LCD_Out,w
  2581  067D  00F2               	movwf	??_LCD_Out+2
  2582  067E  083D               	movf	_lcd,w
  2583  067F  0084               	movwf	4
  2584  0680  1783               	bsf	3,7
  2585  0681  1C3E               	btfss	_lcd+1,0
  2586  0682  1383               	bcf	3,7
  2587  0683  0872               	movf	??_LCD_Out+2,w
  2588  0684  0480               	iorwf	0,f
  2589                           
  2590                           ;lcd.c: 29:     }
  2591  0685  2E9E               	goto	l1077
  2592  0686                     l1075:	
  2593                           
  2594                           ;lcd.c: 31:         *(lcd.PORT) &= ~(1 << lcd.D5);
  2595  0686  3001               	movlw	1
  2596  0687  00F0               	movwf	??_LCD_Out
  2597  0688  0C40               	rrf	_lcd+3,w
  2598  0689  00F1               	movwf	??_LCD_Out+1
  2599  068A  0CF1               	rrf	??_LCD_Out+1,f
  2600  068B  0C71               	rrf	??_LCD_Out+1,w
  2601  068C  3907               	andlw	7
  2602  068D  3E01               	addlw	1
  2603  068E  2E91               	goto	u874
  2604  068F                     u875:	
  2605  068F  1003               	clrc
  2606  0690  0DF0               	rlf	??_LCD_Out,f
  2607  0691                     u874:	
  2608  0691  3EFF               	addlw	-1
  2609  0692  1D03               	skipz
  2610  0693  2E8F               	goto	u875
  2611  0694  0870               	movf	??_LCD_Out,w
  2612  0695  3AFF               	xorlw	255
  2613  0696  00F2               	movwf	??_LCD_Out+2
  2614  0697  083D               	movf	_lcd,w
  2615  0698  0084               	movwf	4
  2616  0699  1783               	bsf	3,7
  2617  069A  1C3E               	btfss	_lcd+1,0
  2618  069B  1383               	bcf	3,7
  2619  069C  0872               	movf	??_LCD_Out+2,w
  2620  069D  0580               	andwf	0,f
  2621  069E                     l1077:	
  2622                           
  2623                           ;lcd.c: 34:     if ( c & 4 ) {
  2624  069E  1D73               	btfss	LCD_Out@c,2
  2625  069F  2EB5               	goto	l1081
  2626                           
  2627                           ;lcd.c: 35:         *(lcd.PORT) |= 1 << lcd.D6;
  2628  06A0  3001               	movlw	1
  2629  06A1  00F0               	movwf	??_LCD_Out
  2630  06A2  0841               	movf	_lcd+4,w
  2631  06A3  3907               	andlw	7
  2632  06A4  3E01               	addlw	1
  2633  06A5  2EA8               	goto	u894
  2634  06A6                     u895:	
  2635  06A6  1003               	clrc
  2636  06A7  0DF0               	rlf	??_LCD_Out,f
  2637  06A8                     u894:	
  2638  06A8  3EFF               	addlw	-1
  2639  06A9  1D03               	skipz
  2640  06AA  2EA6               	goto	u895
  2641  06AB  0870               	movf	??_LCD_Out,w
  2642  06AC  00F1               	movwf	??_LCD_Out+1
  2643  06AD  083D               	movf	_lcd,w
  2644  06AE  0084               	movwf	4
  2645  06AF  1783               	bsf	3,7
  2646  06B0  1C3E               	btfss	_lcd+1,0
  2647  06B1  1383               	bcf	3,7
  2648  06B2  0871               	movf	??_LCD_Out+1,w
  2649  06B3  0480               	iorwf	0,f
  2650                           
  2651                           ;lcd.c: 36:     }
  2652  06B4  2ECA               	goto	l1083
  2653  06B5                     l1081:	
  2654                           
  2655                           ;lcd.c: 38:         *(lcd.PORT) &= ~(1 << lcd.D6);
  2656  06B5  3001               	movlw	1
  2657  06B6  00F0               	movwf	??_LCD_Out
  2658  06B7  0841               	movf	_lcd+4,w
  2659  06B8  3907               	andlw	7
  2660  06B9  3E01               	addlw	1
  2661  06BA  2EBD               	goto	u904
  2662  06BB                     u905:	
  2663  06BB  1003               	clrc
  2664  06BC  0DF0               	rlf	??_LCD_Out,f
  2665  06BD                     u904:	
  2666  06BD  3EFF               	addlw	-1
  2667  06BE  1D03               	skipz
  2668  06BF  2EBB               	goto	u905
  2669  06C0  0870               	movf	??_LCD_Out,w
  2670  06C1  3AFF               	xorlw	255
  2671  06C2  00F1               	movwf	??_LCD_Out+1
  2672  06C3  083D               	movf	_lcd,w
  2673  06C4  0084               	movwf	4
  2674  06C5  1783               	bsf	3,7
  2675  06C6  1C3E               	btfss	_lcd+1,0
  2676  06C7  1383               	bcf	3,7
  2677  06C8  0871               	movf	??_LCD_Out+1,w
  2678  06C9  0580               	andwf	0,f
  2679  06CA                     l1083:	
  2680                           
  2681                           ;lcd.c: 41:     if ( c & 8 ) {
  2682  06CA  1DF3               	btfss	LCD_Out@c,3
  2683  06CB  2EE4               	goto	l1087
  2684                           
  2685                           ;lcd.c: 42:          *(lcd.PORT) |= 1 << lcd.D7;
  2686  06CC  3001               	movlw	1
  2687  06CD  00F0               	movwf	??_LCD_Out
  2688  06CE  0C41               	rrf	_lcd+4,w
  2689  06CF  00F1               	movwf	??_LCD_Out+1
  2690  06D0  0CF1               	rrf	??_LCD_Out+1,f
  2691  06D1  0C71               	rrf	??_LCD_Out+1,w
  2692  06D2  3907               	andlw	7
  2693  06D3  3E01               	addlw	1
  2694  06D4  2ED7               	goto	u924
  2695  06D5                     u925:	
  2696  06D5  1003               	clrc
  2697  06D6  0DF0               	rlf	??_LCD_Out,f
  2698  06D7                     u924:	
  2699  06D7  3EFF               	addlw	-1
  2700  06D8  1D03               	skipz
  2701  06D9  2ED5               	goto	u925
  2702  06DA  0870               	movf	??_LCD_Out,w
  2703  06DB  00F2               	movwf	??_LCD_Out+2
  2704  06DC  083D               	movf	_lcd,w
  2705  06DD  0084               	movwf	4
  2706  06DE  1783               	bsf	3,7
  2707  06DF  1C3E               	btfss	_lcd+1,0
  2708  06E0  1383               	bcf	3,7
  2709  06E1  0872               	movf	??_LCD_Out+2,w
  2710  06E2  0480               	iorwf	0,f
  2711                           
  2712                           ;lcd.c: 43:     }
  2713  06E3  0008               	return
  2714  06E4                     l1087:	
  2715                           
  2716                           ;lcd.c: 45:          *(lcd.PORT) &= ~(1 << lcd.D7);
  2717  06E4  3001               	movlw	1
  2718  06E5  00F0               	movwf	??_LCD_Out
  2719  06E6  0C41               	rrf	_lcd+4,w
  2720  06E7  00F1               	movwf	??_LCD_Out+1
  2721  06E8  0CF1               	rrf	??_LCD_Out+1,f
  2722  06E9  0C71               	rrf	??_LCD_Out+1,w
  2723  06EA  3907               	andlw	7
  2724  06EB  3E01               	addlw	1
  2725  06EC  2EEF               	goto	u934
  2726  06ED                     u935:	
  2727  06ED  1003               	clrc
  2728  06EE  0DF0               	rlf	??_LCD_Out,f
  2729  06EF                     u934:	
  2730  06EF  3EFF               	addlw	-1
  2731  06F0  1D03               	skipz
  2732  06F1  2EED               	goto	u935
  2733  06F2  0870               	movf	??_LCD_Out,w
  2734  06F3  3AFF               	xorlw	255
  2735  06F4  00F2               	movwf	??_LCD_Out+2
  2736  06F5  083D               	movf	_lcd,w
  2737  06F6  0084               	movwf	4
  2738  06F7  1783               	bsf	3,7
  2739  06F8  1C3E               	btfss	_lcd+1,0
  2740  06F9  1383               	bcf	3,7
  2741  06FA  0872               	movf	??_LCD_Out+2,w
  2742  06FB  0580               	andwf	0,f
  2743  06FC  0008               	return
  2744  06FD                     __end_of_LCD_Out:	
  2745  007E                     btemp	set	126	;btemp
  2746  007E                     wtemp0	set	126


Data Sizes:
    Strings     23
    Constant    0
    Data        5
    BSS         5
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     29      40
    BANK1            80      0       0
    BANK2            48      0       0

Pointer List with Targets:

    utoa@buf	PTR unsigned char  size(1) Largest target is 4
		 -> mostrarNum@aux(BANK0[4]), 

    sp__utoa	PTR unsigned char  size(1) Largest target is 4
		 -> mostrarNum@aux(BANK0[4]), 

    itoa@buf	PTR unsigned char  size(1) Largest target is 4
		 -> mostrarNum@aux(BANK0[4]), 

    itoa@cp	PTR unsigned char  size(1) Largest target is 4
		 -> mostrarNum@aux(BANK0[4]), 

    lcd.PORT	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTB(SFR0[1]), 

    F716.PORT	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTB(SFR0[1]), 

    sp__itoa	PTR unsigned char  size(1) Largest target is 4
		 -> mostrarNum@aux(BANK0[4]), 

    LCD_putrs@a	PTR const unsigned char  size(1) Largest target is 17
		 -> STR_2(CODE[17]), STR_1(CODE[6]), 

    LCD_puts@a	PTR unsigned char  size(1) Largest target is 4
		 -> mostrarNum@aux(BANK0[4]), 

    display.PORT	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTB(SFR0[1]), 

    S22$PORT	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTB(SFR0[1]), 

    lcd.PORT	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTB(SFR0[1]), 


Critical Paths under _main in COMMON

    _main->_LCD_Init
    _mostrarNum->_itoa
    _numCifras->___awdiv
    _itoa->_utoa
    _utoa->___lwdiv
    _LCD_puts->_LCD_putc
    _LCD_putrs->_LCD_putc
    _LCD_putc->_LCD_Out
    _LCD_Init->_LCD_Write
    _LCD_Write->_LCD_Out

Critical Paths under _main in BANK0

    _main->_mostrarNum
    _mostrarNum->_itoa
    _itoa->_utoa

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 8     8      0    4375
                                             21 BANK0      8     8      0
                           _LCD_Init
                          _LCD_Write
                          _LCD_putrs
                         _mostrarNum
 ---------------------------------------------------------------------------------
 (1) _mostrarNum                                          11     8      3    3686
                                             10 BANK0     11     8      3
                          _LCD_Write
                          _LCD_putrs
                           _LCD_puts
                               _itoa
                          _numCifras
 ---------------------------------------------------------------------------------
 (2) _numCifras                                            4     2      2     687
                                              9 COMMON     4     2      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     512
                                              0 COMMON     9     5      4
 ---------------------------------------------------------------------------------
 (2) _itoa                                                 7     3      4    1370
                                             13 COMMON     1     1      0
                                              4 BANK0      6     2      4
                               _utoa
 ---------------------------------------------------------------------------------
 (3) _utoa                                                 9     5      4    1074
                                              8 COMMON     5     1      4
                                              0 BANK0      4     4      0
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              6     2      4     265
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              8     4      4     374
                                              0 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (2) _LCD_puts                                             4     4      0     249
                                              8 COMMON     4     4      0
                           _LCD_putc
 ---------------------------------------------------------------------------------
 (2) _LCD_putrs                                            3     3      0     276
                                              8 COMMON     3     3      0
                           _LCD_putc
 ---------------------------------------------------------------------------------
 (3) _LCD_putc                                             4     4      0     132
                                              4 COMMON     4     4      0
                            _LCD_Out
 ---------------------------------------------------------------------------------
 (1) _LCD_Init                                             8     3      5     233
                                              8 COMMON     6     1      5
                                              0 BANK0      2     2      0
                          _LCD_Write
 ---------------------------------------------------------------------------------
 (2) _LCD_Write                                            4     4      0     110
                                              4 COMMON     4     4      0
                            _LCD_Out
 ---------------------------------------------------------------------------------
 (4) _LCD_Out                                              4     4      0      88
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LCD_Init
     _LCD_Write
       _LCD_Out
   _LCD_Write
     _LCD_Out
   _LCD_putrs
     _LCD_putc
       _LCD_Out
   _mostrarNum
     _LCD_Write
       _LCD_Out
     _LCD_putrs
       _LCD_putc
         _LCD_Out
     _LCD_puts
       _LCD_putc
         _LCD_Out
     _itoa
       _utoa
         ___lwdiv
         ___lwmod
     _numCifras
       ___awdiv

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               30      0       0       9        0.0%
BITBANK2            30      0       0       8        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     1D      28       3       50.0%
BITBANK0            50      0       1       5        1.3%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      E       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      36      10        0.0%
ABS                  0      0      36       4        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA              80      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Sat May 25 11:59:30 2019

                      pc 0002             ___awdiv@sign 0076                       fsr 0004  
                    l110 0753                      l129 07EB                      l687 049C  
                    u904 06BD                      u905 06BB                      u834 0648  
                    u835 0646                      u924 06D7                      u844 065F  
                    u925 06D5                      u845 065D                      u934 06EF  
                    u935 06ED                      u864 0679                      u865 0677  
                    u874 0691                      u875 068F                      u955 0371  
                    u894 06A8                      u895 06A6                      u975 037D  
                    u985 0389                      u995 0393          LCD_Init@display 0078  
                    _lcd 003D                      fsr0 0004                      indf 0000  
        __end_of_LCD_Out 06FD                     l1101 037C                     l1111 039D  
                   l1107 0392                     l1123 033A                     l1125 0348  
                   l1133 0361                     l1071 066C                     l1081 06B5  
                   l1129 0356                     l1209 0476                     l1161 0403  
                   l1083 06CA                     l1075 0686                     l1251 02B6  
                   l1243 02CC                     l1077 069E                     l1069 0655  
                   l1333 0728                     l1087 06E4                     l1263 02F8  
                   l1167 040E                     l1415 051D                     l1407 0508  
                   l1193 044D                     l1185 043A                     l1177 0416  
                   l1273 0307                     l1361 07C0                     l1353 0798  
                   l1337 073D                     l1329 0714                     l1099 036E  
                   l1179 0424                     l1275 032F                     l1347 0784  
                   l1293 055A                     l1285 0547                     l1189 0445  
                   l1365 07D5                     l1357 07AC                     l1287 0557  
                   l1199 0459                     l1395 04E9                     STR_1 0018  
                   STR_2 0007                     u1104 05F2                     u1105 05F0  
                   u1025 033D                     u1114 060F                     u1115 060D  
                   u1124 062D                     u1125 062B                     u1045 034E  
                   u1205 043B                     u1055 0357                     u1074 05B0  
                   u1075 05AE                     u1085 05BF                     u1165 0419  
                   u1325 0319                     u1405 071B                     u1094 05D4  
                   u1335 0541                     u1095 05D2                     u1264 03AD  
                   u1265 03AB                     u1345 054D                     u1185 0425  
                   u1505 07B3                     u1425 0730                     u1274 03C9  
                   u1275 03C7                     u1355 0555                     u1195 0431  
                   u1284 03EB                     u1285 03E9                     u1365 0595  
                   u1525 07C8                     u1445 0745                     u1455 076C  
                   u1545 07DD                     u1385 0707                     u1637 05E2  
                   u1485 079F                     u1647 061D                     u1657 0560  
                   u1667 056D                     u1677 057A                     u1687 03D9  
                   _old2 023B                     _old3 0239                     _new2 023A  
                   _new3 0238                     _main 04B2                     _itoa 02E3  
                   btemp 007E                     _utoa 0452                     start 0000  
     __size_of_LCD_Write 0057              LCD_Init@cmd 007D       __size_of_LCD_putrs 0016  
       __end_of_LCD_Init 05A5         __end_of_LCD_putc 063B         __end_of_LCD_puts 02E3  
                  ?_main 0070                    ?_itoa 0024          __end_of___awdiv 0452  
                  ?_utoa 0078          ___awdiv@divisor 0070          __end_of___lwdiv 03A2  
        __end_of___lwmod 0366          ___awdiv@counter 0075                    _PORTA 0005  
                  _PORTB 0006                    _TRISA 0085                    _TRISB 0086  
                  main@a 003B                    pclath 000A                    utoa@c 0022  
                  utoa@v 0020                    status 0003                    wtemp0 007E  
        __initialization 07EE             __end_of_main 0528             __end_of_itoa 0303  
           __end_of_utoa 04B2                   ??_main 0035                   ??_itoa 007D  
                 ??_utoa 007C                ??_LCD_Out 0070        __end_of_LCD_Write 03F9  
      __end_of_LCD_putrs 02C9         ___awdiv@dividend 0072                ??___awdiv 0074  
              ??___lwdiv 0074                ??___lwmod 0074         ___awdiv@quotient 0077  
__end_of__initialization 07FE                ?_LCD_Init 0078                ?_LCD_putc 0070  
              ?_LCD_puts 0070           __pcstackCOMMON 0070             __pidataBANK0 02AE  
              LCD_putc@c 0077                LCD_puts@a 007B                LCD_puts@i 0079  
         _OPTION_REGbits 0081               __pbssBANK0 003D               ??_LCD_Init 0020  
             ??_LCD_putc 0074               ??_LCD_puts 0078               __pmaintext 04B2  
     __size_of_numCifras 0031                  _LCD_Out 063B               __stringtab 0001  
                ___awdiv 03F9                  ___lwdiv 0366                  ___lwmod 0334  
                __ptext1 06FD                  __ptext2 0303                  __ptext3 03F9  
                __ptext4 02E3                  __ptext5 0452                  __ptext6 0334  
                __ptext7 0366                  __ptext8 02C9                  __ptext9 02B3  
                main@lcd 0036                _LCD_Write 03A2     end_of_initialization 07FE  
      __end_of_numCifras 0334                _LCD_putrs 02B3                  itoa@buf 0029  
                itoa@val 0024                  utoa@buf 0023                  utoa@val 0078  
             _mostrarNum 06FD                _PORTBbits 0006               ?_LCD_Write 0070  
             ?_LCD_putrs 0070        __size_of_LCD_Init 007D        __size_of_LCD_putc 0096  
      __size_of_LCD_puts 001A               LCD_Write@c 0077            __pbitbssBANK0 0238  
    start_initialization 07EE               LCD_putrs@a 007A               LCD_putrs@i 0078  
      numCifras@contador 007B              __pdataBANK0 0042              ?_mostrarNum 002A  
               ?_LCD_Out 0070                ___latbits 0000            __pcstackBANK0 0020  
               LCD_Out@c 0073              ??_LCD_Write 0074              ??_LCD_putrs 0078  
       ___lwdiv@dividend 0072                 ?___awdiv 0070                 ?___lwdiv 0070  
               ?___lwmod 0070                __pstrings 0001         ___lwdiv@quotient 0075  
           numCifras@num 0079      __size_of_mostrarNum 00F1                 _LCD_Init 0528  
              _numCifras 0303                 _LCD_putc 05A5                 _LCD_puts 02C9  
            __stringbase 0006         __size_of_LCD_Out 00C2               ?_numCifras 0079  
       __size_of___awdiv 0059         __size_of___lwdiv 003C         __size_of___lwmod 0032  
     __end_of__stringtab 0007          ___lwdiv@divisor 0070          ___lwdiv@counter 0077  
               __ptext10 05A5                 __ptext11 0528                 __ptext12 03A2  
               __ptext13 063B            __size_of_main 0076            __size_of_itoa 0020  
          __size_of_utoa 0060                 main@F716 0042             ??_mostrarNum 002D  
         mostrarNum@aux2 0032                 itoa@base 0026         ___lwmod@dividend 0072  
     __end_of_mostrarNum 07EE              ??_numCifras 007B                stringcode 0001  
          mostrarNum@fil 0034            mostrarNum@col 002A            mostrarNum@aux 002E  
          mostrarNum@num 002B                 utoa@base 007A          ___lwmod@divisor 0070  
        ___lwmod@counter 0075                 stringdir 0001                 stringtab 0001  
